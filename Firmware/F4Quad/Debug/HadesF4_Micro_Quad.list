
HadesF4_Micro_Quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800abe8  0800abe8  0001abe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af6c  0800af6c  00020444  2**0
                  CONTENTS
  4 .ARM          00000008  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af74  0800af74  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  0800af80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f8  20000444  0800b3c4  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000493c  0800b3c4  0002493c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018519  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003395  00000000  00000000  0003898d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001480  00000000  00000000  0003d320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022568  00000000  00000000  0003e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010782  00000000  00000000  00060d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd69e  00000000  00000000  0007148a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eb28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006304  00000000  00000000  0013eba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000444 	.word	0x20000444
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abd0 	.word	0x0800abd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000448 	.word	0x20000448
 80001cc:	0800abd0 	.word	0x0800abd0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMX055_Init>:
 * INITIALISATION
 *
 *
 */

uint8_t BMX055_Init(BMX055 *bmx, SPI_HandleTypeDef *spiHandler, GPIO_TypeDef *csPinBank, uint16_t csPinAcc, uint16_t csPinGyr, uint16_t csPinMag) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	807b      	strh	r3, [r7, #2]
	uint8_t status = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	74fb      	strb	r3, [r7, #19]

	bmx->spiHandler = spiHandler;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	601a      	str	r2, [r3, #0]
	bmx->csPinBank  = csPinBank;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	605a      	str	r2, [r3, #4]
	bmx->csPinAcc   = csPinAcc;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	887a      	ldrh	r2, [r7, #2]
 8000eba:	811a      	strh	r2, [r3, #8]
	bmx->csPinGyr   = csPinGyr;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	8c3a      	ldrh	r2, [r7, #32]
 8000ec0:	815a      	strh	r2, [r3, #10]
	bmx->csPinMag   = csPinMag;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ec6:	819a      	strh	r2, [r3, #12]

	for (int n = 0; n < 3; n++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e01b      	b.n	8000f06 <BMX055_Init+0x6e>
		bmx->acc[n] = 0.0f;
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		bmx->gyr[n] = 0.0f;
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
		bmx->mag[n] = 0.0f;
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	330a      	adds	r3, #10
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < 3; n++) {
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	dde0      	ble.n	8000ece <BMX055_Init+0x36>
	}

	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_SET);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6858      	ldr	r0, [r3, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	891b      	ldrh	r3, [r3, #8]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	f003 ffc0 	bl	8004e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_SET);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6858      	ldr	r0, [r3, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	895b      	ldrh	r3, [r3, #10]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	f003 ffb8 	bl	8004e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_SET);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6858      	ldr	r0, [r3, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	899b      	ldrh	r3, [r3, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	f003 ffb0 	bl	8004e9c <HAL_GPIO_WritePin>
	 */

	/* Check chip ID (should equal 0xFA) */
	uint8_t rxData;

	status += BMX055_ReadRegisterAcc(bmx, BMX055_ACC_CHIPID, &rxData, 1);
 8000f3c:	f107 0212 	add.w	r2, r7, #18
 8000f40:	2301      	movs	r3, #1
 8000f42:	2100      	movs	r1, #0
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 fa0b 	bl	8001360 <BMX055_ReadRegisterAcc>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	7cfb      	ldrb	r3, [r7, #19]
 8000f50:	4413      	add	r3, r2
 8000f52:	74fb      	strb	r3, [r7, #19]
	if (rxData != 0xFA) {
 8000f54:	7cbb      	ldrb	r3, [r7, #18]
 8000f56:	2bfa      	cmp	r3, #250	; 0xfa
 8000f58:	d001      	beq.n	8000f5e <BMX055_Init+0xc6>
		return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e0db      	b.n	8001116 <BMX055_Init+0x27e>
	}

	status++;
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	3301      	adds	r3, #1
 8000f62:	74fb      	strb	r3, [r7, #19]

	/* Reset accelerometer */
	status += BMX055_WriteRegisterAcc(bmx, BMX055_ACC_SORST, 0xB6);
 8000f64:	22b6      	movs	r2, #182	; 0xb6
 8000f66:	2114      	movs	r1, #20
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fa48 	bl	80013fe <BMX055_WriteRegisterAcc>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	4413      	add	r3, r2
 8000f76:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(20);
 8000f78:	2014      	movs	r0, #20
 8000f7a:	f003 fcf1 	bl	8004960 <HAL_Delay>

	/* g-range (+- 8g, sensitvity is 256 LSB/g) ==> 0x08 */
	status += BMX055_WriteRegisterAcc(bmx, BMX055_ACC_RANGE, 0x08);
 8000f7e:	2208      	movs	r2, #8
 8000f80:	210f      	movs	r1, #15
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 fa3b 	bl	80013fe <BMX055_WriteRegisterAcc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	7cfb      	ldrb	r3, [r7, #19]
 8000f8e:	4413      	add	r3, r2
 8000f90:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8000f92:	2005      	movs	r0, #5
 8000f94:	f003 fce4 	bl	8004960 <HAL_Delay>

	/* Filter bandwidth (31.25 Hz) ==> 0x0A */
	status += BMX055_WriteRegisterAcc(bmx, BMX055_ACC_BW, 0x0A);
 8000f98:	220a      	movs	r2, #10
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 fa2e 	bl	80013fe <BMX055_WriteRegisterAcc>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	7cfb      	ldrb	r3, [r7, #19]
 8000fa8:	4413      	add	r3, r2
 8000faa:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f003 fcd7 	bl	8004960 <HAL_Delay>

	/* Main power mode (NORMAL mode) ==> 0x00 */
	status += BMX055_WriteRegisterAcc(bmx, BMX055_ACC_LPW, 0x00);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2111      	movs	r1, #17
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 fa21 	bl	80013fe <BMX055_WriteRegisterAcc>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7cfb      	ldrb	r3, [r7, #19]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f003 fcca 	bl	8004960 <HAL_Delay>

	/* Data acquisition and data output format (Filtered data, no shadowing) ==> 0x40 */
	status += BMX055_WriteRegisterAcc(bmx, BMX055_ACC_HBW, 0x40);
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	2113      	movs	r1, #19
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 fa14 	bl	80013fe <BMX055_WriteRegisterAcc>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	7cfb      	ldrb	r3, [r7, #19]
 8000fdc:	4413      	add	r3, r2
 8000fde:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f003 fcbd 	bl	8004960 <HAL_Delay>
	/*
	 *  GYROSCOPE
	 */

	/* Check chip ID (should equal 0x0F) */
	status += BMX055_ReadRegisterGyr(bmx, BMX055_GYR_CHIPID, &rxData, 1);
 8000fe6:	f107 0212 	add.w	r2, r7, #18
 8000fea:	2301      	movs	r3, #1
 8000fec:	2100      	movs	r1, #0
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 fa36 	bl	8001460 <BMX055_ReadRegisterGyr>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7cfb      	ldrb	r3, [r7, #19]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	74fb      	strb	r3, [r7, #19]
	if (rxData != 0x0F) {
 8000ffe:	7cbb      	ldrb	r3, [r7, #18]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d001      	beq.n	8001008 <BMX055_Init+0x170>
		return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e086      	b.n	8001116 <BMX055_Init+0x27e>
	}

	/* Reset gyroscope */
	status += BMX055_WriteRegisterGyr(bmx, BMX055_GYR_SORST, 0xB6);
 8001008:	22b6      	movs	r2, #182	; 0xb6
 800100a:	2114      	movs	r1, #20
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f000 fa76 	bl	80014fe <BMX055_WriteRegisterGyr>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	4413      	add	r3, r2
 800101a:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(20);
 800101c:	2014      	movs	r0, #20
 800101e:	f003 fc9f 	bl	8004960 <HAL_Delay>

	/* Range (+- 1000 deg/s, sensitivity is 32.8 LSB/deg/s) ==> 0x01 */
	status += BMX055_WriteRegisterGyr(bmx, BMX055_GYR_RANGE, 0x01);
 8001022:	2201      	movs	r2, #1
 8001024:	210f      	movs	r1, #15
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 fa69 	bl	80014fe <BMX055_WriteRegisterGyr>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	4413      	add	r3, r2
 8001034:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8001036:	2005      	movs	r0, #5
 8001038:	f003 fc92 	bl	8004960 <HAL_Delay>

	/* Bandwidth (ODR = 100 Hz, Filter Bandwidth = 32 Hz) ==> 0x87 */
	status += BMX055_WriteRegisterGyr(bmx, BMX055_GYR_BW, 0x87);
 800103c:	2287      	movs	r2, #135	; 0x87
 800103e:	2110      	movs	r1, #16
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 fa5c 	bl	80014fe <BMX055_WriteRegisterGyr>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	7cfb      	ldrb	r3, [r7, #19]
 800104c:	4413      	add	r3, r2
 800104e:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8001050:	2005      	movs	r0, #5
 8001052:	f003 fc85 	bl	8004960 <HAL_Delay>

	/* Main power mode (NORMAL mode) ==> 0x00 */
	status += BMX055_WriteRegisterGyr(bmx, BMX055_GYR_LPM1, 0x00);
 8001056:	2200      	movs	r2, #0
 8001058:	2111      	movs	r1, #17
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 fa4f 	bl	80014fe <BMX055_WriteRegisterGyr>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	7cfb      	ldrb	r3, [r7, #19]
 8001066:	4413      	add	r3, r2
 8001068:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 800106a:	2005      	movs	r0, #5
 800106c:	f003 fc78 	bl	8004960 <HAL_Delay>

	/* Fast power up and external trigger ==> 0x00 */
	status += BMX055_WriteRegisterGyr(bmx, BMX055_GYR_LPM2, 0x00);
 8001070:	2200      	movs	r2, #0
 8001072:	2112      	movs	r1, #18
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f000 fa42 	bl	80014fe <BMX055_WriteRegisterGyr>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	7cfb      	ldrb	r3, [r7, #19]
 8001080:	4413      	add	r3, r2
 8001082:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 8001084:	2005      	movs	r0, #5
 8001086:	f003 fc6b 	bl	8004960 <HAL_Delay>

	/* Angular rate data acquisition and data output format (Filtered, no shadowing) ==> 0x40 */
	status += BMX055_WriteRegisterGyr(bmx, BMX055_GYR_HBW, 0x40);
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	2113      	movs	r1, #19
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 fa35 	bl	80014fe <BMX055_WriteRegisterGyr>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	7cfb      	ldrb	r3, [r7, #19]
 800109a:	4413      	add	r3, r2
 800109c:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 800109e:	2005      	movs	r0, #5
 80010a0:	f003 fc5e 	bl	8004960 <HAL_Delay>
	/*
	 *  MAGNETOMETER
	 */

	/* Get magnetometer out of suspend mode */
	status += BMX055_WriteRegisterMag(bmx, BMX055_MAG_PWR, 0x00);
 80010a4:	2200      	movs	r2, #0
 80010a6:	214b      	movs	r1, #75	; 0x4b
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 faa8 	bl	80015fe <BMX055_WriteRegisterMag>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	4413      	add	r3, r2
 80010b6:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 80010b8:	2005      	movs	r0, #5
 80010ba:	f003 fc51 	bl	8004960 <HAL_Delay>

	/* Reset magnetometer */
	status += BMX055_WriteRegisterMag(bmx, BMX055_MAG_PWR, 0x83);
 80010be:	2283      	movs	r2, #131	; 0x83
 80010c0:	214b      	movs	r1, #75	; 0x4b
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 fa9b 	bl	80015fe <BMX055_WriteRegisterMag>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	7cfb      	ldrb	r3, [r7, #19]
 80010ce:	4413      	add	r3, r2
 80010d0:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(20);
 80010d2:	2014      	movs	r0, #20
 80010d4:	f003 fc44 	bl	8004960 <HAL_Delay>

	/* Check chip ID (should equal 0x32) */
	status += BMX055_ReadRegisterMag(bmx, BMX055_MAG_CHIPID, &rxData, 1);
 80010d8:	f107 0212 	add.w	r2, r7, #18
 80010dc:	2301      	movs	r3, #1
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 fa3d 	bl	8001560 <BMX055_ReadRegisterMag>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	4413      	add	r3, r2
 80010ee:	74fb      	strb	r3, [r7, #19]
	if (rxData != 0x32) {
 80010f0:	7cbb      	ldrb	r3, [r7, #18]
 80010f2:	2b32      	cmp	r3, #50	; 0x32
 80010f4:	d001      	beq.n	80010fa <BMX055_Init+0x262>
		return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e00d      	b.n	8001116 <BMX055_Init+0x27e>
	}

	/* Operation mode and output data rate (ODR = 10 Hz, Normal mode) ==> 0x00 */
	status += BMX055_WriteRegisterMag(bmx, BMX055_MAG_MODE, 0x00);
 80010fa:	2200      	movs	r2, #0
 80010fc:	214c      	movs	r1, #76	; 0x4c
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa7d 	bl	80015fe <BMX055_WriteRegisterMag>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	7cfb      	ldrb	r3, [r7, #19]
 800110a:	4413      	add	r3, r2
 800110c:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(5);
 800110e:	2005      	movs	r0, #5
 8001110:	f003 fc26 	bl	8004960 <HAL_Delay>

	return status;
 8001114:	7cfb      	ldrb	r3, [r7, #19]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <BMX055_ReadAccelerometer>:
 * HIGH LEVEL READ FUNCTIONS
 *
 *
 */

uint8_t BMX055_ReadAccelerometer(BMX055 *bmx) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	uint8_t accData[7];
	int16_t rawData;

	/* Read all data registers */
	uint8_t status = BMX055_ReadRegisterAcc(bmx, BMX055_ACC_DATA, accData, 7);
 8001128:	f107 020c 	add.w	r2, r7, #12
 800112c:	2307      	movs	r3, #7
 800112e:	2102      	movs	r1, #2
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f915 	bl	8001360 <BMX055_ReadRegisterAcc>
 8001136:	4603      	mov	r3, r0
 8001138:	75fb      	strb	r3, [r7, #23]

	/* X */
	rawData = (int16_t) (((int16_t) accData[1] << 8) | (accData[0] & 0xF0)) >> 4;
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	b21b      	sxth	r3, r3
 8001144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	111b      	asrs	r3, r3, #4
 8001150:	82bb      	strh	r3, [r7, #20]
	bmx->acc[0] =  BMX055_ACC_CONV * rawData;
 8001152:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80011fc <BMX055_ReadAccelerometer+0xdc>
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Y */
	rawData = (int16_t) (((int16_t) accData[3] << 8) | (accData[2] & 0xF0)) >> 4;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	b21b      	sxth	r3, r3
 8001176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21b      	sxth	r3, r3
 8001180:	111b      	asrs	r3, r3, #4
 8001182:	82bb      	strh	r3, [r7, #20]
	bmx->acc[1] = -BMX055_ACC_CONV * rawData;
 8001184:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001190:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001200 <BMX055_ReadAccelerometer+0xe0>
 8001194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Z */
	rawData = (int16_t) (((int16_t) accData[5] << 8) | (accData[4] & 0xF0)) >> 4;
 800119e:	7c7b      	ldrb	r3, [r7, #17]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7c3b      	ldrb	r3, [r7, #16]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	111b      	asrs	r3, r3, #4
 80011b4:	82bb      	strh	r3, [r7, #20]
	bmx->acc[2] = -BMX055_ACC_CONV * rawData;
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001200 <BMX055_ReadAccelerometer+0xe0>
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Temperature */
	bmx->temp = 23.0f + BMX055_TMP_CONV * ((int8_t) accData[6]);
 80011d0:	7cbb      	ldrb	r3, [r7, #18]
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80011e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	3d1d0e9a 	.word	0x3d1d0e9a
 8001200:	bd1d0e9a 	.word	0xbd1d0e9a

08001204 <BMX055_ReadGyroscope>:

uint8_t BMX055_ReadGyroscope(BMX055 *bmx) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t gyrData[6];
	int16_t rawData;

	/* Read all data registers */
	uint8_t status = BMX055_ReadRegisterGyr(bmx, BMX055_GYR_DATA, gyrData, 6);
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	2306      	movs	r3, #6
 8001212:	2102      	movs	r1, #2
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f923 	bl	8001460 <BMX055_ReadRegisterGyr>
 800121a:	4603      	mov	r3, r0
 800121c:	75fb      	strb	r3, [r7, #23]

	/* X */
	rawData = ((int16_t) gyrData[1] << 8) | gyrData[0];
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7b3b      	ldrb	r3, [r7, #12]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	82bb      	strh	r3, [r7, #20]
	bmx->gyr[0] =  BMX055_GYR_CONV * rawData;
 800122c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001238:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012a0 <BMX055_ReadGyroscope+0x9c>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Y */
	rawData = ((int16_t) gyrData[3] << 8) | gyrData[2];
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	82bb      	strh	r3, [r7, #20]
	bmx->gyr[1] = -BMX055_GYR_CONV * rawData;
 8001254:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012a4 <BMX055_ReadGyroscope+0xa0>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edc3 7a08 	vstr	s15, [r3, #32]

	/* Z */
	rawData = ((int16_t) gyrData[5] << 8) | gyrData[4];
 800126e:	7c7b      	ldrb	r3, [r7, #17]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7c3b      	ldrb	r3, [r7, #16]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	82bb      	strh	r3, [r7, #20]
	bmx->gyr[2] = -BMX055_GYR_CONV * rawData;
 800127c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80012a4 <BMX055_ReadGyroscope+0xa0>
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return status;
 8001296:	7dfb      	ldrb	r3, [r7, #23]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	3a0b7d78 	.word	0x3a0b7d78
 80012a4:	ba0b7d78 	.word	0xba0b7d78

080012a8 <BMX055_ReadMagnetometer>:

uint8_t BMX055_ReadMagnetometer(BMX055 *bmx) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	uint8_t magData[6];
	int16_t rawData;

	/* Read all data registers */
	uint8_t status = BMX055_ReadRegisterMag(bmx, BMX055_MAG_DATA, magData, 6);
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	2306      	movs	r3, #6
 80012b6:	2142      	movs	r1, #66	; 0x42
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f951 	bl	8001560 <BMX055_ReadRegisterMag>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]

	/* X */
	rawData = (int16_t) ((int8_t) magData[1] << 5) | ((magData[0] & 0xF8) >> 3);
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7b3b      	ldrb	r3, [r7, #12]
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	82bb      	strh	r3, [r7, #20]
	bmx->mag[0] =  BMX055_MAG_CONV * rawData;
 80012d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001358 <BMX055_ReadMagnetometer+0xb0>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Y */
	rawData = (int16_t) ((int8_t) magData[3] << 5) | ((magData[2] & 0xF8) >> 3);
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	015b      	lsls	r3, r3, #5
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	82bb      	strh	r3, [r7, #20]
	bmx->mag[1] = -BMX055_MAG_CONV * rawData;
 8001304:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800135c <BMX055_ReadMagnetometer+0xb4>
 8001314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/* Z */
	rawData = (int16_t) ((int8_t) magData[5] << 7) | ((magData[4] & 0xFE) >> 1); /* Z MSB is shifted by 7 bits ! */
 800131e:	7c7b      	ldrb	r3, [r7, #17]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	b21a      	sxth	r2, r3
 8001326:	7c3b      	ldrb	r3, [r7, #16]
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	82bb      	strh	r3, [r7, #20]
	bmx->mag[2] = -BMX055_MAG_CONV * rawData;
 8001332:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800135c <BMX055_ReadMagnetometer+0xb4>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	return status;
 800134c:	7dfb      	ldrb	r3, [r7, #23]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	3b4a5f1d 	.word	0x3b4a5f1d
 800135c:	bb4a5f1d 	.word	0xbb4a5f1d

08001360 <BMX055_ReadRegisterAcc>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 *
 */

uint8_t BMX055_ReadRegisterAcc(BMX055 *bmx, uint8_t regAddr, uint8_t *data, uint16_t numBytes) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	460b      	mov	r3, r1
 800136e:	72fb      	strb	r3, [r7, #11]
 8001370:	4613      	mov	r3, r2
 8001372:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_RESET);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6858      	ldr	r0, [r3, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	891b      	ldrh	r3, [r3, #8]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f003 fd8c 	bl	8004e9c <HAL_GPIO_WritePin>

	/* Select register by transmitting address with R/W bit set to 1 */
	uint8_t txData = regAddr | 0x80;
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800138a:	b2db      	uxtb	r3, r3
 800138c:	75fb      	strb	r3, [r7, #23]
	if (HAL_SPI_Transmit(bmx->spiHandler, &txData, 1, HAL_MAX_DELAY) != HAL_OK) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f107 0117 	add.w	r1, r7, #23
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	2201      	movs	r2, #1
 800139c:	f005 fa6e 	bl	800687c <HAL_SPI_Transmit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <BMX055_ReadRegisterAcc+0x5a>
		/* Transmission did not succeed, disable CS and return zero */
		HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_SET);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6858      	ldr	r0, [r3, #4]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	891b      	ldrh	r3, [r3, #8]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f003 fd73 	bl	8004e9c <HAL_GPIO_WritePin>
		return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e01d      	b.n	80013f6 <BMX055_ReadRegisterAcc+0x96>
	}

	/* Read register content(s) */
	if (HAL_SPI_Receive(bmx->spiHandler, data, numBytes, HAL_MAX_DELAY) != HAL_OK) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	893a      	ldrh	r2, [r7, #8]
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	f005 fb8d 	bl	8006ae4 <HAL_SPI_Receive>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <BMX055_ReadRegisterAcc+0x84>
		/* Reception did not succeed, disable CS and return zero */
		HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_SET);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6858      	ldr	r0, [r3, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	891b      	ldrh	r3, [r3, #8]
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	f003 fd5e 	bl	8004e9c <HAL_GPIO_WritePin>
		return 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e008      	b.n	80013f6 <BMX055_ReadRegisterAcc+0x96>
	}

	/* Pull CS high to deselect chip */
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_SET);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6858      	ldr	r0, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	891b      	ldrh	r3, [r3, #8]
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f003 fd54 	bl	8004e9c <HAL_GPIO_WritePin>

	/* All transmissions OK */
	return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <BMX055_WriteRegisterAcc>:

uint8_t BMX055_WriteRegisterAcc(BMX055 *bmx, uint8_t regAddr, uint8_t val) {
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
 800140a:	4613      	mov	r3, r2
 800140c:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_RESET);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6858      	ldr	r0, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	891b      	ldrh	r3, [r3, #8]
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	f003 fd3f 	bl	8004e9c <HAL_GPIO_WritePin>

	uint8_t txData[] = {regAddr, val};
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	733b      	strb	r3, [r7, #12]
 8001422:	78bb      	ldrb	r3, [r7, #2]
 8001424:	737b      	strb	r3, [r7, #13]
	uint8_t status = (HAL_SPI_Transmit(bmx->spiHandler, txData, 2, HAL_MAX_DELAY) == HAL_OK);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	f107 010c 	add.w	r1, r7, #12
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2202      	movs	r2, #2
 8001434:	f005 fa22 	bl	800687c <HAL_SPI_Transmit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinAcc, GPIO_PIN_SET);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6858      	ldr	r0, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	891b      	ldrh	r3, [r3, #8]
 800144e:	2201      	movs	r2, #1
 8001450:	4619      	mov	r1, r3
 8001452:	f003 fd23 	bl	8004e9c <HAL_GPIO_WritePin>

	return status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <BMX055_ReadRegisterGyr>:

uint8_t BMX055_ReadRegisterGyr(BMX055 *bmx, uint8_t regAddr, uint8_t *data, uint16_t numBytes) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	72fb      	strb	r3, [r7, #11]
 8001470:	4613      	mov	r3, r2
 8001472:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_RESET);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6858      	ldr	r0, [r3, #4]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	895b      	ldrh	r3, [r3, #10]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f003 fd0c 	bl	8004e9c <HAL_GPIO_WritePin>

	/* Select register by transmitting address with R/W bit set to 1 */
	uint8_t txData = regAddr | 0x80;
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800148a:	b2db      	uxtb	r3, r3
 800148c:	75fb      	strb	r3, [r7, #23]
	if (HAL_SPI_Transmit(bmx->spiHandler, &txData, 1, HAL_MAX_DELAY) != HAL_OK) {
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f107 0117 	add.w	r1, r7, #23
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	2201      	movs	r2, #1
 800149c:	f005 f9ee 	bl	800687c <HAL_SPI_Transmit>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <BMX055_ReadRegisterGyr+0x5a>
		/* Transmission did not succeed, disable CS and return zero */
		HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_SET);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6858      	ldr	r0, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	895b      	ldrh	r3, [r3, #10]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4619      	mov	r1, r3
 80014b2:	f003 fcf3 	bl	8004e9c <HAL_GPIO_WritePin>
		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e01d      	b.n	80014f6 <BMX055_ReadRegisterGyr+0x96>
	}

	/* Read register content(s) */
	if (HAL_SPI_Receive(bmx->spiHandler, data, numBytes, HAL_MAX_DELAY) != HAL_OK) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	893a      	ldrh	r2, [r7, #8]
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	f005 fb0d 	bl	8006ae4 <HAL_SPI_Receive>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <BMX055_ReadRegisterGyr+0x84>
		/* Reception did not succeed, disable CS and return zero */
		HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_SET);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6858      	ldr	r0, [r3, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	895b      	ldrh	r3, [r3, #10]
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f003 fcde 	bl	8004e9c <HAL_GPIO_WritePin>
		return 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e008      	b.n	80014f6 <BMX055_ReadRegisterGyr+0x96>
	}

	/* Pull CS high to deselect chip */
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_SET);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6858      	ldr	r0, [r3, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	895b      	ldrh	r3, [r3, #10]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	f003 fcd4 	bl	8004e9c <HAL_GPIO_WritePin>

	/* All transmissions OK */
	return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <BMX055_WriteRegisterGyr>:

uint8_t BMX055_WriteRegisterGyr(BMX055 *bmx, uint8_t regAddr, uint8_t val) {
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	70fb      	strb	r3, [r7, #3]
 800150a:	4613      	mov	r3, r2
 800150c:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_RESET);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6858      	ldr	r0, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	895b      	ldrh	r3, [r3, #10]
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	f003 fcbf 	bl	8004e9c <HAL_GPIO_WritePin>

	uint8_t txData[] = {regAddr, val};
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	733b      	strb	r3, [r7, #12]
 8001522:	78bb      	ldrb	r3, [r7, #2]
 8001524:	737b      	strb	r3, [r7, #13]
	uint8_t status = (HAL_SPI_Transmit(bmx->spiHandler, txData, 2, HAL_MAX_DELAY) == HAL_OK);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	f107 010c 	add.w	r1, r7, #12
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	2202      	movs	r2, #2
 8001534:	f005 f9a2 	bl	800687c <HAL_SPI_Transmit>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinGyr, GPIO_PIN_SET);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6858      	ldr	r0, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	895b      	ldrh	r3, [r3, #10]
 800154e:	2201      	movs	r2, #1
 8001550:	4619      	mov	r1, r3
 8001552:	f003 fca3 	bl	8004e9c <HAL_GPIO_WritePin>

	return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <BMX055_ReadRegisterMag>:

uint8_t BMX055_ReadRegisterMag(BMX055 *bmx, uint8_t regAddr, uint8_t *data, uint16_t numBytes) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	461a      	mov	r2, r3
 800156c:	460b      	mov	r3, r1
 800156e:	72fb      	strb	r3, [r7, #11]
 8001570:	4613      	mov	r3, r2
 8001572:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_RESET);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6858      	ldr	r0, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	899b      	ldrh	r3, [r3, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	f003 fc8c 	bl	8004e9c <HAL_GPIO_WritePin>

	/* Select register by transmitting address with R/W bit set to 1 */
	uint8_t txData = regAddr | 0x80;
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800158a:	b2db      	uxtb	r3, r3
 800158c:	75fb      	strb	r3, [r7, #23]
	if (HAL_SPI_Transmit(bmx->spiHandler, &txData, 1, HAL_MAX_DELAY) != HAL_OK) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	f107 0117 	add.w	r1, r7, #23
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	2201      	movs	r2, #1
 800159c:	f005 f96e 	bl	800687c <HAL_SPI_Transmit>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <BMX055_ReadRegisterMag+0x5a>
		/* Transmission did not succeed, disable CS and return zero */
		HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_SET);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6858      	ldr	r0, [r3, #4]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	899b      	ldrh	r3, [r3, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4619      	mov	r1, r3
 80015b2:	f003 fc73 	bl	8004e9c <HAL_GPIO_WritePin>
		return 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e01d      	b.n	80015f6 <BMX055_ReadRegisterMag+0x96>
	}

	/* Read register content(s) */
	if (HAL_SPI_Receive(bmx->spiHandler, data, numBytes, HAL_MAX_DELAY) != HAL_OK) {
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	893a      	ldrh	r2, [r7, #8]
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	f005 fa8d 	bl	8006ae4 <HAL_SPI_Receive>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <BMX055_ReadRegisterMag+0x84>
		/* Reception did not succeed, disable CS and return zero */
		HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_SET);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6858      	ldr	r0, [r3, #4]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	899b      	ldrh	r3, [r3, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	f003 fc5e 	bl	8004e9c <HAL_GPIO_WritePin>
		return 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e008      	b.n	80015f6 <BMX055_ReadRegisterMag+0x96>
	}

	/* Pull CS high to deselect chip */
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_SET);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6858      	ldr	r0, [r3, #4]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	899b      	ldrh	r3, [r3, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	f003 fc54 	bl	8004e9c <HAL_GPIO_WritePin>

	/* All transmissions OK */
	return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <BMX055_WriteRegisterMag>:

uint8_t BMX055_WriteRegisterMag(BMX055 *bmx, uint8_t regAddr, uint8_t val) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	4613      	mov	r3, r2
 800160c:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_RESET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6858      	ldr	r0, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	f003 fc3f 	bl	8004e9c <HAL_GPIO_WritePin>

	uint8_t txData[] = {regAddr, val};
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	733b      	strb	r3, [r7, #12]
 8001622:	78bb      	ldrb	r3, [r7, #2]
 8001624:	737b      	strb	r3, [r7, #13]
	uint8_t status = (HAL_SPI_Transmit(bmx->spiHandler, txData, 2, HAL_MAX_DELAY) == HAL_OK);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	f107 010c 	add.w	r1, r7, #12
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	2202      	movs	r2, #2
 8001634:	f005 f922 	bl	800687c <HAL_SPI_Transmit>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(bmx->csPinBank, bmx->csPinMag, GPIO_PIN_SET);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6858      	ldr	r0, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	899b      	ldrh	r3, [r3, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	f003 fc23 	bl	8004e9c <HAL_GPIO_WritePin>

	return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <KalmanRollPitch_Init>:
#include "KalmanRollPitch.h"

void KalmanRollPitch_Init(KalmanRollPitch *kal, float Pinit, float *Q, float *R) {
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	ed87 0a02 	vstr	s0, [r7, #8]
 800166c:	6079      	str	r1, [r7, #4]
 800166e:	603a      	str	r2, [r7, #0]
	kal->phi   = 0.0f;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
	kal->theta = 0.0f;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
	kal->P[0] = Pinit; kal->P[1] = 0.0f;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
	kal->P[2] = 0.0f;  kal->P[3] = Pinit;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	615a      	str	r2, [r3, #20]
	kal->Q[0] = Q[0];  kal->Q[1] = Q[1];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	61da      	str	r2, [r3, #28]
	kal->R[0] = R[0];  kal->R[1] = R[1]; kal->R[2] = R[2];
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
	kal->gyr[0] = 0.0f;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
	kal->gyr[1] = 0.0f;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
	kal->gyr[2] = 0.0f;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <KalmanRollPitch_Predict>:

void KalmanRollPitch_Predict(KalmanRollPitch *kal, float *gyr, float T) {
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b093      	sub	sp, #76	; 0x4c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Extract measurements */
	float p = gyr[0];
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
	float q = gyr[1];
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
	float r = gyr[2];
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c

	kal->gyr[0] = gyr[0];
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
	kal->gyr[1] = gyr[1];
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
	kal->gyr[2] = gyr[2];
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Compute common trig terms */
	float sp = sin(kal->phi);   float cp = cos(kal->phi);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe feb7 	bl	8000498 <__aeabi_f2d>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	ec44 3b10 	vmov	d0, r3, r4
 8001732:	f007 fdf9 	bl	8009328 <sin>
 8001736:	ec54 3b10 	vmov	r3, r4, d0
 800173a:	4618      	mov	r0, r3
 800173c:	4621      	mov	r1, r4
 800173e:	f7ff f9db 	bl	8000af8 <__aeabi_d2f>
 8001742:	4603      	mov	r3, r0
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fea4 	bl	8000498 <__aeabi_f2d>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	ec44 3b10 	vmov	d0, r3, r4
 8001758:	f007 fda2 	bl	80092a0 <cos>
 800175c:	ec54 3b10 	vmov	r3, r4, d0
 8001760:	4618      	mov	r0, r3
 8001762:	4621      	mov	r1, r4
 8001764:	f7ff f9c8 	bl	8000af8 <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
	float tt = 999999999.0f;
 800176c:	4bd3      	ldr	r3, [pc, #844]	; (8001abc <KalmanRollPitch_Predict+0x3d4>)
 800176e:	633b      	str	r3, [r7, #48]	; 0x30

	/* tan(theta) is undefined for theta=90deg */
	if (fabs(kal->theta) > 1.57952297305f || fabs(kal->theta) < 1.56206968053f) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	edd3 7a01 	vldr	s15, [r3, #4]
 8001776:	eef0 7ae7 	vabs.f32	s15, s15
 800177a:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8001ac0 <KalmanRollPitch_Predict+0x3d8>
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	f300 8193 	bgt.w	8001ab0 <KalmanRollPitch_Predict+0x3c8>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001790:	eef0 7ae7 	vabs.f32	s15, s15
 8001794:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8001ac4 <KalmanRollPitch_Predict+0x3dc>
 8001798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	f100 8186 	bmi.w	8001ab0 <KalmanRollPitch_Predict+0x3c8>
		return;
	}

	/* x+ = x- + T * f(x,u) */
	kal->phi   = kal->phi   + T * (p + tt * (q * sp + r * cp));
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80017ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80017b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017b6:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 80017ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + T * (    q * cp      - r * sp);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ee:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80017f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017fa:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 80017fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001802:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001806:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800180a:	edd7 7a01 	vldr	s15, [r7, #4]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Recompute common trig terms using new state estimates */
    sp = sin(kal->phi);		cp = cos(kal->phi);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe39 	bl	8000498 <__aeabi_f2d>
 8001826:	4603      	mov	r3, r0
 8001828:	460c      	mov	r4, r1
 800182a:	ec44 3b10 	vmov	d0, r3, r4
 800182e:	f007 fd7b 	bl	8009328 <sin>
 8001832:	ec54 3b10 	vmov	r3, r4, d0
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	f7ff f95d 	bl	8000af8 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe26 	bl	8000498 <__aeabi_f2d>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	ec44 3b10 	vmov	d0, r3, r4
 8001854:	f007 fd24 	bl	80092a0 <cos>
 8001858:	ec54 3b10 	vmov	r3, r4, d0
 800185c:	4618      	mov	r0, r3
 800185e:	4621      	mov	r1, r4
 8001860:	f7ff f94a 	bl	8000af8 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34

	if (fabs(kal->theta) > 1.57952297305f || fabs(kal->theta) < 1.56206968053f) {
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	edd3 7a01 	vldr	s15, [r3, #4]
 800186e:	eef0 7ae7 	vabs.f32	s15, s15
 8001872:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001ac0 <KalmanRollPitch_Predict+0x3d8>
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	f300 8119 	bgt.w	8001ab4 <KalmanRollPitch_Predict+0x3cc>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	edd3 7a01 	vldr	s15, [r3, #4]
 8001888:	eef0 7ae7 	vabs.f32	s15, s15
 800188c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001ac4 <KalmanRollPitch_Predict+0x3dc>
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	f100 810c 	bmi.w	8001ab4 <KalmanRollPitch_Predict+0x3cc>
		return;
	}

	/* Jacobian of f(x,u) */
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 800189c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80018ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c0:	edc7 7a08 	vstr	s15, [r7, #32]
 80018c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80018c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80018d4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				 -(r * cp + q * sp),        0.0f};
 80018fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001900:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800190c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	eef1 7a67 	vneg.f32	s15, s15
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 800191c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Update covariance matrix P+ = P- + T * (A*P- + P-*A' + Q) */
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ed93 7a06 	vldr	s14, [r3, #24]
 800192c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001930:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edd3 7a02 	vldr	s15, [r3, #8]
 800193a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001942:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	edd3 7a03 	vldr	s15, [r3, #12]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001954:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	edd3 7a04 	vldr	s15, [r3, #16]
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001966:	edd7 7a01 	vldr	s15, [r7, #4]
 800196a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001972:	ed97 7a08 	vldr	s14, [r7, #32]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	edd3 7a03 	vldr	s15, [r3, #12]
 800197c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001980:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	edd3 7a02 	vldr	s15, [r3, #8]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001992:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	edd3 7a05 	vldr	s15, [r3, #20]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	edc7 7a05 	vstr	s15, [r7, #20]
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 80019c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80019ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80019fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001a0e:	edc7 7a06 	vstr	s15, [r7, #24]
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a2a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a56:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001a5a:	edc7 7a07 	vstr	s15, [r7, #28]

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	edc3 7a04 	vstr	s15, [r3, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	edc3 7a05 	vstr	s15, [r3, #20]
 8001aae:	e002      	b.n	8001ab6 <KalmanRollPitch_Predict+0x3ce>
		return;
 8001ab0:	bf00      	nop
 8001ab2:	e000      	b.n	8001ab6 <KalmanRollPitch_Predict+0x3ce>
		return;
 8001ab4:	bf00      	nop
}
 8001ab6:	374c      	adds	r7, #76	; 0x4c
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	4e6e6b28 	.word	0x4e6e6b28
 8001ac0:	3fca2dcf 	.word	0x3fca2dcf
 8001ac4:	3fc7f1e6 	.word	0x3fc7f1e6

08001ac8 <KalmanRollPitch_Update>:

uint8_t KalmanRollPitch_Update(KalmanRollPitch *kal, float *acc, float Va) {
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b0b7      	sub	sp, #220	; 0xdc
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Extract measurements */
	float p = kal->gyr[0];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float q = kal->gyr[1];
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float r = kal->gyr[2];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	float ax = acc[0];
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float ay = acc[1];
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float az = acc[2];
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/* Compute common trig terms */
	float sp = sin(kal->phi);   float cp = cos(kal->phi);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcc4 	bl	8000498 <__aeabi_f2d>
 8001b10:	4603      	mov	r3, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	ec44 3b10 	vmov	d0, r3, r4
 8001b18:	f007 fc06 	bl	8009328 <sin>
 8001b1c:	ec54 3b10 	vmov	r3, r4, d0
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7fe ffe8 	bl	8000af8 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fcb0 	bl	8000498 <__aeabi_f2d>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	ec44 3b10 	vmov	d0, r3, r4
 8001b40:	f007 fbae 	bl	80092a0 <cos>
 8001b44:	ec54 3b10 	vmov	r3, r4, d0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	f7fe ffd4 	bl	8000af8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float st = sin(kal->theta); float ct = cos(kal->theta);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc9c 	bl	8000498 <__aeabi_f2d>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	ec44 3b10 	vmov	d0, r3, r4
 8001b68:	f007 fbde 	bl	8009328 <sin>
 8001b6c:	ec54 3b10 	vmov	r3, r4, d0
 8001b70:	4618      	mov	r0, r3
 8001b72:	4621      	mov	r1, r4
 8001b74:	f7fe ffc0 	bl	8000af8 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fc88 	bl	8000498 <__aeabi_f2d>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	ec44 3b10 	vmov	d0, r3, r4
 8001b90:	f007 fb86 	bl	80092a0 <cos>
 8001b94:	ec54 3b10 	vmov	r3, r4, d0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f7fe ffac 	bl	8000af8 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Output function h(x,u) */
	float h[3] = { q * Va * st               + g * st,
 8001ba6:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bba:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001bbe:	eddf 6af0 	vldr	s13, [pc, #960]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				   r * Va * ct - p * Va * st - g * ct * sp,
 8001bce:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8001bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bda:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be2:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 8001be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bee:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bfe:	eddf 6ae0 	vldr	s13, [pc, #896]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001c02:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c06:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001c12:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				  -q * Va * ct               - g * ct * cp };
 8001c16:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001c1a:	eeb1 7a67 	vneg.f32	s14, s15
 8001c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c26:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c32:	eddf 6ad3 	vldr	s13, [pc, #844]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001c36:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c3a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c42:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001c46:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	/* Jacobian of h(x,u) */
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c52:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c6a:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001c6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 8001c7a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001c7e:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8001f84 <KalmanRollPitch_Update+0x4bc>
 8001c82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c86:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001c8e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 8001c92:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001c96:	eeb1 7a67 	vneg.f32	s14, s15
 8001c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001caa:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001cc6:	eddf 6aae 	vldr	s13, [pc, #696]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001cca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001cce:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001cda:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				   g * sp * ct, (q * Va + g * cp) * st };
 8001cde:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001ce2:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001ce6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001cf2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				   g * sp * ct, (q * Va + g * cp) * st };
 8001cf6:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d02:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001d06:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8001f80 <KalmanRollPitch_Update+0x4b8>
 8001d0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d12:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001d1a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

	/* Kalman gain K = P * C' / (C * P * C' + R) */
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d24:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8001d42:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001d46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001d5c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001d60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8001d76:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001d7a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001d90:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001d94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 8001daa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001dae:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001db8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dbc:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dc6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001dd2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ddc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001de0:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dea:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dee:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001df8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dfc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e08:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001e0c:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e1a:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e28:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001e34:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 8001e38:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001e3c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e4a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e60:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001e64:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e72:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e80:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001e8c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001e90:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001e94:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ea2:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001eac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001eb8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001ebc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001ec0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ece:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ed8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee4:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001ee8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ef2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ef6:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f04:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001f10:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f1a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001f1e:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f2c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f3a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f46:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001f4a:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f58:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f62:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f66:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001f72:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

	float Gdet = (G[0]*G[4]*G[8] - G[0]*G[5]*G[7] - G[1]*G[3]*G[8] + G[1]*G[5]*G[6] + G[2]*G[3]*G[7] - G[2]*G[4]*G[6]);
 8001f76:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001f7a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f7e:	e007      	b.n	8001f90 <KalmanRollPitch_Update+0x4c8>
 8001f80:	411cf5c3 	.word	0x411cf5c3
 8001f84:	c11cf5c3 	.word	0xc11cf5c3
 8001f88:	b58637bd 	.word	0xb58637bd
 8001f8c:	358637bd 	.word	0x358637bd
 8001f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f94:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001fa0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001fa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fa8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001fb8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fc0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fcc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001fd0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001fe8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001fec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ffc:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002000:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002008:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800200c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002014:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	/* Ensure matrix is non-singular */
	if (Gdet < -0.000001f || Gdet > 0.000001f) {
 8002018:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800201c:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8001f88 <KalmanRollPitch_Update+0x4c0>
 8002020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002028:	d409      	bmi.n	800203e <KalmanRollPitch_Update+0x576>
 800202a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800202e:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 8001f8c <KalmanRollPitch_Update+0x4c4>
 8002032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	f340 8378 	ble.w	800272e <KalmanRollPitch_Update+0xc66>
		float Gdetinv = 1.0f / Gdet;
 800203e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002042:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 800204e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002052:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205a:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800205e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800206a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	edc7 7a05 	vstr	s15, [r7, #20]
 8002076:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800207a:	eeb1 7a67 	vneg.f32	s14, s15
 800207e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002082:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002086:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800208a:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 800208e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002092:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002096:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a06 	vstr	s15, [r7, #24]
 80020a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80020a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ae:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80020b2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80020b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a07 	vstr	s15, [r7, #28]
						 -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 80020ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80020ce:	eeb1 7a67 	vneg.f32	s14, s15
 80020d2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80020d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020de:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 80020e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80020e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 80020f2:	edc7 7a08 	vstr	s15, [r7, #32]
						 -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 80020f6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80020fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002102:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002106:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002112:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 800211a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
						 -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 800211e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002122:	eeb1 7a67 	vneg.f32	s14, s15
 8002126:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800212a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800212e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002132:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 8002136:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800213a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800213e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8002146:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
						  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 800214a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800214e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002156:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800215a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002166:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800216a:	ee67 7a27 	vmul.f32	s15, s14, s15
		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 800216e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
						  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8002172:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002176:	eeb1 7a67 	vneg.f32	s14, s15
 800217a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800217e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002182:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002186:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800218a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800218e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002192:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 800219a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
						  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 800219e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80021a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80021a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021aa:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80021ae:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
		float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 80021c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 80021c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80021ca:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d8:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	edd3 7a03 	vldr	s15, [r3, #12]
 80021e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80021f2:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80021fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002200:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	edd3 7a03 	vldr	s15, [r3, #12]
 800220a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800220e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800221e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002222:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 7a03 	vldr	s15, [r3, #12]
 800222c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8002238:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800223c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	edd3 7a02 	vldr	s15, [r3, #8]
 8002246:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800224a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	edd3 7a03 	vldr	s15, [r3, #12]
 8002254:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002260:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002264:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	edd3 7a02 	vldr	s15, [r3, #8]
 800226e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002272:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	edd3 7a03 	vldr	s15, [r3, #12]
 800227c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002280:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002290:	edd7 7a06 	vldr	s15, [r7, #24]
 8002294:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	edd3 7a03 	vldr	s15, [r3, #12]
 800229e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 80022aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022ae:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80022b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022bc:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80022c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80022d6:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80022e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022e4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022fe:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002302:	edd7 7a07 	vldr	s15, [r7, #28]
 8002306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 800231c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002320:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	edd3 7a04 	vldr	s15, [r3, #16]
 800232a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800232e:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	edd3 7a05 	vldr	s15, [r3, #20]
 8002338:	ee66 7a27 	vmul.f32	s15, s12, s15
 800233c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002344:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002348:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002352:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002356:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002360:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002364:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002370:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002374:	edd7 7a05 	vldr	s15, [r7, #20]
 8002378:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
		float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 800238a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 800238e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002392:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	edd3 7a04 	vldr	s15, [r3, #16]
 800239c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023a0:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80023aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80023ba:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80023c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c8:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80023d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80023d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80023e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
		float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 80023fc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
					   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 8002400:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002404:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	edd3 7a04 	vldr	s15, [r3, #16]
 800240e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002412:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	edd3 7a05 	vldr	s15, [r3, #20]
 800241c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002428:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800242c:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 7a04 	vldr	s15, [r3, #16]
 8002436:	ee26 6a27 	vmul.f32	s12, s12, s15
 800243a:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	edd3 7a05 	vldr	s15, [r3, #20]
 8002444:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002448:	ee76 7a27 	vadd.f32	s15, s12, s15
 800244c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002454:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002458:	edd7 7a07 	vldr	s15, [r7, #28]
 800245c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	edd3 7a05 	vldr	s15, [r3, #20]
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee77 7a27 	vadd.f32	s15, s14, s15
		float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 800246e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		/* Update covariance matrix P++ = (I - K * C) * P+ */
		float Ptmp[4];
		Ptmp[0] = -kal->P[2]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[0]*(C[2]*K[1] + C[4]*K[2] - 1.0f); Ptmp[1] = -kal->P[3]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[1]*(C[2]*K[1] + C[4]*K[2] - 1.0f);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	edd3 7a04 	vldr	s15, [r3, #16]
 8002478:	eeb1 7a67 	vneg.f32	s14, s15
 800247c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002480:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002484:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002488:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800248c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002490:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002494:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002498:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 800249c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80024b2:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80024b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024be:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 80024c2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024ca:	ee76 7a27 	vadd.f32	s15, s12, s15
 80024ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80024d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80024e8:	eeb1 7a67 	vneg.f32	s14, s15
 80024ec:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80024f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80024f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024f8:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80024fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002500:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002504:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002508:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 800250c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002510:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002522:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002526:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800252a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800252e:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8002532:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002536:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800253a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800253e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002542:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		Ptmp[2] = -kal->P[2]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[0]*(C[2]*K[4] + C[4]*K[5]); Ptmp[3] = -kal->P[3]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[1]*(C[2]*K[4] + C[4]*K[5]);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	edd3 7a04 	vldr	s15, [r3, #16]
 8002558:	eeb1 7a67 	vneg.f32	s14, s15
 800255c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002560:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002568:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800256c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002570:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002574:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002578:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 800257c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002580:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800258c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edd3 6a02 	vldr	s13, [r3, #8]
 800259a:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800259e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80025a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025a6:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 80025aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025b2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80025b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80025c8:	eeb1 7a67 	vneg.f32	s14, s15
 80025cc:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80025d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025d8:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80025dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80025e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025e8:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 80025ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	edd3 6a03 	vldr	s13, [r3, #12]
 800260a:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800260e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002612:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002616:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 800261a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800261e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002622:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	ed93 7a02 	vldr	s14, [r3, #8]
 8002638:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	edc3 7a02 	vstr	s15, [r3, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	ed93 7a03 	vldr	s14, [r3, #12]
 800264c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	edc3 7a03 	vstr	s15, [r3, #12]
		kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002660:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edc3 7a04 	vstr	s15, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	ed93 7a05 	vldr	s14, [r3, #20]
 8002674:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	edc3 7a05 	vstr	s15, [r3, #20]

		/* Update state estimate x++ = x+ + K * (y - h) */
		kal->phi   = kal->phi   + K[0] * (ax - h[0]) + K[1] * (ay - h[1]) + K[2] * (az - h[2]);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	ed93 7a00 	vldr	s14, [r3]
 8002688:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800268c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002690:	ed97 6a32 	vldr	s12, [r7, #200]	; 0xc8
 8002694:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80026a4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80026a8:	ed97 6a31 	vldr	s12, [r7, #196]	; 0xc4
 80026ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026c0:	ed97 6a30 	vldr	s12, [r7, #192]	; 0xc0
 80026c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	edc3 7a00 	vstr	s15, [r3]
		kal->theta = kal->theta + K[3] * (ax - h[0]) + K[4] * (ay - h[1]) + K[5] * (az - h[2]);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80026dc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80026e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026e4:	ed97 6a32 	vldr	s12, [r7, #200]	; 0xc8
 80026e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80026f8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80026fc:	ed97 6a31 	vldr	s12, [r7, #196]	; 0xc4
 8002700:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002710:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002714:	ed97 6a30 	vldr	s12, [r7, #192]	; 0xc0
 8002718:	ee76 7a67 	vsub.f32	s15, s12, s15
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	edc3 7a01 	vstr	s15, [r3, #4]

		return 1;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <KalmanRollPitch_Update+0xc68>
	}

	return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	37dc      	adds	r7, #220	; 0xdc
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	460b      	mov	r3, r1
 8002742:	ed87 0a01 	vstr	s0, [r7, #4]
 8002746:	edc7 0a00 	vstr	s1, [r7]
 800274a:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 800274c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002750:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800280c <LPFTwoPole_Init+0xd4>
 8002754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002758:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d141      	bne.n	80027e6 <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 8002762:	edd7 7a05 	vldr	s15, [r7, #20]
 8002766:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002810 <LPFTwoPole_Init+0xd8>
 800276a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800276e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002776:	edd7 7a00 	vldr	s15, [r7]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	edd7 7a00 	vldr	s15, [r7]
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 800278c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002790:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002814 <LPFTwoPole_Init+0xdc>
 8002794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002798:	edd7 7a00 	vldr	s15, [r7]
 800279c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 80027c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027c4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002814 <LPFTwoPole_Init+0xdc>
 80027c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027cc:	edd7 7a00 	vldr	s15, [r7]
 80027d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027dc:	eef1 7a67 	vneg.f32	s15, s15
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40c90fdb 	.word	0x40c90fdb
 8002810:	3fcfa0f9 	.word	0x3fcfa0f9
 8002814:	400d2f1b 	.word	0x400d2f1b

08002818 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole *lpf, float val) {
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	ed93 7a04 	vldr	s14, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002840:	edd7 7a00 	vldr	s15, [r7]
 8002844:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	ed93 6a05 	vldr	s12, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	edd3 7a01 	vldr	s15, [r3, #4]
 8002854:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7a02 	vldr	s15, [r3, #8]
 800285e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002862:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	ee07 3a90 	vmov	s15, r3
}
 8002878:	eeb0 0a67 	vmov.f32	s0, s15
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <PCA9685_Init>:
#include "PCA9685.h"

void PCA9685_Init(PCA9685 *pca, I2C_HandleTypeDef *I2Chandle, uint8_t pwmFreq) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af04      	add	r7, sp, #16
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	71fb      	strb	r3, [r7, #7]
	pca->I2Chandle = I2Chandle;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	601a      	str	r2, [r3, #0]
	pca->preScale = (uint8_t) ((PCA9685_OSC_FREQ / (pwmFreq * 4096.0f) + 0.5f) - 1.0f);
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80029f4 <PCA9685_Init+0x16c>
 80028aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028ae:	eddf 6a52 	vldr	s13, [pc, #328]	; 80029f8 <PCA9685_Init+0x170>
 80028b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	edc7 7a00 	vstr	s15, [r7]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	711a      	strb	r2, [r3, #4]

	/* Reset */
	uint8_t txBuf[] = {PCA9685_REG_MODE1, 0x80};
 80028d6:	2300      	movs	r3, #0
 80028d8:	763b      	strb	r3, [r7, #24]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	f107 0218 	add.w	r2, r7, #24
 80028e6:	2364      	movs	r3, #100	; 0x64
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2302      	movs	r3, #2
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	f002 fc65 	bl	80051bc <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80028f2:	200a      	movs	r0, #10
 80028f4:	f002 f834 	bl	8004960 <HAL_Delay>

	/* Put to sleep */
	uint8_t rxBuf;
	HAL_I2C_Mem_Read(pca->I2Chandle, PCA9685_I2C_ADDR, PCA9685_REG_MODE1, I2C_MEMADD_SIZE_8BIT, &rxBuf, 1, PCA9685_I2C_TIMEOUT);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	2301      	movs	r3, #1
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	f107 0317 	add.w	r3, r7, #23
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2301      	movs	r3, #1
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	f002 fd52 	bl	80053b8 <HAL_I2C_Mem_Read>

	txBuf[0] = PCA9685_REG_MODE1;
 8002914:	2300      	movs	r3, #0
 8002916:	763b      	strb	r3, [r7, #24]
	txBuf[1] = (rxBuf & ~0x80) | 0x10;
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	b25b      	sxtb	r3, r3
 800291c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8002920:	b25b      	sxtb	r3, r3
 8002922:	f043 0310 	orr.w	r3, r3, #16
 8002926:	b25b      	sxtb	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	f107 0218 	add.w	r2, r7, #24
 8002934:	2364      	movs	r3, #100	; 0x64
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2302      	movs	r3, #2
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	f002 fc3e 	bl	80051bc <HAL_I2C_Master_Transmit>

	/* Write pre-scale value */
	txBuf[0] = PCA9685_REG_PRSCL;
 8002940:	23fe      	movs	r3, #254	; 0xfe
 8002942:	763b      	strb	r3, [r7, #24]
	txBuf[1] = pca->preScale;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	791b      	ldrb	r3, [r3, #4]
 8002948:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f107 0218 	add.w	r2, r7, #24
 8002952:	2364      	movs	r3, #100	; 0x64
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2302      	movs	r3, #2
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	f002 fc2f 	bl	80051bc <HAL_I2C_Master_Transmit>

	/* Wake up */
	txBuf[0] = PCA9685_REG_MODE1;
 800295e:	2300      	movs	r3, #0
 8002960:	763b      	strb	r3, [r7, #24]
	txBuf[1] = rxBuf;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	767b      	strb	r3, [r7, #25]

	HAL_Delay(5);
 8002966:	2005      	movs	r0, #5
 8002968:	f001 fffa 	bl	8004960 <HAL_Delay>

	/* Enable auto-increment */
	txBuf[1] = rxBuf | 0x80 | 0x20;
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8002972:	b2db      	uxtb	r3, r3
 8002974:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f107 0218 	add.w	r2, r7, #24
 800297e:	2364      	movs	r3, #100	; 0x64
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2302      	movs	r3, #2
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	f002 fc19 	bl	80051bc <HAL_I2C_Master_Transmit>

	/* Set output mode to totem pole */
	HAL_I2C_Mem_Read(pca->I2Chandle, PCA9685_I2C_ADDR, PCA9685_REG_MODE2, I2C_MEMADD_SIZE_8BIT, &rxBuf, 1, PCA9685_I2C_TIMEOUT);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	2364      	movs	r3, #100	; 0x64
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	2301      	movs	r3, #1
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	f107 0317 	add.w	r3, r7, #23
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2301      	movs	r3, #1
 800299e:	2201      	movs	r2, #1
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	f002 fd09 	bl	80053b8 <HAL_I2C_Mem_Read>
	rxBuf |= 0x04;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	75fb      	strb	r3, [r7, #23]

	txBuf[0] = PCA9685_REG_MODE2;
 80029b0:	2301      	movs	r3, #1
 80029b2:	763b      	strb	r3, [r7, #24]
	txBuf[1] = rxBuf;
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	f107 0218 	add.w	r2, r7, #24
 80029c0:	2364      	movs	r3, #100	; 0x64
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2302      	movs	r3, #2
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	f002 fbf8 	bl	80051bc <HAL_I2C_Master_Transmit>

	for (int n = 0; n < 8; n++) {
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	e008      	b.n	80029e4 <PCA9685_Init+0x15c>
		pca->setting[n] = 0;
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	80da      	strh	r2, [r3, #6]
	for (int n = 0; n < 8; n++) {
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b07      	cmp	r3, #7
 80029e8:	ddf3      	ble.n	80029d2 <PCA9685_Init+0x14a>
	}
}
 80029ea:	bf00      	nop
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	45800000 	.word	0x45800000
 80029f8:	4bbebc20 	.word	0x4bbebc20

080029fc <PCA9685_SetMicros>:

void PCA9685_SetMicros(PCA9685 *pca, uint8_t channel, uint16_t micros) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	803b      	strh	r3, [r7, #0]
	float pulseLength = 1000000.0f * (pca->preScale + 1) / ((float) PCA9685_OSC_FREQ);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	791b      	ldrb	r3, [r3, #4]
 8002a10:	3301      	adds	r3, #1
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002a60 <PCA9685_SetMicros+0x64>
 8002a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a22:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002a64 <PCA9685_SetMicros+0x68>
 8002a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a2a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t pulse = (uint16_t) (micros / pulseLength);
 8002a2e:	883b      	ldrh	r3, [r7, #0]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a38:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a44:	ee17 3a90 	vmov	r3, s15
 8002a48:	817b      	strh	r3, [r7, #10]

	PCA9685_SetPWM(pca, channel, 0, pulse);
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	78f9      	ldrb	r1, [r7, #3]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f809 	bl	8002a68 <PCA9685_SetPWM>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	49742400 	.word	0x49742400
 8002a64:	4bbebc20 	.word	0x4bbebc20

08002a68 <PCA9685_SetPWM>:
	}

	pca->setting[channel] = val;
}

void PCA9685_SetPWM(PCA9685 *pca, uint8_t channel, uint16_t on, uint16_t off) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	72fb      	strb	r3, [r7, #11]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3306      	adds	r3, #6
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	743b      	strb	r3, [r7, #16]
					  (uint8_t)  on,
 8002a8e:	893b      	ldrh	r3, [r7, #8]
 8002a90:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8002a92:	747b      	strb	r3, [r7, #17]
					  (uint8_t) (on  >> 8),
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8002a9c:	74bb      	strb	r3, [r7, #18]
					  (uint8_t)  off,
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8002aa2:	74fb      	strb	r3, [r7, #19]
					  (uint8_t) (off >> 8)};
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8002aac:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 5, PCA9685_I2C_TIMEOUT);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	f107 0210 	add.w	r2, r7, #16
 8002ab6:	2364      	movs	r3, #100	; 0x64
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2305      	movs	r3, #5
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	f002 fb7d 	bl	80051bc <HAL_I2C_Master_Transmit>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <PI_Init>:
*/

#include "PIController.h"

/* Initialise PI controller with gains and output limits */
void PI_Init(PIController *ctrl, float Kp, float Ki, float limMin, float limMax) {
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6178      	str	r0, [r7, #20]
 8002ad2:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ad6:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ada:	ed87 1a02 	vstr	s2, [r7, #8]
 8002ade:	edc7 1a01 	vstr	s3, [r7, #4]
	ctrl->Kp = Kp;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	601a      	str	r2, [r3, #0]
	ctrl->Ki = Ki;	
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
	ctrl->limMin = limMin;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	60da      	str	r2, [r3, #12]
	ctrl->limMax = limMax;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]
	ctrl->integrator = 0.0f;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
	ctrl->prevError  = 0.0f;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	621a      	str	r2, [r3, #32]
	ctrl->output     = 0.0f;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
	
	/* Disable feedforward control */
	ctrl->limMinFF = 0.0f;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	615a      	str	r2, [r3, #20]
	ctrl->limMaxFF = 0.0f;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <PI_Update>:
	ctrl->limMinFF = limMinFF;
	ctrl->limMaxFF = limMaxFF;
}

/* Main controller update routine, requires sample time T (in seconds) */
float PI_Update(PIController *ctrl, float setpoint, float measurement, float T) {
 8002b2e:	b480      	push	{r7}
 8002b30:	b08b      	sub	sp, #44	; 0x2c
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b3a:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b3e:	ed87 1a00 	vstr	s2, [r7]
	/* Error signal */
	float error = setpoint - measurement;
 8002b42:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4e:	edc7 7a06 	vstr	s15, [r7, #24]
	
	/* Proportional */
	float proportional = ctrl->Kp * error;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b60:	edc7 7a05 	vstr	s15, [r7, #20]
	
	/* Feedforward */
	float ff = ctrl->Kff * setpoint;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	
	if (ff > ctrl->limMaxFF) {
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b7c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b88:	dd03      	ble.n	8002b92 <PI_Update+0x64>
		ff = ctrl->limMaxFF;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e00c      	b.n	8002bac <PI_Update+0x7e>
	} else if (ff < ctrl->limMinFF) {
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba4:	d502      	bpl.n	8002bac <PI_Update+0x7e>
		ff = ctrl->limMinFF;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Integrator */
	ctrl->integrator = ctrl->integrator + 0.5f * T * ctrl->Ki * (error + ctrl->prevError);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bb2:	edd7 7a00 	vldr	s15, [r7]
 8002bb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002bba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	ed93 6a08 	vldr	s12, [r3, #32]
 8002bce:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bd2:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Dynamic integrator clamping */
	float limMinInt, limMaxInt;
	
	if (ctrl->limMax - proportional - ff > 0.0f) {
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	dd09      	ble.n	8002c18 <PI_Update+0xea>
		limMaxInt = ctrl->limMax - proportional;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	edc7 7a07 	vstr	s15, [r7, #28]
 8002c16:	e002      	b.n	8002c1e <PI_Update+0xf0>
	} else {
		limMaxInt = 0.0f;
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
	}
	
	if (ctrl->limMin - proportional - ff < 0.0f) {
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d509      	bpl.n	8002c52 <PI_Update+0x124>
		limMinInt = ctrl->limMin - proportional;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4c:	edc7 7a08 	vstr	s15, [r7, #32]
 8002c50:	e002      	b.n	8002c58 <PI_Update+0x12a>
	} else {
		limMinInt = 0.0f;
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
	}
	
	if (ctrl->integrator > limMaxInt) {
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6a:	d503      	bpl.n	8002c74 <PI_Update+0x146>
		ctrl->integrator = limMaxInt;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	61da      	str	r2, [r3, #28]
 8002c72:	e00c      	b.n	8002c8e <PI_Update+0x160>
	} else if (ctrl->integrator < limMinInt) {
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	dd02      	ble.n	8002c8e <PI_Update+0x160>
		ctrl->integrator = limMinInt;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a3a      	ldr	r2, [r7, #32]
 8002c8c:	61da      	str	r2, [r3, #28]
	}
	
	/* Set output and clamp */
	ctrl->output = proportional + ff + ctrl->integrator;
 8002c8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	
	if (ctrl->output > ctrl->limMax) {
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	dd04      	ble.n	8002cca <PI_Update+0x19c>
		ctrl->output = ctrl->limMax;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc8:	e00e      	b.n	8002ce8 <PI_Update+0x1ba>
	} else if (ctrl->output < ctrl->limMin) {
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cde:	d503      	bpl.n	8002ce8 <PI_Update+0x1ba>
		ctrl->output = ctrl->limMin;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	
	/* Store error signal */
	ctrl->prevError = error;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	621a      	str	r2, [r3, #32]
	
	/* Return controller output */
	return ctrl->output;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	ee07 3a90 	vmov	s15, r3
}
 8002cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfa:	372c      	adds	r7, #44	; 0x2c
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <vApplicationGetIdleTaskMemory+0x30>)
 8002d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000460 	.word	0x20000460
 8002d34:	200004b4 	.word	0x200004b4

08002d38 <EXTI0_IRQHandler>:
float rcThrottle, rcRoll, rcPitch, rcYaw;
uint8_t running = 0;

/* RC channel 1 interrupt */
void EXTI0_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & RC1_Pin) { /* Rising edge */
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <EXTI0_IRQHandler+0x34>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <EXTI0_IRQHandler+0x1a>
		pwmRisingEdgeStart[0] = TIM5->CNT;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <EXTI0_IRQHandler+0x38>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <EXTI0_IRQHandler+0x3c>)
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e007      	b.n	8002d62 <EXTI0_IRQHandler+0x2a>
	} else { /* Falling edge */
		pwmOnPeriod[0] = (TIM5->CNT - pwmRisingEdgeStart[0]) / 2;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <EXTI0_IRQHandler+0x38>)
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <EXTI0_IRQHandler+0x3c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <EXTI0_IRQHandler+0x40>)
 8002d60:	6013      	str	r3, [r2, #0]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f002 f8ce 	bl	8004f04 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	200006b4 	.word	0x200006b4
 8002d78:	200006c4 	.word	0x200006c4

08002d7c <EXTI1_IRQHandler>:

/* RC channel 2 interrupt */
void EXTI1_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	if (GPIOA->IDR & RC2_Pin) {
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <EXTI1_IRQHandler+0x34>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <EXTI1_IRQHandler+0x1a>
		pwmRisingEdgeStart[1] = TIM5->CNT;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <EXTI1_IRQHandler+0x38>)
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <EXTI1_IRQHandler+0x3c>)
 8002d92:	6053      	str	r3, [r2, #4]
 8002d94:	e007      	b.n	8002da6 <EXTI1_IRQHandler+0x2a>
	} else { /* Falling edge */
		pwmOnPeriod[1] = (TIM5->CNT - pwmRisingEdgeStart[1]) / 2;
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <EXTI1_IRQHandler+0x38>)
 8002d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <EXTI1_IRQHandler+0x3c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <EXTI1_IRQHandler+0x40>)
 8002da4:	6053      	str	r3, [r2, #4]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002da6:	2002      	movs	r0, #2
 8002da8:	f002 f8ac 	bl	8004f04 <HAL_GPIO_EXTI_IRQHandler>
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	200006b4 	.word	0x200006b4
 8002dbc:	200006c4 	.word	0x200006c4

08002dc0 <EXTI9_5_IRQHandler>:

/* RC channel 3 and 4 interrupts */
void EXTI9_5_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 6)) {
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <EXTI9_5_IRQHandler+0x94>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01c      	beq.n	8002e0a <EXTI9_5_IRQHandler+0x4a>

		if (GPIOB->IDR & RC3_Pin) {
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <EXTI9_5_IRQHandler+0x98>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <EXTI9_5_IRQHandler+0x26>
		  pwmRisingEdgeStart[2] = TIM5->CNT;
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <EXTI9_5_IRQHandler+0x9c>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <EXTI9_5_IRQHandler+0xa0>)
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	e00d      	b.n	8002e02 <EXTI9_5_IRQHandler+0x42>
		} else if ((GPIOB->IDR & RC3_Pin) == 0) {
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <EXTI9_5_IRQHandler+0x98>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <EXTI9_5_IRQHandler+0x42>
		  pwmOnPeriod[2] = (TIM5->CNT - pwmRisingEdgeStart[2]) / 2;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <EXTI9_5_IRQHandler+0x9c>)
 8002df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <EXTI9_5_IRQHandler+0xa0>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <EXTI9_5_IRQHandler+0xa4>)
 8002e00:	6093      	str	r3, [r2, #8]
		}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e02:	2040      	movs	r0, #64	; 0x40
 8002e04:	f002 f87e 	bl	8004f04 <HAL_GPIO_EXTI_IRQHandler>
		  pwmOnPeriod[3] = (TIM5->CNT - pwmRisingEdgeStart[3]) / 2;
		}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);

	}
}
 8002e08:	e021      	b.n	8002e4e <EXTI9_5_IRQHandler+0x8e>
	} else if (EXTI->PR & (1 << 7)) {
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <EXTI9_5_IRQHandler+0x94>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <EXTI9_5_IRQHandler+0x8e>
		if (GPIOB->IDR & RC4_Pin) {
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <EXTI9_5_IRQHandler+0x98>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <EXTI9_5_IRQHandler+0x6c>
		  pwmRisingEdgeStart[3] = TIM5->CNT;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <EXTI9_5_IRQHandler+0x9c>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <EXTI9_5_IRQHandler+0xa0>)
 8002e28:	60d3      	str	r3, [r2, #12]
 8002e2a:	e00d      	b.n	8002e48 <EXTI9_5_IRQHandler+0x88>
		} else if ((GPIOB->IDR & RC4_Pin) == 0) {
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <EXTI9_5_IRQHandler+0x98>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <EXTI9_5_IRQHandler+0x88>
		  pwmOnPeriod[3] = (TIM5->CNT - pwmRisingEdgeStart[3]) / 2;
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <EXTI9_5_IRQHandler+0x9c>)
 8002e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <EXTI9_5_IRQHandler+0xa0>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <EXTI9_5_IRQHandler+0xa4>)
 8002e46:	60d3      	str	r3, [r2, #12]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002e48:	2080      	movs	r0, #128	; 0x80
 8002e4a:	f002 f85b 	bl	8004f04 <HAL_GPIO_EXTI_IRQHandler>
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40013c00 	.word	0x40013c00
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	200006b4 	.word	0x200006b4
 8002e64:	200006c4 	.word	0x200006c4

08002e68 <main>:

int main(void)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b0ba      	sub	sp, #232	; 0xe8
 8002e6c:	af02      	add	r7, sp, #8
  HAL_Init();
 8002e6e:	f001 fd35 	bl	80048dc <HAL_Init>

  /* Initialise clocks */
  SystemClock_Config();
 8002e72:	f000 ff53 	bl	8003d1c <SystemClock_Config>

  /* Initialise hardware interfaces */
  MX_GPIO_Init();
 8002e76:	f001 f937 	bl	80040e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e7a:	f000 ffb9 	bl	8003df0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002e7e:	f000 ffe5 	bl	8003e4c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002e82:	f001 f811 	bl	8003ea8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e86:	f001 f845 	bl	8003f14 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002e8a:	f001 f879 	bl	8003f80 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002e8e:	f001 f8ad 	bl	8003fec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002e92:	f001 f8d5 	bl	8004040 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002e96:	f001 f8fd 	bl	8004094 <MX_USART3_UART_Init>

  /* Enable TIM5 for elapsed microseconds count (reading PWM RC input) */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4bbe      	ldr	r3, [pc, #760]	; (8003198 <main+0x330>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4abd      	ldr	r2, [pc, #756]	; (8003198 <main+0x330>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4bbb      	ldr	r3, [pc, #748]	; (8003198 <main+0x330>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
  TIM5->PSC = HAL_RCC_GetPCLK1Freq()/1000000 - 1;
 8002eb6:	f003 fc23 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4bb7      	ldr	r3, [pc, #732]	; (800319c <main+0x334>)
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	0c9b      	lsrs	r3, r3, #18
 8002ec4:	4ab6      	ldr	r2, [pc, #728]	; (80031a0 <main+0x338>)
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6293      	str	r3, [r2, #40]	; 0x28
  TIM5->CR1 = TIM_CR1_CEN;
 8002eca:	4bb5      	ldr	r3, [pc, #724]	; (80031a0 <main+0x338>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  TIM5->ARR = 0xFFFFFFFF;
 8002ed0:	4bb3      	ldr	r3, [pc, #716]	; (80031a0 <main+0x338>)
 8002ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CNT = 0xFFFFFFFE; /* Dirty fix... PWM values are only correct once timer overruns once. */
 8002ed8:	4bb1      	ldr	r3, [pc, #708]	; (80031a0 <main+0x338>)
 8002eda:	f06f 0201 	mvn.w	r2, #1
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Create task handles */
  osThreadDef(heartbeatTask, startHeartbeatTask, osPriorityLow, 0, 128);
 8002ee0:	4bb0      	ldr	r3, [pc, #704]	; (80031a4 <main+0x33c>)
 8002ee2:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ef0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 8002ef4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 ffcb 	bl	8007e96 <osThreadCreate>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4ba9      	ldr	r3, [pc, #676]	; (80031a8 <main+0x340>)
 8002f04:	601a      	str	r2, [r3, #0]

  osThreadDef(accelerometerTask, startAccelerometerTask, osPriorityRealtime, 0, 128);
 8002f06:	4ba9      	ldr	r3, [pc, #676]	; (80031ac <main+0x344>)
 8002f08:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8002f0c:	461d      	mov	r5, r3
 8002f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  accelerometerTaskHandle = osThreadCreate(osThread(accelerometerTask), NULL);
 8002f1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 ffb8 	bl	8007e96 <osThreadCreate>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4ba1      	ldr	r3, [pc, #644]	; (80031b0 <main+0x348>)
 8002f2a:	601a      	str	r2, [r3, #0]

  osThreadDef(gyroscopeTask, startGyroscopeTask, osPriorityRealtime, 0, 128);
 8002f2c:	4ba1      	ldr	r3, [pc, #644]	; (80031b4 <main+0x34c>)
 8002f2e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002f32:	461d      	mov	r5, r3
 8002f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gyroscopeTaskHandle = osThreadCreate(osThread(gyroscopeTask), NULL);
 8002f40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 ffa5 	bl	8007e96 <osThreadCreate>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b9a      	ldr	r3, [pc, #616]	; (80031b8 <main+0x350>)
 8002f50:	601a      	str	r2, [r3, #0]

  osThreadDef(magnetometerTask, startMagnetometerTask, osPriorityHigh, 0, 128);
 8002f52:	4b9a      	ldr	r3, [pc, #616]	; (80031bc <main+0x354>)
 8002f54:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8002f58:	461d      	mov	r5, r3
 8002f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  magnetometerTaskHandle = osThreadCreate(osThread(magnetometerTask), NULL);
 8002f66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 ff92 	bl	8007e96 <osThreadCreate>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <main+0x358>)
 8002f76:	601a      	str	r2, [r3, #0]

  //osThreadDef(barometerTask, startBarometerTask, osPriorityHigh, 0, 128);
  //barometerTaskHandle = osThreadCreate(osThread(barometerTask), NULL);

  osThreadDef(rcTask, startRCTask, osPriorityNormal, 0, 128);
 8002f78:	4b92      	ldr	r3, [pc, #584]	; (80031c4 <main+0x35c>)
 8002f7a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002f7e:	461d      	mov	r5, r3
 8002f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rcTaskHandle = osThreadCreate(osThread(rcTask), NULL);
 8002f8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 ff7f 	bl	8007e96 <osThreadCreate>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b8b      	ldr	r3, [pc, #556]	; (80031c8 <main+0x360>)
 8002f9c:	601a      	str	r2, [r3, #0]

  osThreadDef(pwmTask, startPWMTask, osPriorityHigh, 0, 128);
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <main+0x364>)
 8002fa0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002faa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmTaskHandle = osThreadCreate(osThread(pwmTask), NULL);
 8002fb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f004 ff6c 	bl	8007e96 <osThreadCreate>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b83      	ldr	r3, [pc, #524]	; (80031d0 <main+0x368>)
 8002fc2:	601a      	str	r2, [r3, #0]

  osThreadDef(controllerTask, startControllerTask, osPriorityHigh, 0, 128);
 8002fc4:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <main+0x36c>)
 8002fc6:	f107 0418 	add.w	r4, r7, #24
 8002fca:	461d      	mov	r5, r3
 8002fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 ff59 	bl	8007e96 <osThreadCreate>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	; (80031d8 <main+0x370>)
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Initialise peripherals */
  if (BMX055_Init(&imu, &hspi3, GPIOB, SPI3_CSACC_Pin, SPI3_CSGYR_Pin, SPI3_CSMAG_Pin) == 0) {
 8002fea:	2320      	movs	r3, #32
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2310      	movs	r3, #16
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	4a79      	ldr	r2, [pc, #484]	; (80031dc <main+0x374>)
 8002ff6:	497a      	ldr	r1, [pc, #488]	; (80031e0 <main+0x378>)
 8002ff8:	487a      	ldr	r0, [pc, #488]	; (80031e4 <main+0x37c>)
 8002ffa:	f7fd ff4d 	bl	8000e98 <BMX055_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <main+0x1a6>
	  HAL_GPIO_WritePin(GPIOC, LED_C_Pin, GPIO_PIN_SET);
 8003004:	2201      	movs	r2, #1
 8003006:	2104      	movs	r1, #4
 8003008:	4877      	ldr	r0, [pc, #476]	; (80031e8 <main+0x380>)
 800300a:	f001 ff47 	bl	8004e9c <HAL_GPIO_WritePin>
  }

  //MPRLS_Init(&bar, &hspi2, GPIOC, SPI2_CS_Pin, GPIOC, BAR_NRST_Pin, GPIOC, INT_BAR_Pin);

  /* Initialise PMW driver */
  PCA9685_Init(&pwm, &hi2c1, 50);
 800300e:	2232      	movs	r2, #50	; 0x32
 8003010:	4976      	ldr	r1, [pc, #472]	; (80031ec <main+0x384>)
 8003012:	4877      	ldr	r0, [pc, #476]	; (80031f0 <main+0x388>)
 8003014:	f7ff fc38 	bl	8002888 <PCA9685_Init>

  PCA9685_SetMicros(&pwm, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	4874      	ldr	r0, [pc, #464]	; (80031f0 <main+0x388>)
 800301e:	f7ff fced 	bl	80029fc <PCA9685_SetMicros>
  PCA9685_SetMicros(&pwm, 1, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	4872      	ldr	r0, [pc, #456]	; (80031f0 <main+0x388>)
 8003028:	f7ff fce8 	bl	80029fc <PCA9685_SetMicros>
  PCA9685_SetMicros(&pwm, 2, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2102      	movs	r1, #2
 8003030:	486f      	ldr	r0, [pc, #444]	; (80031f0 <main+0x388>)
 8003032:	f7ff fce3 	bl	80029fc <PCA9685_SetMicros>
  PCA9685_SetMicros(&pwm, 3, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2103      	movs	r1, #3
 800303a:	486d      	ldr	r0, [pc, #436]	; (80031f0 <main+0x388>)
 800303c:	f7ff fcde 	bl	80029fc <PCA9685_SetMicros>

  HAL_Delay(1000);
 8003040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003044:	f001 fc8c 	bl	8004960 <HAL_Delay>

  /* Arm motors */
  PCA9685_SetMicros(&pwm, 0, 500);
 8003048:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800304c:	2100      	movs	r1, #0
 800304e:	4868      	ldr	r0, [pc, #416]	; (80031f0 <main+0x388>)
 8003050:	f7ff fcd4 	bl	80029fc <PCA9685_SetMicros>
  PCA9685_SetMicros(&pwm, 1, 500);
 8003054:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003058:	2101      	movs	r1, #1
 800305a:	4865      	ldr	r0, [pc, #404]	; (80031f0 <main+0x388>)
 800305c:	f7ff fcce 	bl	80029fc <PCA9685_SetMicros>
  PCA9685_SetMicros(&pwm, 2, 500);
 8003060:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003064:	2102      	movs	r1, #2
 8003066:	4862      	ldr	r0, [pc, #392]	; (80031f0 <main+0x388>)
 8003068:	f7ff fcc8 	bl	80029fc <PCA9685_SetMicros>
  PCA9685_SetMicros(&pwm, 3, 500);
 800306c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003070:	2103      	movs	r1, #3
 8003072:	485f      	ldr	r0, [pc, #380]	; (80031f0 <main+0x388>)
 8003074:	f7ff fcc2 	bl	80029fc <PCA9685_SetMicros>
  HAL_Delay(1000);
 8003078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307c:	f001 fc70 	bl	8004960 <HAL_Delay>

  running = 1;
 8003080:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <main+0x38c>)
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]

  /* Initialise filters */
  int n;
  for (n = 0; n < 3; n++) {
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800308c:	e034      	b.n	80030f8 <main+0x290>
	  LPFTwoPole_Init(&lpfAcc[n], LPF_TYPE_BESSEL, LPF_ACC_CUTOFF_HZ, 0.001f * SAMPLE_TIME_ACC_MS);
 800308e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <main+0x390>)
 800309c:	4413      	add	r3, r2
 800309e:	eddf 0a57 	vldr	s1, [pc, #348]	; 80031fc <main+0x394>
 80030a2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fb45 	bl	8002738 <LPFTwoPole_Init>
	  LPFTwoPole_Init(&lpfGyr[n], LPF_TYPE_BESSEL, LPF_GYR_CUTOFF_HZ, 0.001f * SAMPLE_TIME_GYR_MS);
 80030ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4a51      	ldr	r2, [pc, #324]	; (8003200 <main+0x398>)
 80030bc:	4413      	add	r3, r2
 80030be:	eddf 0a51 	vldr	s1, [pc, #324]	; 8003204 <main+0x39c>
 80030c2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8003208 <main+0x3a0>
 80030c6:	2101      	movs	r1, #1
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fb35 	bl	8002738 <LPFTwoPole_Init>
	  LPFTwoPole_Init(&lpfMag[n], LPF_TYPE_BESSEL, LPF_MAG_CUTOFF_HZ, 0.001f * SAMPLE_TIME_MAG_MS);
 80030ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4a4c      	ldr	r2, [pc, #304]	; (800320c <main+0x3a4>)
 80030dc:	4413      	add	r3, r2
 80030de:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8003210 <main+0x3a8>
 80030e2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fb25 	bl	8002738 <LPFTwoPole_Init>
  for (n = 0; n < 3; n++) {
 80030ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f2:	3301      	adds	r3, #1
 80030f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80030f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	ddc6      	ble.n	800308e <main+0x226>
  }

  for (n = 0; n < 4; n++) {
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003106:	e014      	b.n	8003132 <main+0x2ca>
	  LPFTwoPole_Init(&lpfRC[n], LPF_TYPE_BESSEL, LPF_RC_CUTOFF_HZ, 0.001f * SAMPLE_TIME_RC_MS);
 8003108:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <main+0x3ac>)
 8003116:	4413      	add	r3, r2
 8003118:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8003204 <main+0x39c>
 800311c:	eeb1 0a0e 	vmov.f32	s0, #30	; 0x40f00000  7.5
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fb08 	bl	8002738 <LPFTwoPole_Init>
  for (n = 0; n < 4; n++) {
 8003128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312c:	3301      	adds	r3, #1
 800312e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003136:	2b03      	cmp	r3, #3
 8003138:	dde6      	ble.n	8003108 <main+0x2a0>
  }

  /* Initialise Kalman filter */
  float Q[] = {3.0f * EKF_N_GYR, 2.0f * EKF_N_GYR};
 800313a:	4a37      	ldr	r2, [pc, #220]	; (8003218 <main+0x3b0>)
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003144:	e883 0003 	stmia.w	r3, {r0, r1}
  float R[] = {EKF_N_ACC, EKF_N_ACC, EKF_N_ACC};
 8003148:	4a34      	ldr	r2, [pc, #208]	; (800321c <main+0x3b4>)
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	ca07      	ldmia	r2, {r0, r1, r2}
 800314e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  KalmanRollPitch_Init(&ekf, EKF_P_INIT, Q, R);
 8003152:	1d3a      	adds	r2, r7, #4
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4619      	mov	r1, r3
 800315a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800315e:	4830      	ldr	r0, [pc, #192]	; (8003220 <main+0x3b8>)
 8003160:	f7fe fa7e 	bl	8001660 <KalmanRollPitch_Init>

  /* Initialise controllers */
  PI_Init(&ctrlRoll,  CTRL_ROLL_P, CTRL_ROLL_I, CTRL_ROLL_LIM_MIN, CTRL_ROLL_LIM_MAX);
 8003164:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8003224 <main+0x3bc>
 8003168:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8003228 <main+0x3c0>
 800316c:	eddf 0a28 	vldr	s1, [pc, #160]	; 8003210 <main+0x3a8>
 8003170:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800322c <main+0x3c4>
 8003174:	482e      	ldr	r0, [pc, #184]	; (8003230 <main+0x3c8>)
 8003176:	f7ff fca8 	bl	8002aca <PI_Init>
  PI_Init(&ctrlPitch, CTRL_PITCH_P, CTRL_PITCH_I, CTRL_PITCH_LIM_MIN, CTRL_PITCH_LIM_MAX);
 800317a:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8003224 <main+0x3bc>
 800317e:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8003228 <main+0x3c0>
 8003182:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003234 <main+0x3cc>
 8003186:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003238 <main+0x3d0>
 800318a:	482c      	ldr	r0, [pc, #176]	; (800323c <main+0x3d4>)
 800318c:	f7ff fc9d 	bl	8002aca <PI_Init>




  osKernelStart();
 8003190:	f004 fe7a 	bl	8007e88 <osKernelStart>

  while (1)
 8003194:	e7fe      	b.n	8003194 <main+0x32c>
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	0800abf8 	.word	0x0800abf8
 80031a8:	200048e0 	.word	0x200048e0
 80031ac:	0800ac28 	.word	0x0800ac28
 80031b0:	200045e0 	.word	0x200045e0
 80031b4:	0800ac54 	.word	0x0800ac54
 80031b8:	2000450c 	.word	0x2000450c
 80031bc:	0800ac84 	.word	0x0800ac84
 80031c0:	200048e8 	.word	0x200048e8
 80031c4:	0800aca8 	.word	0x0800aca8
 80031c8:	200046a0 	.word	0x200046a0
 80031cc:	0800accc 	.word	0x0800accc
 80031d0:	200048dc 	.word	0x200048dc
 80031d4:	0800acf8 	.word	0x0800acf8
 80031d8:	200048e4 	.word	0x200048e4
 80031dc:	40020400 	.word	0x40020400
 80031e0:	20004644 	.word	0x20004644
 80031e4:	20004514 	.word	0x20004514
 80031e8:	40020800 	.word	0x40020800
 80031ec:	2000458c 	.word	0x2000458c
 80031f0:	200047c8 	.word	0x200047c8
 80031f4:	200006d4 	.word	0x200006d4
 80031f8:	20004738 	.word	0x20004738
 80031fc:	3c83126f 	.word	0x3c83126f
 8003200:	200046e4 	.word	0x200046e4
 8003204:	3c23d70b 	.word	0x3c23d70b
 8003208:	42000000 	.word	0x42000000
 800320c:	20004780 	.word	0x20004780
 8003210:	3dcccccd 	.word	0x3dcccccd
 8003214:	200045e4 	.word	0x200045e4
 8003218:	0800ad14 	.word	0x0800ad14
 800321c:	0800ad1c 	.word	0x0800ad1c
 8003220:	200048a4 	.word	0x200048a4
 8003224:	408b851f 	.word	0x408b851f
 8003228:	c08b851f 	.word	0xc08b851f
 800322c:	3f9d70a4 	.word	0x3f9d70a4
 8003230:	20004434 	.word	0x20004434
 8003234:	3da3d70a 	.word	0x3da3d70a
 8003238:	3f8a3d71 	.word	0x3f8a3d71
 800323c:	20004838 	.word	0x20004838

08003240 <startAccelerometerTask>:

uint32_t readingCountGyr = 0;
float gyrAverage[] = {0.0f, 0.0f, 0.0f};

void startAccelerometerTask(void const * argument)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	for (;;) {
		/* Acquire measurements from sensor */
		BMX055_ReadAccelerometer(&imu);
 8003248:	482f      	ldr	r0, [pc, #188]	; (8003308 <startAccelerometerTask+0xc8>)
 800324a:	f7fd ff69 	bl	8001120 <BMX055_ReadAccelerometer>

		/* Correct scale and bias errors */
		imu.acc[0] = CALIB_ACC_SCALE_X * imu.acc[0] + CALIB_ACC_BIAS_X;
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <startAccelerometerTask+0xc8>)
 8003250:	edd3 7a04 	vldr	s15, [r3, #16]
 8003254:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800330c <startAccelerometerTask+0xcc>
 8003258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003310 <startAccelerometerTask+0xd0>
 8003260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <startAccelerometerTask+0xc8>)
 8003266:	edc3 7a04 	vstr	s15, [r3, #16]
		imu.acc[1] = CALIB_ACC_SCALE_Y * imu.acc[1] + CALIB_ACC_BIAS_Y;
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <startAccelerometerTask+0xc8>)
 800326c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003270:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003314 <startAccelerometerTask+0xd4>
 8003274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003278:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003318 <startAccelerometerTask+0xd8>
 800327c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <startAccelerometerTask+0xc8>)
 8003282:	edc3 7a05 	vstr	s15, [r3, #20]
		imu.acc[2] = CALIB_ACC_SCALE_Z * imu.acc[2] + CALIB_ACC_BIAS_Z;
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <startAccelerometerTask+0xc8>)
 8003288:	edd3 7a06 	vldr	s15, [r3, #24]
 800328c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800331c <startAccelerometerTask+0xdc>
 8003290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003294:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003320 <startAccelerometerTask+0xe0>
 8003298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <startAccelerometerTask+0xc8>)
 800329e:	edc3 7a06 	vstr	s15, [r3, #24]

		/* Filter measurements */
		float accFilt[3];
		for (int n = 0; n < 3; n++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e01f      	b.n	80032e8 <startAccelerometerTask+0xa8>
		  accFilt[n] = LPFTwoPole_Update(&lpfAcc[n], imu.acc[n]);
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <startAccelerometerTask+0xe4>)
 80032b4:	1899      	adds	r1, r3, r2
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <startAccelerometerTask+0xc8>)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3304      	adds	r3, #4
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	4608      	mov	r0, r1
 80032ca:	f7ff faa5 	bl	8002818 <LPFTwoPole_Update>
 80032ce:	eef0 7a40 	vmov.f32	s15, s0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f107 0218 	add.w	r2, r7, #24
 80032da:	4413      	add	r3, r2
 80032dc:	3b10      	subs	r3, #16
 80032de:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < 3; n++) {
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3301      	adds	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	dddc      	ble.n	80032a8 <startAccelerometerTask+0x68>
		}

		/* Update Kalman filter */
		KalmanRollPitch_Update(&ekf, accFilt, 0.001f * SAMPLE_TIME_ACC_MS);
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003328 <startAccelerometerTask+0xe8>
 80032f6:	4619      	mov	r1, r3
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <startAccelerometerTask+0xec>)
 80032fa:	f7fe fbe5 	bl	8001ac8 <KalmanRollPitch_Update>

		osDelay(SAMPLE_TIME_ACC_MS); /* Output data rate is 62.5 Hz */
 80032fe:	2010      	movs	r0, #16
 8003300:	f004 fe15 	bl	8007f2e <osDelay>
	for (;;) {
 8003304:	e7a0      	b.n	8003248 <startAccelerometerTask+0x8>
 8003306:	bf00      	nop
 8003308:	20004514 	.word	0x20004514
 800330c:	3f7cb296 	.word	0x3f7cb296
 8003310:	3f2f9097 	.word	0x3f2f9097
 8003314:	3f7f4f0e 	.word	0x3f7f4f0e
 8003318:	3d591687 	.word	0x3d591687
 800331c:	3f7fb15b 	.word	0x3f7fb15b
 8003320:	3e9a5e35 	.word	0x3e9a5e35
 8003324:	20004738 	.word	0x20004738
 8003328:	3c83126f 	.word	0x3c83126f
 800332c:	200048a4 	.word	0x200048a4

08003330 <startGyroscopeTask>:
	}
}


void startGyroscopeTask(void const * argument)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	ed2d 8b02 	vpush	{d8}
 8003338:	b088      	sub	sp, #32
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
	for (;;) {
		/* Acquire measurements from sensor */
		BMX055_ReadGyroscope(&imu);
 800333e:	487e      	ldr	r0, [pc, #504]	; (8003538 <startGyroscopeTask+0x208>)
 8003340:	f7fd ff60 	bl	8001204 <BMX055_ReadGyroscope>

		/* Calculate mean value */
		readingCountGyr++;
 8003344:	4b7d      	ldr	r3, [pc, #500]	; (800353c <startGyroscopeTask+0x20c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	4a7c      	ldr	r2, [pc, #496]	; (800353c <startGyroscopeTask+0x20c>)
 800334c:	6013      	str	r3, [r2, #0]
		for (int n = 0; n < 3; n++) {
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e029      	b.n	80033a8 <startGyroscopeTask+0x78>
			gyrAverage[n] = (gyrAverage[n] * (readingCountGyr - 1) + imu.gyr[n]) / ((float) readingCountGyr);
 8003354:	4a7a      	ldr	r2, [pc, #488]	; (8003540 <startGyroscopeTask+0x210>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	ed93 7a00 	vldr	s14, [r3]
 8003360:	4b76      	ldr	r3, [pc, #472]	; (800353c <startGyroscopeTask+0x20c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3b01      	subs	r3, #1
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003372:	4a71      	ldr	r2, [pc, #452]	; (8003538 <startGyroscopeTask+0x208>)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	3306      	adds	r3, #6
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003386:	4b6d      	ldr	r3, [pc, #436]	; (800353c <startGyroscopeTask+0x20c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003396:	4a6a      	ldr	r2, [pc, #424]	; (8003540 <startGyroscopeTask+0x210>)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < 3; n++) {
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	ddd2      	ble.n	8003354 <startGyroscopeTask+0x24>
		}

		/* Filter measurements */
		float gyrFilt[3];
		for (int n = 0; n < 3; n++) {
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e020      	b.n	80033f6 <startGyroscopeTask+0xc6>
		  gyrFilt[n] = LPFTwoPole_Update(&lpfGyr[n], imu.gyr[n]);
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4a61      	ldr	r2, [pc, #388]	; (8003544 <startGyroscopeTask+0x214>)
 80033c0:	1899      	adds	r1, r3, r2
 80033c2:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <startGyroscopeTask+0x208>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	3306      	adds	r3, #6
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	eeb0 0a67 	vmov.f32	s0, s15
 80033d6:	4608      	mov	r0, r1
 80033d8:	f7ff fa1e 	bl	8002818 <LPFTwoPole_Update>
 80033dc:	eef0 7a40 	vmov.f32	s15, s0
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	f107 0220 	add.w	r2, r7, #32
 80033e8:	4413      	add	r3, r2
 80033ea:	3b14      	subs	r3, #20
 80033ec:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < 3; n++) {
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	dddb      	ble.n	80033b4 <startGyroscopeTask+0x84>
		}

		/* Update Kalman filter */
		KalmanRollPitch_Predict(&ekf, gyrFilt, 0.001f * SAMPLE_TIME_GYR_MS);
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8003548 <startGyroscopeTask+0x218>
 8003404:	4619      	mov	r1, r3
 8003406:	4851      	ldr	r0, [pc, #324]	; (800354c <startGyroscopeTask+0x21c>)
 8003408:	f7fe f96e 	bl	80016e8 <KalmanRollPitch_Predict>

		/* Update yaw complementary filter */
		psi = CF_ALPHA * psiMag + (1.0f - CF_ALPHA) * (psi + 0.001f * SAMPLE_TIME_GYR_MS * (sin(ekf.phi) * gyrFilt[1] + cos(ekf.phi) * gyrFilt[2]) / cos(ekf.theta));
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <startGyroscopeTask+0x220>)
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003554 <startGyroscopeTask+0x224>
 8003416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341a:	ee17 0a90 	vmov	r0, s15
 800341e:	f7fd f83b 	bl	8000498 <__aeabi_f2d>
 8003422:	4604      	mov	r4, r0
 8003424:	460d      	mov	r5, r1
 8003426:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <startGyroscopeTask+0x228>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f834 	bl	8000498 <__aeabi_f2d>
 8003430:	4680      	mov	r8, r0
 8003432:	4689      	mov	r9, r1
 8003434:	4b45      	ldr	r3, [pc, #276]	; (800354c <startGyroscopeTask+0x21c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f82d 	bl	8000498 <__aeabi_f2d>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	ec43 2b10 	vmov	d0, r2, r3
 8003446:	f005 ff6f 	bl	8009328 <sin>
 800344a:	ec5b ab10 	vmov	sl, fp, d0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f821 	bl	8000498 <__aeabi_f2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4650      	mov	r0, sl
 800345c:	4659      	mov	r1, fp
 800345e:	f7fd f873 	bl	8000548 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4692      	mov	sl, r2
 8003468:	469b      	mov	fp, r3
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <startGyroscopeTask+0x21c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f812 	bl	8000498 <__aeabi_f2d>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	ec43 2b10 	vmov	d0, r2, r3
 800347c:	f005 ff10 	bl	80092a0 <cos>
 8003480:	eeb0 8a40 	vmov.f32	s16, s0
 8003484:	eef0 8a60 	vmov.f32	s17, s1
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f804 	bl	8000498 <__aeabi_f2d>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	ec51 0b18 	vmov	r0, r1, d8
 8003498:	f7fd f856 	bl	8000548 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4650      	mov	r0, sl
 80034a2:	4659      	mov	r1, fp
 80034a4:	f7fc fe9a 	bl	80001dc <__adddf3>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	a31d      	add	r3, pc, #116	; (adr r3, 8003528 <startGyroscopeTask+0x1f8>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f847 	bl	8000548 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4692      	mov	sl, r2
 80034c0:	469b      	mov	fp, r3
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <startGyroscopeTask+0x21c>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fc ffe6 	bl	8000498 <__aeabi_f2d>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	ec43 2b10 	vmov	d0, r2, r3
 80034d4:	f005 fee4 	bl	80092a0 <cos>
 80034d8:	ec53 2b10 	vmov	r2, r3, d0
 80034dc:	4650      	mov	r0, sl
 80034de:	4659      	mov	r1, fp
 80034e0:	f7fd f95c 	bl	800079c <__aeabi_ddiv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4640      	mov	r0, r8
 80034ea:	4649      	mov	r1, r9
 80034ec:	f7fc fe76 	bl	80001dc <__adddf3>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	a30d      	add	r3, pc, #52	; (adr r3, 8003530 <startGyroscopeTask+0x200>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fd f823 	bl	8000548 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fc fe67 	bl	80001dc <__adddf3>
 800350e:	4603      	mov	r3, r0
 8003510:	460c      	mov	r4, r1
 8003512:	4618      	mov	r0, r3
 8003514:	4621      	mov	r1, r4
 8003516:	f7fd faef 	bl	8000af8 <__aeabi_d2f>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <startGyroscopeTask+0x228>)
 800351e:	601a      	str	r2, [r3, #0]

		osDelay(SAMPLE_TIME_GYR_MS);
 8003520:	200a      	movs	r0, #10
 8003522:	f004 fd04 	bl	8007f2e <osDelay>
	for (;;) {
 8003526:	e70a      	b.n	800333e <startGyroscopeTask+0xe>
 8003528:	60000000 	.word	0x60000000
 800352c:	3f847ae1 	.word	0x3f847ae1
 8003530:	80000000 	.word	0x80000000
 8003534:	3fefae14 	.word	0x3fefae14
 8003538:	20004514 	.word	0x20004514
 800353c:	200006d8 	.word	0x200006d8
 8003540:	200006dc 	.word	0x200006dc
 8003544:	200046e4 	.word	0x200046e4
 8003548:	3c23d70b 	.word	0x3c23d70b
 800354c:	200048a4 	.word	0x200048a4
 8003550:	20004860 	.word	0x20004860
 8003554:	3c23d70a 	.word	0x3c23d70a
 8003558:	20004510 	.word	0x20004510

0800355c <startMagnetometerTask>:
	}
}

void startMagnetometerTask(void const * argument)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b08e      	sub	sp, #56	; 0x38
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	for (;;) {
		/* Acquire measurements from sensor */
		BMX055_ReadMagnetometer(&imu);
 8003564:	488d      	ldr	r0, [pc, #564]	; (800379c <startMagnetometerTask+0x240>)
 8003566:	f7fd fe9f 	bl	80012a8 <BMX055_ReadMagnetometer>

		/* Convert to unit vector */
		float inorm = 1.0f / sqrt(imu.mag[0] * imu.mag[0] + imu.mag[1] * imu.mag[1] + imu.mag[2] * imu.mag[2]);
 800356a:	4b8c      	ldr	r3, [pc, #560]	; (800379c <startMagnetometerTask+0x240>)
 800356c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003570:	4b8a      	ldr	r3, [pc, #552]	; (800379c <startMagnetometerTask+0x240>)
 8003572:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <startMagnetometerTask+0x240>)
 800357c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8003580:	4b86      	ldr	r3, [pc, #536]	; (800379c <startMagnetometerTask+0x240>)
 8003582:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800358e:	4b83      	ldr	r3, [pc, #524]	; (800379c <startMagnetometerTask+0x240>)
 8003590:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003594:	4b81      	ldr	r3, [pc, #516]	; (800379c <startMagnetometerTask+0x240>)
 8003596:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800359a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a2:	ee17 0a90 	vmov	r0, s15
 80035a6:	f7fc ff77 	bl	8000498 <__aeabi_f2d>
 80035aa:	4603      	mov	r3, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	ec44 3b10 	vmov	d0, r3, r4
 80035b2:	f005 ff03 	bl	80093bc <sqrt>
 80035b6:	ec54 3b10 	vmov	r3, r4, d0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4623      	mov	r3, r4
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	4977      	ldr	r1, [pc, #476]	; (80037a0 <startMagnetometerTask+0x244>)
 80035c4:	f7fd f8ea 	bl	800079c <__aeabi_ddiv>
 80035c8:	4603      	mov	r3, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	4618      	mov	r0, r3
 80035ce:	4621      	mov	r1, r4
 80035d0:	f7fd fa92 	bl	8000af8 <__aeabi_d2f>
 80035d4:	4603      	mov	r3, r0
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
		imu.mag[0] *= inorm;
 80035d8:	4b70      	ldr	r3, [pc, #448]	; (800379c <startMagnetometerTask+0x240>)
 80035da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80035de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <startMagnetometerTask+0x240>)
 80035e8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		imu.mag[1] *= inorm;
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <startMagnetometerTask+0x240>)
 80035ee:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80035f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	4b68      	ldr	r3, [pc, #416]	; (800379c <startMagnetometerTask+0x240>)
 80035fc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		imu.mag[2] *= inorm;
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <startMagnetometerTask+0x240>)
 8003602:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003606:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <startMagnetometerTask+0x240>)
 8003610:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		/* Filter measurements */
		float magFilt[3];
		for (int n = 0; n < 3; n++) {
 8003614:	2300      	movs	r3, #0
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
 8003618:	e01f      	b.n	800365a <startMagnetometerTask+0xfe>
		  magFilt[n] = LPFTwoPole_Update(&lpfMag[n], imu.mag[n]);
 800361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4a5f      	ldr	r2, [pc, #380]	; (80037a4 <startMagnetometerTask+0x248>)
 8003626:	1899      	adds	r1, r3, r2
 8003628:	4a5c      	ldr	r2, [pc, #368]	; (800379c <startMagnetometerTask+0x240>)
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	330a      	adds	r3, #10
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	eeb0 0a67 	vmov.f32	s0, s15
 800363a:	4608      	mov	r0, r1
 800363c:	f7ff f8ec 	bl	8002818 <LPFTwoPole_Update>
 8003640:	eef0 7a40 	vmov.f32	s15, s0
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800364c:	4413      	add	r3, r2
 800364e:	3b2c      	subs	r3, #44	; 0x2c
 8003650:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < 3; n++) {
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	3301      	adds	r3, #1
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365c:	2b02      	cmp	r3, #2
 800365e:	dddc      	ble.n	800361a <startMagnetometerTask+0xbe>
		}

		float sp = sin(ekf.phi);   float cp = cos(ekf.phi);
 8003660:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <startMagnetometerTask+0x24c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff17 	bl	8000498 <__aeabi_f2d>
 800366a:	4603      	mov	r3, r0
 800366c:	460c      	mov	r4, r1
 800366e:	ec44 3b10 	vmov	d0, r3, r4
 8003672:	f005 fe59 	bl	8009328 <sin>
 8003676:	ec54 3b10 	vmov	r3, r4, d0
 800367a:	4618      	mov	r0, r3
 800367c:	4621      	mov	r1, r4
 800367e:	f7fd fa3b 	bl	8000af8 <__aeabi_d2f>
 8003682:	4603      	mov	r3, r0
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003686:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <startMagnetometerTask+0x24c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc ff04 	bl	8000498 <__aeabi_f2d>
 8003690:	4603      	mov	r3, r0
 8003692:	460c      	mov	r4, r1
 8003694:	ec44 3b10 	vmov	d0, r3, r4
 8003698:	f005 fe02 	bl	80092a0 <cos>
 800369c:	ec54 3b10 	vmov	r3, r4, d0
 80036a0:	4618      	mov	r0, r3
 80036a2:	4621      	mov	r1, r4
 80036a4:	f7fd fa28 	bl	8000af8 <__aeabi_d2f>
 80036a8:	4603      	mov	r3, r0
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
		float st = sin(ekf.theta); float ct = cos(ekf.theta);
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <startMagnetometerTask+0x24c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc fef1 	bl	8000498 <__aeabi_f2d>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	ec44 3b10 	vmov	d0, r3, r4
 80036be:	f005 fe33 	bl	8009328 <sin>
 80036c2:	ec54 3b10 	vmov	r3, r4, d0
 80036c6:	4618      	mov	r0, r3
 80036c8:	4621      	mov	r1, r4
 80036ca:	f7fd fa15 	bl	8000af8 <__aeabi_d2f>
 80036ce:	4603      	mov	r3, r0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <startMagnetometerTask+0x24c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fede 	bl	8000498 <__aeabi_f2d>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	ec44 3b10 	vmov	d0, r3, r4
 80036e4:	f005 fddc 	bl	80092a0 <cos>
 80036e8:	ec54 3b10 	vmov	r3, r4, d0
 80036ec:	4618      	mov	r0, r3
 80036ee:	4621      	mov	r1, r4
 80036f0:	f7fd fa02 	bl	8000af8 <__aeabi_d2f>
 80036f4:	4603      	mov	r3, r0
 80036f6:	623b      	str	r3, [r7, #32]

		/* De-rotate readings to flat plane */
		float mx =  magFilt[0] * ct + magFilt[1] * st * sp + magFilt[2] * st * cp;
 80036f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80036fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003704:	edd7 6a04 	vldr	s13, [r7, #16]
 8003708:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800370c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800371c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003720:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003724:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003728:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800372c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003734:	edc7 7a07 	vstr	s15, [r7, #28]
		float my = 					  magFilt[1]	  * cp - magFilt[2]		 * sp;
 8003738:	ed97 7a04 	vldr	s14, [r7, #16]
 800373c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003744:	edd7 6a05 	vldr	s13, [r7, #20]
 8003748:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800374c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003754:	edc7 7a06 	vstr	s15, [r7, #24]
		//float mz = -magFilt[0] * st + magFilt[1] * ct * sp + magFilt[2] * ct * cp;

		/* Estimate yaw angle */
		psiMag = -atan2(my, mx);
 8003758:	69b8      	ldr	r0, [r7, #24]
 800375a:	f7fc fe9d 	bl	8000498 <__aeabi_f2d>
 800375e:	4604      	mov	r4, r0
 8003760:	460d      	mov	r5, r1
 8003762:	69f8      	ldr	r0, [r7, #28]
 8003764:	f7fc fe98 	bl	8000498 <__aeabi_f2d>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	ec43 2b11 	vmov	d1, r2, r3
 8003770:	ec45 4b10 	vmov	d0, r4, r5
 8003774:	f005 fe20 	bl	80093b8 <atan2>
 8003778:	ec54 3b10 	vmov	r3, r4, d0
 800377c:	4618      	mov	r0, r3
 800377e:	4621      	mov	r1, r4
 8003780:	f7fd f9ba 	bl	8000af8 <__aeabi_d2f>
 8003784:	4603      	mov	r3, r0
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef1 7a67 	vneg.f32	s15, s15
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <startMagnetometerTask+0x250>)
 8003790:	edc3 7a00 	vstr	s15, [r3]

		osDelay(SAMPLE_TIME_MAG_MS);
 8003794:	2064      	movs	r0, #100	; 0x64
 8003796:	f004 fbca 	bl	8007f2e <osDelay>
	for (;;) {
 800379a:	e6e3      	b.n	8003564 <startMagnetometerTask+0x8>
 800379c:	20004514 	.word	0x20004514
 80037a0:	3ff00000 	.word	0x3ff00000
 80037a4:	20004780 	.word	0x20004780
 80037a8:	200048a4 	.word	0x200048a4
 80037ac:	20004860 	.word	0x20004860

080037b0 <startRCTask>:
		osDelay(SAMPLE_TIME_BAR_MS);
	}
}
*/

void startRCTask(void const * argument) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	for(;;) {
		/* Filter radio control inputs */
		rcThrottle =  0.001f * LPFTwoPole_Update(&lpfRC[0], (float) pwmOnPeriod[3]) - 1.0f; /* Min:  0, Max: 1 */
 80037b8:	4b9c      	ldr	r3, [pc, #624]	; (8003a2c <startRCTask+0x27c>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c4:	eeb0 0a67 	vmov.f32	s0, s15
 80037c8:	4899      	ldr	r0, [pc, #612]	; (8003a30 <startRCTask+0x280>)
 80037ca:	f7ff f825 	bl	8002818 <LPFTwoPole_Update>
 80037ce:	eeb0 7a40 	vmov.f32	s14, s0
 80037d2:	eddf 7a98 	vldr	s15, [pc, #608]	; 8003a34 <startRCTask+0x284>
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037e2:	4b95      	ldr	r3, [pc, #596]	; (8003a38 <startRCTask+0x288>)
 80037e4:	edc3 7a00 	vstr	s15, [r3]
		rcRoll	   =  0.002f * LPFTwoPole_Update(&lpfRC[1], (float) pwmOnPeriod[1]) - 3.0f; /* Min: -1, Max: 1 */
 80037e8:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <startRCTask+0x27c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	4890      	ldr	r0, [pc, #576]	; (8003a3c <startRCTask+0x28c>)
 80037fa:	f7ff f80d 	bl	8002818 <LPFTwoPole_Update>
 80037fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003802:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8003a40 <startRCTask+0x290>
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800380e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003812:	4b8c      	ldr	r3, [pc, #560]	; (8003a44 <startRCTask+0x294>)
 8003814:	edc3 7a00 	vstr	s15, [r3]
		rcPitch	   = -0.002f * LPFTwoPole_Update(&lpfRC[2], (float) pwmOnPeriod[2]) + 3.0f; /* Min: -1, Max: 1 */
 8003818:	4b84      	ldr	r3, [pc, #528]	; (8003a2c <startRCTask+0x27c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003824:	eeb0 0a67 	vmov.f32	s0, s15
 8003828:	4887      	ldr	r0, [pc, #540]	; (8003a48 <startRCTask+0x298>)
 800382a:	f7fe fff5 	bl	8002818 <LPFTwoPole_Update>
 800382e:	eeb0 7a40 	vmov.f32	s14, s0
 8003832:	eddf 7a86 	vldr	s15, [pc, #536]	; 8003a4c <startRCTask+0x29c>
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800383e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003842:	4b83      	ldr	r3, [pc, #524]	; (8003a50 <startRCTask+0x2a0>)
 8003844:	edc3 7a00 	vstr	s15, [r3]
		rcYaw      =  0.002f * LPFTwoPole_Update(&lpfRC[3], (float) pwmOnPeriod[0]) - 3.0f; /* Min: -1, Max: 1 */
 8003848:	4b78      	ldr	r3, [pc, #480]	; (8003a2c <startRCTask+0x27c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003854:	eeb0 0a67 	vmov.f32	s0, s15
 8003858:	487e      	ldr	r0, [pc, #504]	; (8003a54 <startRCTask+0x2a4>)
 800385a:	f7fe ffdd 	bl	8002818 <LPFTwoPole_Update>
 800385e:	eeb0 7a40 	vmov.f32	s14, s0
 8003862:	eddf 7a77 	vldr	s15, [pc, #476]	; 8003a40 <startRCTask+0x290>
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800386e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003872:	4b79      	ldr	r3, [pc, #484]	; (8003a58 <startRCTask+0x2a8>)
 8003874:	edc3 7a00 	vstr	s15, [r3]

		/* Apply deadband to roll, pitch, and yaw setpoints (to avoid jittering at zero angle setpoints) */
		if (rcRoll >= -RC_DEADBAND && rcRoll <= RC_DEADBAND) {
 8003878:	4b72      	ldr	r3, [pc, #456]	; (8003a44 <startRCTask+0x294>)
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003a5c <startRCTask+0x2ac>
 8003882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388a:	db0d      	blt.n	80038a8 <startRCTask+0xf8>
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <startRCTask+0x294>)
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003a60 <startRCTask+0x2b0>
 8003896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389e:	d803      	bhi.n	80038a8 <startRCTask+0xf8>
			rcRoll = 0.0f;
 80038a0:	4b68      	ldr	r3, [pc, #416]	; (8003a44 <startRCTask+0x294>)
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
		}

		if (rcPitch >= -RC_DEADBAND && rcPitch <= RC_DEADBAND) {
 80038a8:	4b69      	ldr	r3, [pc, #420]	; (8003a50 <startRCTask+0x2a0>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003a5c <startRCTask+0x2ac>
 80038b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ba:	db0d      	blt.n	80038d8 <startRCTask+0x128>
 80038bc:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <startRCTask+0x2a0>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003a60 <startRCTask+0x2b0>
 80038c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ce:	d803      	bhi.n	80038d8 <startRCTask+0x128>
			rcPitch = 0.0f;
 80038d0:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <startRCTask+0x2a0>)
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
		}

		if (rcYaw >= -RC_DEADBAND && rcPitch <= RC_DEADBAND) {
 80038d8:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <startRCTask+0x2a8>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003a5c <startRCTask+0x2ac>
 80038e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ea:	db0d      	blt.n	8003908 <startRCTask+0x158>
 80038ec:	4b58      	ldr	r3, [pc, #352]	; (8003a50 <startRCTask+0x2a0>)
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003a60 <startRCTask+0x2b0>
 80038f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	d803      	bhi.n	8003908 <startRCTask+0x158>
			rcYaw = 0.0f;
 8003900:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <startRCTask+0x2a8>)
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
		}

		/* Constrain values */
		if (rcThrottle < 0.0f) {
 8003908:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <startRCTask+0x288>)
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	d504      	bpl.n	8003922 <startRCTask+0x172>
			rcThrottle = 0.0f;
 8003918:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <startRCTask+0x288>)
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e00d      	b.n	800393e <startRCTask+0x18e>
		} else if (rcThrottle > 1.0f) {
 8003922:	4b45      	ldr	r3, [pc, #276]	; (8003a38 <startRCTask+0x288>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	dd03      	ble.n	800393e <startRCTask+0x18e>
			rcThrottle = 1.0f;
 8003936:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <startRCTask+0x288>)
 8003938:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800393c:	601a      	str	r2, [r3, #0]
		}

		if (rcRoll < -1.0f) {
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <startRCTask+0x294>)
 8003940:	edd3 7a00 	vldr	s15, [r3]
 8003944:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d503      	bpl.n	800395a <startRCTask+0x1aa>
			rcRoll = -1.0f;
 8003952:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <startRCTask+0x294>)
 8003954:	4a43      	ldr	r2, [pc, #268]	; (8003a64 <startRCTask+0x2b4>)
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e00d      	b.n	8003976 <startRCTask+0x1c6>
		} else if (rcRoll > 1.0f) {
 800395a:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <startRCTask+0x294>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	dd03      	ble.n	8003976 <startRCTask+0x1c6>
			rcRoll =  1.0f;
 800396e:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <startRCTask+0x294>)
 8003970:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003974:	601a      	str	r2, [r3, #0]
		}

		if (rcPitch < -1.0f) {
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <startRCTask+0x2a0>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	d503      	bpl.n	8003992 <startRCTask+0x1e2>
			rcPitch = -1.0f;
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <startRCTask+0x2a0>)
 800398c:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <startRCTask+0x2b4>)
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e00d      	b.n	80039ae <startRCTask+0x1fe>
		} else if (rcPitch > 1.0f) {
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <startRCTask+0x2a0>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	dd03      	ble.n	80039ae <startRCTask+0x1fe>
			rcPitch =  1.0f;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <startRCTask+0x2a0>)
 80039a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039ac:	601a      	str	r2, [r3, #0]
		}

		if (rcYaw < -1.0f) {
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <startRCTask+0x2a8>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80039b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	d503      	bpl.n	80039ca <startRCTask+0x21a>
			rcYaw = -1.0f;
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <startRCTask+0x2a8>)
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <startRCTask+0x2b4>)
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e00d      	b.n	80039e6 <startRCTask+0x236>
		} else if (rcYaw > 1.0f) {
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <startRCTask+0x2a8>)
 80039cc:	edd3 7a00 	vldr	s15, [r3]
 80039d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039dc:	dd03      	ble.n	80039e6 <startRCTask+0x236>
			rcYaw =  1.0f;
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <startRCTask+0x2a8>)
 80039e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039e4:	601a      	str	r2, [r3, #0]
		}

		/* Convert RC commands to setpoints */
		rcRoll  *= RC_TO_ROLL_ANGLE_SETPOINT;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <startRCTask+0x294>)
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003a68 <startRCTask+0x2b8>
 80039f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <startRCTask+0x294>)
 80039f6:	edc3 7a00 	vstr	s15, [r3]
		rcPitch *= RC_TO_PITCH_ANGLE_SETPOINT;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <startRCTask+0x2a0>)
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003a68 <startRCTask+0x2b8>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <startRCTask+0x2a0>)
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
		rcYaw   *= RC_TO_YAW_RATE_SETPOINT;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <startRCTask+0x2a8>)
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003a6c <startRCTask+0x2bc>
 8003a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <startRCTask+0x2a8>)
 8003a1e:	edc3 7a00 	vstr	s15, [r3]

		osDelay(SAMPLE_TIME_RC_MS);
 8003a22:	200a      	movs	r0, #10
 8003a24:	f004 fa83 	bl	8007f2e <osDelay>
		rcThrottle =  0.001f * LPFTwoPole_Update(&lpfRC[0], (float) pwmOnPeriod[3]) - 1.0f; /* Min:  0, Max: 1 */
 8003a28:	e6c6      	b.n	80037b8 <startRCTask+0x8>
 8003a2a:	bf00      	nop
 8003a2c:	200006c4 	.word	0x200006c4
 8003a30:	200045e4 	.word	0x200045e4
 8003a34:	3a83126f 	.word	0x3a83126f
 8003a38:	2000472c 	.word	0x2000472c
 8003a3c:	200045fc 	.word	0x200045fc
 8003a40:	3b03126f 	.word	0x3b03126f
 8003a44:	2000469c 	.word	0x2000469c
 8003a48:	20004614 	.word	0x20004614
 8003a4c:	bb03126f 	.word	0xbb03126f
 8003a50:	200044b0 	.word	0x200044b0
 8003a54:	2000462c 	.word	0x2000462c
 8003a58:	20004730 	.word	0x20004730
 8003a5c:	bd4ccccd 	.word	0xbd4ccccd
 8003a60:	3d4ccccd 	.word	0x3d4ccccd
 8003a64:	bf800000 	.word	0xbf800000
 8003a68:	3e32b8c2 	.word	0x3e32b8c2
 8003a6c:	3edf66f3 	.word	0x3edf66f3

08003a70 <startPWMTask>:
	}
}

/* PWM driver: Control motor outputs */
void startPWMTask(void const * argument)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	for(;;) {
		/* Send microsecond settings to PWM driver */
		for (int n = 0; n < 4; n++) {
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e00d      	b.n	8003a9a <startPWMTask+0x2a>
			PCA9685_SetMicros(&pwm, n, pwm.setting[n]);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	b2d9      	uxtb	r1, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <startPWMTask+0x38>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	88db      	ldrh	r3, [r3, #6]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <startPWMTask+0x38>)
 8003a90:	f7fe ffb4 	bl	80029fc <PCA9685_SetMicros>
		for (int n = 0; n < 4; n++) {
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	ddee      	ble.n	8003a7e <startPWMTask+0xe>
		}

		osDelay(SAMPLE_TIME_PWM_MS);
 8003aa0:	2004      	movs	r0, #4
 8003aa2:	f004 fa44 	bl	8007f2e <osDelay>
		for (int n = 0; n < 4; n++) {
 8003aa6:	e7e7      	b.n	8003a78 <startPWMTask+0x8>
 8003aa8:	200047c8 	.word	0x200047c8

08003aac <startControllerTask>:
	}
}

void startControllerTask(void const * argument)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

	for (;;) {
		/* Disable motors if throttle is below threshold */
		if (rcThrottle < 0.1f) {
 8003ab4:	4b83      	ldr	r3, [pc, #524]	; (8003cc4 <startControllerTask+0x218>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003cc8 <startControllerTask+0x21c>
 8003abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	d503      	bpl.n	8003ad0 <startControllerTask+0x24>
			running = 0;
 8003ac8:	4b80      	ldr	r3, [pc, #512]	; (8003ccc <startControllerTask+0x220>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <startControllerTask+0x2a>
		} else {
			running = 1;
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	; (8003ccc <startControllerTask+0x220>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
		}

		/* Calculate throttle PWM value */
		int16_t throttleOutput = (uint16_t) (PWM_THR_LIMIT * rcThrottle);
 8003ad6:	4b7b      	ldr	r3, [pc, #492]	; (8003cc4 <startControllerTask+0x218>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003cd0 <startControllerTask+0x224>
 8003ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae8:	ee17 3a90 	vmov	r3, s15
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	83fb      	strh	r3, [r7, #30]
		if (throttleOutput > PWM_THR_LIMIT) {
 8003af0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003af4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003af8:	dd03      	ble.n	8003b02 <startControllerTask+0x56>
			throttleOutput = PWM_THR_LIMIT;
 8003afa:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003afe:	83fb      	strh	r3, [r7, #30]
 8003b00:	e005      	b.n	8003b0e <startControllerTask+0x62>
		} else if (throttleOutput < 0) {
 8003b02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da01      	bge.n	8003b0e <startControllerTask+0x62>
			throttleOutput = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	83fb      	strh	r3, [r7, #30]
		}

		/* Angle controllers (Desired angle to angular rate) */
		float rollRateSetpoint  = PI_Update(&ctrlRoll,  rcRoll,  ekf.phi,   0.001f * SAMPLE_TIME_CTRL_MS);
 8003b0e:	4b71      	ldr	r3, [pc, #452]	; (8003cd4 <startControllerTask+0x228>)
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	4b70      	ldr	r3, [pc, #448]	; (8003cd8 <startControllerTask+0x22c>)
 8003b16:	ed93 7a00 	vldr	s14, [r3]
 8003b1a:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8003cdc <startControllerTask+0x230>
 8003b1e:	eef0 0a47 	vmov.f32	s1, s14
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	486e      	ldr	r0, [pc, #440]	; (8003ce0 <startControllerTask+0x234>)
 8003b28:	f7ff f801 	bl	8002b2e <PI_Update>
 8003b2c:	ed87 0a04 	vstr	s0, [r7, #16]
		float pitchRateSetpoint = PI_Update(&ctrlPitch, rcPitch, ekf.theta, 0.001f * SAMPLE_TIME_CTRL_MS);
 8003b30:	4b6c      	ldr	r3, [pc, #432]	; (8003ce4 <startControllerTask+0x238>)
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <startControllerTask+0x22c>)
 8003b38:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b3c:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8003cdc <startControllerTask+0x230>
 8003b40:	eef0 0a47 	vmov.f32	s1, s14
 8003b44:	eeb0 0a67 	vmov.f32	s0, s15
 8003b48:	4867      	ldr	r0, [pc, #412]	; (8003ce8 <startControllerTask+0x23c>)
 8003b4a:	f7fe fff0 	bl	8002b2e <PI_Update>
 8003b4e:	ed87 0a03 	vstr	s0, [r7, #12]

		/* Rate controllers (Desired angular rate to force (...to PWM...)) */
		int16_t rollOutput  = (int16_t) (PWM_MICROS_PER_UNIT_FORCE * (CTRL_ROLL_D  * (rollRateSetpoint  - lpfGyr[0].out)));
 8003b52:	4b66      	ldr	r3, [pc, #408]	; (8003cec <startControllerTask+0x240>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b60:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003cf0 <startControllerTask+0x244>
 8003b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b68:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003cf4 <startControllerTask+0x248>
 8003b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	83bb      	strh	r3, [r7, #28]
		int16_t pitchOutput = (int16_t) (PWM_MICROS_PER_UNIT_FORCE * (CTRL_PITCH_D * (pitchRateSetpoint - lpfGyr[1].out)));
 8003b7a:	4b5c      	ldr	r3, [pc, #368]	; (8003cec <startControllerTask+0x240>)
 8003b7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b80:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b88:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003cf0 <startControllerTask+0x244>
 8003b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b90:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003cf4 <startControllerTask+0x248>
 8003b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b9c:	ee17 3a90 	vmov	r3, s15
 8003ba0:	837b      	strh	r3, [r7, #26]

		/* Limit controller PWM values */
		if (rollOutput > 200) {
 8003ba2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ba6:	2bc8      	cmp	r3, #200	; 0xc8
 8003ba8:	dd02      	ble.n	8003bb0 <startControllerTask+0x104>
			rollOutput = 200;
 8003baa:	23c8      	movs	r3, #200	; 0xc8
 8003bac:	83bb      	strh	r3, [r7, #28]
 8003bae:	e007      	b.n	8003bc0 <startControllerTask+0x114>
		} else if (rollOutput < -200) {
 8003bb0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003bb4:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8003bb8:	da02      	bge.n	8003bc0 <startControllerTask+0x114>
			rollOutput = -200;
 8003bba:	f64f 7338 	movw	r3, #65336	; 0xff38
 8003bbe:	83bb      	strh	r3, [r7, #28]
		}

		if (pitchOutput > 200) {
 8003bc0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bc4:	2bc8      	cmp	r3, #200	; 0xc8
 8003bc6:	dd02      	ble.n	8003bce <startControllerTask+0x122>
			pitchOutput = 200;
 8003bc8:	23c8      	movs	r3, #200	; 0xc8
 8003bca:	837b      	strh	r3, [r7, #26]
 8003bcc:	e007      	b.n	8003bde <startControllerTask+0x132>
		} else if (pitchOutput < -200) {
 8003bce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bd2:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8003bd6:	da02      	bge.n	8003bde <startControllerTask+0x132>
			pitchOutput = -200;
 8003bd8:	f64f 7338 	movw	r3, #65336	; 0xff38
 8003bdc:	837b      	strh	r3, [r7, #26]
		}

		if (running == 1) {
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <startControllerTask+0x220>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d159      	bne.n	8003c9a <startControllerTask+0x1ee>
			/* Motor mixing (0 = Front Left, 1 = Front Right, 2 = Rear Right, 3 = Rear Left) */
			pwm.setting[0] = (uint16_t) (PWM_BASE_MICROS + throttleOutput + rollOutput + pitchOutput);
 8003be6:	8bfa      	ldrh	r2, [r7, #30]
 8003be8:	8bbb      	ldrh	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <startControllerTask+0x24c>)
 8003bfc:	80da      	strh	r2, [r3, #6]
			pwm.setting[1] = (uint16_t) (PWM_BASE_MICROS + throttleOutput - rollOutput + pitchOutput);
 8003bfe:	8bfa      	ldrh	r2, [r7, #30]
 8003c00:	8bbb      	ldrh	r3, [r7, #28]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	8b7b      	ldrh	r3, [r7, #26]
 8003c08:	4413      	add	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <startControllerTask+0x24c>)
 8003c14:	811a      	strh	r2, [r3, #8]
			pwm.setting[2] = (uint16_t) (PWM_BASE_MICROS + throttleOutput - rollOutput - pitchOutput);
 8003c16:	8bfa      	ldrh	r2, [r7, #30]
 8003c18:	8bbb      	ldrh	r3, [r7, #28]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	8b7b      	ldrh	r3, [r7, #26]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <startControllerTask+0x24c>)
 8003c2c:	815a      	strh	r2, [r3, #10]
			pwm.setting[3] = (uint16_t) (PWM_BASE_MICROS + throttleOutput + rollOutput - pitchOutput);
 8003c2e:	8bfa      	ldrh	r2, [r7, #30]
 8003c30:	8bbb      	ldrh	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <startControllerTask+0x24c>)
 8003c44:	819a      	strh	r2, [r3, #12]

			/* Limit PWM values */
			for (int n = 0; n < 4; n++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e022      	b.n	8003c92 <startControllerTask+0x1e6>
				if (pwm.setting[n] > PWM_MAX_MICROS) {
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <startControllerTask+0x24c>)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	88db      	ldrh	r3, [r3, #6]
 8003c56:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003c5a:	d907      	bls.n	8003c6c <startControllerTask+0x1c0>
					pwm.setting[n] = PWM_MAX_MICROS;
 8003c5c:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <startControllerTask+0x24c>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003c68:	80da      	strh	r2, [r3, #6]
 8003c6a:	e00f      	b.n	8003c8c <startControllerTask+0x1e0>
				} else if (pwm.setting[n] < PWM_BASE_MICROS) {
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <startControllerTask+0x24c>)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	88db      	ldrh	r3, [r3, #6]
 8003c76:	f240 5213 	movw	r2, #1299	; 0x513
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d806      	bhi.n	8003c8c <startControllerTask+0x1e0>
					pwm.setting[n] = PWM_BASE_MICROS;
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <startControllerTask+0x24c>)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	f240 5214 	movw	r2, #1300	; 0x514
 8003c8a:	80da      	strh	r2, [r3, #6]
			for (int n = 0; n < 4; n++) {
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	ddd9      	ble.n	8003c4c <startControllerTask+0x1a0>
 8003c98:	e00f      	b.n	8003cba <startControllerTask+0x20e>
				}
			}
		} else {
			pwm.setting[0] = 500;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <startControllerTask+0x24c>)
 8003c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ca0:	80da      	strh	r2, [r3, #6]
			pwm.setting[1] = 500;
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <startControllerTask+0x24c>)
 8003ca4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ca8:	811a      	strh	r2, [r3, #8]
			pwm.setting[2] = 500;
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <startControllerTask+0x24c>)
 8003cac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cb0:	815a      	strh	r2, [r3, #10]
			pwm.setting[3] = 500;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <startControllerTask+0x24c>)
 8003cb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cb8:	819a      	strh	r2, [r3, #12]
		}

		osDelay(SAMPLE_TIME_CTRL_MS);
 8003cba:	2004      	movs	r0, #4
 8003cbc:	f004 f937 	bl	8007f2e <osDelay>
	for (;;) {
 8003cc0:	e6f8      	b.n	8003ab4 <startControllerTask+0x8>
 8003cc2:	bf00      	nop
 8003cc4:	2000472c 	.word	0x2000472c
 8003cc8:	3dcccccd 	.word	0x3dcccccd
 8003ccc:	200006d4 	.word	0x200006d4
 8003cd0:	44160000 	.word	0x44160000
 8003cd4:	2000469c 	.word	0x2000469c
 8003cd8:	200048a4 	.word	0x200048a4
 8003cdc:	3b83126f 	.word	0x3b83126f
 8003ce0:	20004434 	.word	0x20004434
 8003ce4:	200044b0 	.word	0x200044b0
 8003ce8:	20004838 	.word	0x20004838
 8003cec:	200046e4 	.word	0x200046e4
 8003cf0:	00000000 	.word	0x00000000
 8003cf4:	42c80000 	.word	0x42c80000
 8003cf8:	200047c8 	.word	0x200047c8

08003cfc <startHeartbeatTask>:
	}
}

/* Heartbeat: Flashes status LED to show system is running */
void startHeartbeatTask(void const * argument)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	for(;;) {
	  HAL_GPIO_TogglePin(GPIOC, LED_D_Pin);
 8003d04:	2108      	movs	r1, #8
 8003d06:	4804      	ldr	r0, [pc, #16]	; (8003d18 <startHeartbeatTask+0x1c>)
 8003d08:	f001 f8e1 	bl	8004ece <HAL_GPIO_TogglePin>
	  osDelay(SAMPLE_TIME_LED_MS);
 8003d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d10:	f004 f90d 	bl	8007f2e <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, LED_D_Pin);
 8003d14:	e7f6      	b.n	8003d04 <startHeartbeatTask+0x8>
 8003d16:	bf00      	nop
 8003d18:	40020800 	.word	0x40020800

08003d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b094      	sub	sp, #80	; 0x50
 8003d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d22:	f107 0320 	add.w	r3, r7, #32
 8003d26:	2230      	movs	r2, #48	; 0x30
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f006 fecc 	bl	800aac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <SystemClock_Config+0xcc>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <SystemClock_Config+0xcc>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <SystemClock_Config+0xcc>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <SystemClock_Config+0xd0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a21      	ldr	r2, [pc, #132]	; (8003dec <SystemClock_Config+0xd0>)
 8003d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <SystemClock_Config+0xd0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d82:	2302      	movs	r3, #2
 8003d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d90:	23a8      	movs	r3, #168	; 0xa8
 8003d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d94:	2302      	movs	r3, #2
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d98:	2304      	movs	r3, #4
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d9c:	f107 0320 	add.w	r3, r7, #32
 8003da0:	4618      	mov	r0, r3
 8003da2:	f002 f875 	bl	8005e90 <HAL_RCC_OscConfig>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003dac:	f000 fa78 	bl	80042a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003db0:	230f      	movs	r3, #15
 8003db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db4:	2302      	movs	r3, #2
 8003db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	2105      	movs	r1, #5
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f002 face 	bl	8006370 <HAL_RCC_ClockConfig>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003dda:	f000 fa61 	bl	80042a0 <Error_Handler>
  }
}
 8003dde:	bf00      	nop
 8003de0:	3750      	adds	r7, #80	; 0x50
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40007000 	.word	0x40007000

08003df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003df6:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <MX_I2C1_Init+0x54>)
 8003df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <MX_I2C1_Init+0x58>)
 8003dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e2c:	4804      	ldr	r0, [pc, #16]	; (8003e40 <MX_I2C1_Init+0x50>)
 8003e2e:	f001 f88d 	bl	8004f4c <HAL_I2C_Init>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e38:	f000 fa32 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	2000458c 	.word	0x2000458c
 8003e44:	40005400 	.word	0x40005400
 8003e48:	000186a0 	.word	0x000186a0

08003e4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <MX_I2C3_Init+0x54>)
 8003e54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003e56:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e58:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <MX_I2C3_Init+0x58>)
 8003e5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003e88:	4804      	ldr	r0, [pc, #16]	; (8003e9c <MX_I2C3_Init+0x50>)
 8003e8a:	f001 f85f 	bl	8004f4c <HAL_I2C_Init>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003e94:	f000 fa04 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	2000445c 	.word	0x2000445c
 8003ea0:	40005c00 	.word	0x40005c00
 8003ea4:	000186a0 	.word	0x000186a0

08003ea8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <MX_SPI1_Init+0x68>)
 8003eb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ef8:	4804      	ldr	r0, [pc, #16]	; (8003f0c <MX_SPI1_Init+0x64>)
 8003efa:	f002 fc5b 	bl	80067b4 <HAL_SPI_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f04:	f000 f9cc 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200047e0 	.word	0x200047e0
 8003f10:	40013000 	.word	0x40013000

08003f14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <MX_SPI2_Init+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f60:	220a      	movs	r2, #10
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f64:	4804      	ldr	r0, [pc, #16]	; (8003f78 <MX_SPI2_Init+0x64>)
 8003f66:	f002 fc25 	bl	80067b4 <HAL_SPI_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f70:	f000 f996 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200044b4 	.word	0x200044b4
 8003f7c:	40003800 	.word	0x40003800

08003f80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <MX_SPI3_Init+0x68>)
 8003f88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fcc:	220a      	movs	r2, #10
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <MX_SPI3_Init+0x64>)
 8003fd2:	f002 fbef 	bl	80067b4 <HAL_SPI_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003fdc:	f000 f960 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20004644 	.word	0x20004644
 8003fe8:	40003c00 	.word	0x40003c00

08003fec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <MX_USART1_UART_Init+0x50>)
 8003ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8003ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8004012:	220c      	movs	r2, #12
 8004014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004022:	4805      	ldr	r0, [pc, #20]	; (8004038 <MX_USART1_UART_Init+0x4c>)
 8004024:	f003 fb4e 	bl	80076c4 <HAL_UART_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800402e:	f000 f937 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	200046a4 	.word	0x200046a4
 800403c:	40011000 	.word	0x40011000

08004040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <MX_USART2_UART_Init+0x50>)
 8004048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <MX_USART2_UART_Init+0x4c>)
 800404c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <MX_USART2_UART_Init+0x4c>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <MX_USART2_UART_Init+0x4c>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004076:	4805      	ldr	r0, [pc, #20]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004078:	f003 fb24 	bl	80076c4 <HAL_UART_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004082:	f000 f90d 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20004864 	.word	0x20004864
 8004090:	40004400 	.word	0x40004400

08004094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <MX_USART3_UART_Init+0x50>)
 800409c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040ba:	220c      	movs	r2, #12
 80040bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040cc:	f003 fafa 	bl	80076c4 <HAL_UART_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040d6:	f000 f8e3 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	2000454c 	.word	0x2000454c
 80040e4:	40004800 	.word	0x40004800

080040e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	4b59      	ldr	r3, [pc, #356]	; (8004268 <MX_GPIO_Init+0x180>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a58      	ldr	r2, [pc, #352]	; (8004268 <MX_GPIO_Init+0x180>)
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b56      	ldr	r3, [pc, #344]	; (8004268 <MX_GPIO_Init+0x180>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	4b52      	ldr	r3, [pc, #328]	; (8004268 <MX_GPIO_Init+0x180>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a51      	ldr	r2, [pc, #324]	; (8004268 <MX_GPIO_Init+0x180>)
 8004124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <MX_GPIO_Init+0x180>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <MX_GPIO_Init+0x180>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a4a      	ldr	r2, [pc, #296]	; (8004268 <MX_GPIO_Init+0x180>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b48      	ldr	r3, [pc, #288]	; (8004268 <MX_GPIO_Init+0x180>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	4b44      	ldr	r3, [pc, #272]	; (8004268 <MX_GPIO_Init+0x180>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4a43      	ldr	r2, [pc, #268]	; (8004268 <MX_GPIO_Init+0x180>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	6313      	str	r3, [r2, #48]	; 0x30
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <MX_GPIO_Init+0x180>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin 
 800416e:	2200      	movs	r2, #0
 8004170:	f240 117f 	movw	r1, #383	; 0x17f
 8004174:	483d      	ldr	r0, [pc, #244]	; (800426c <MX_GPIO_Init+0x184>)
 8004176:	f000 fe91 	bl	8004e9c <HAL_GPIO_WritePin>
                          |FLASH_NWP_Pin|FLASH_NHOLD_Pin|SPI2_CS_Pin|BAR_NRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	2110      	movs	r1, #16
 800417e:	483c      	ldr	r0, [pc, #240]	; (8004270 <MX_GPIO_Init+0x188>)
 8004180:	f000 fe8c 	bl	8004e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI3_CSACC_Pin|SPI3_CSGYR_Pin|SPI3_CSMAG_Pin, GPIO_PIN_RESET);
 8004184:	2200      	movs	r2, #0
 8004186:	2138      	movs	r1, #56	; 0x38
 8004188:	483a      	ldr	r0, [pc, #232]	; (8004274 <MX_GPIO_Init+0x18c>)
 800418a:	f000 fe87 	bl	8004e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin INT_MAG_Pin INT_BAR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin|INT_MAG_Pin|INT_BAR_Pin;
 800418e:	f24e 0380 	movw	r3, #57472	; 0xe080
 8004192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4832      	ldr	r0, [pc, #200]	; (800426c <MX_GPIO_Init+0x184>)
 80041a4:	f000 fce0 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin 
                           FLASH_NWP_Pin FLASH_NHOLD_Pin SPI2_CS_Pin BAR_NRST_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin 
 80041a8:	f240 137f 	movw	r3, #383	; 0x17f
 80041ac:	617b      	str	r3, [r7, #20]
                          |FLASH_NWP_Pin|FLASH_NHOLD_Pin|SPI2_CS_Pin|BAR_NRST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ba:	f107 0314 	add.w	r3, r7, #20
 80041be:	4619      	mov	r1, r3
 80041c0:	482a      	ldr	r0, [pc, #168]	; (800426c <MX_GPIO_Init+0x184>)
 80041c2:	f000 fcd1 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RC1_Pin RC2_Pin */
  GPIO_InitStruct.Pin = RC1_Pin|RC2_Pin;
 80041c6:	2303      	movs	r3, #3
 80041c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80041ca:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <MX_GPIO_Init+0x190>)
 80041cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4619      	mov	r1, r3
 80041d8:	4825      	ldr	r0, [pc, #148]	; (8004270 <MX_GPIO_Init+0x188>)
 80041da:	f000 fcc5 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80041de:	2310      	movs	r3, #16
 80041e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	4619      	mov	r1, r3
 80041f4:	481e      	ldr	r0, [pc, #120]	; (8004270 <MX_GPIO_Init+0x188>)
 80041f6:	f000 fcb7 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_CSACC_Pin SPI3_CSGYR_Pin SPI3_CSMAG_Pin */
  GPIO_InitStruct.Pin = SPI3_CSACC_Pin|SPI3_CSGYR_Pin|SPI3_CSMAG_Pin;
 80041fa:	2338      	movs	r3, #56	; 0x38
 80041fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041fe:	2301      	movs	r3, #1
 8004200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	4619      	mov	r1, r3
 8004210:	4818      	ldr	r0, [pc, #96]	; (8004274 <MX_GPIO_Init+0x18c>)
 8004212:	f000 fca9 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RC3_Pin RC4_Pin */
  GPIO_InitStruct.Pin = RC3_Pin|RC4_Pin;
 8004216:	23c0      	movs	r3, #192	; 0xc0
 8004218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800421a:	4b17      	ldr	r3, [pc, #92]	; (8004278 <MX_GPIO_Init+0x190>)
 800421c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	4619      	mov	r1, r3
 8004228:	4812      	ldr	r0, [pc, #72]	; (8004274 <MX_GPIO_Init+0x18c>)
 800422a:	f000 fc9d 	bl	8004b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	2105      	movs	r1, #5
 8004232:	2006      	movs	r0, #6
 8004234:	f000 fc6e 	bl	8004b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004238:	2006      	movs	r0, #6
 800423a:	f000 fc87 	bl	8004b4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2105      	movs	r1, #5
 8004242:	2007      	movs	r0, #7
 8004244:	f000 fc66 	bl	8004b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004248:	2007      	movs	r0, #7
 800424a:	f000 fc7f 	bl	8004b4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2105      	movs	r1, #5
 8004252:	2017      	movs	r0, #23
 8004254:	f000 fc5e 	bl	8004b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004258:	2017      	movs	r0, #23
 800425a:	f000 fc77 	bl	8004b4c <HAL_NVIC_EnableIRQ>

}
 800425e:	bf00      	nop
 8004260:	3728      	adds	r7, #40	; 0x28
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	40020800 	.word	0x40020800
 8004270:	40020000 	.word	0x40020000
 8004274:	40020400 	.word	0x40020400
 8004278:	10310000 	.word	0x10310000

0800427c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800428e:	f000 fb47 	bl	8004920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40001000 	.word	0x40001000

080042a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_MspInit+0x54>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	4a11      	ldr	r2, [pc, #68]	; (8004304 <HAL_MspInit+0x54>)
 80042c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c4:	6453      	str	r3, [r2, #68]	; 0x44
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_MspInit+0x54>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_MspInit+0x54>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_MspInit+0x54>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_MspInit+0x54>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	210f      	movs	r1, #15
 80042f2:	f06f 0001 	mvn.w	r0, #1
 80042f6:	f000 fc0d 	bl	8004b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08c      	sub	sp, #48	; 0x30
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	f107 031c 	add.w	r3, r7, #28
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a42      	ldr	r2, [pc, #264]	; (8004430 <HAL_I2C_MspInit+0x128>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d12d      	bne.n	8004386 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	6313      	str	r3, [r2, #48]	; 0x30
 800433a:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800434a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800434c:	2312      	movs	r3, #18
 800434e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004350:	2301      	movs	r3, #1
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	2303      	movs	r3, #3
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004358:	2304      	movs	r3, #4
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	4619      	mov	r1, r3
 8004362:	4835      	ldr	r0, [pc, #212]	; (8004438 <HAL_I2C_MspInit+0x130>)
 8004364:	f000 fc00 	bl	8004b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	4a30      	ldr	r2, [pc, #192]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 8004372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004376:	6413      	str	r3, [r2, #64]	; 0x40
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004384:	e050      	b.n	8004428 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_I2C_MspInit+0x134>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d14b      	bne.n	8004428 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	4b27      	ldr	r3, [pc, #156]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4a26      	ldr	r2, [pc, #152]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6313      	str	r3, [r2, #48]	; 0x30
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6313      	str	r3, [r2, #48]	; 0x30
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043ce:	2312      	movs	r3, #18
 80043d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043d2:	2301      	movs	r3, #1
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d6:	2303      	movs	r3, #3
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043da:	2304      	movs	r3, #4
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	4619      	mov	r1, r3
 80043e4:	4816      	ldr	r0, [pc, #88]	; (8004440 <HAL_I2C_MspInit+0x138>)
 80043e6:	f000 fbbf 	bl	8004b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043f0:	2312      	movs	r3, #18
 80043f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043f4:	2301      	movs	r3, #1
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f8:	2303      	movs	r3, #3
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043fc:	2304      	movs	r3, #4
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	4619      	mov	r1, r3
 8004406:	480f      	ldr	r0, [pc, #60]	; (8004444 <HAL_I2C_MspInit+0x13c>)
 8004408:	f000 fbae 	bl	8004b68 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 8004416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800441a:	6413      	str	r3, [r2, #64]	; 0x40
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_I2C_MspInit+0x12c>)
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
}
 8004428:	bf00      	nop
 800442a:	3730      	adds	r7, #48	; 0x30
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40005400 	.word	0x40005400
 8004434:	40023800 	.word	0x40023800
 8004438:	40020400 	.word	0x40020400
 800443c:	40005c00 	.word	0x40005c00
 8004440:	40020800 	.word	0x40020800
 8004444:	40020000 	.word	0x40020000

08004448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	; 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a4c      	ldr	r2, [pc, #304]	; (8004598 <HAL_SPI_MspInit+0x150>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d12c      	bne.n	80044c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	4b4b      	ldr	r3, [pc, #300]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	4a4a      	ldr	r2, [pc, #296]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004478:	6453      	str	r3, [r2, #68]	; 0x44
 800447a:	4b48      	ldr	r3, [pc, #288]	; (800459c <HAL_SPI_MspInit+0x154>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_SPI_MspInit+0x154>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a43      	ldr	r2, [pc, #268]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80044a2:	23e0      	movs	r3, #224	; 0xe0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044b2:	2305      	movs	r3, #5
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ba:	4619      	mov	r1, r3
 80044bc:	4838      	ldr	r0, [pc, #224]	; (80045a0 <HAL_SPI_MspInit+0x158>)
 80044be:	f000 fb53 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80044c2:	e064      	b.n	800458e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <HAL_SPI_MspInit+0x15c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d12d      	bne.n	800452a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	4b32      	ldr	r3, [pc, #200]	; (800459c <HAL_SPI_MspInit+0x154>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a31      	ldr	r2, [pc, #196]	; (800459c <HAL_SPI_MspInit+0x154>)
 80044d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <HAL_SPI_MspInit+0x154>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_SPI_MspInit+0x154>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4a2a      	ldr	r2, [pc, #168]	; (800459c <HAL_SPI_MspInit+0x154>)
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30
 80044fa:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_SPI_MspInit+0x154>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004506:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004514:	2303      	movs	r3, #3
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004518:	2305      	movs	r3, #5
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004520:	4619      	mov	r1, r3
 8004522:	4821      	ldr	r0, [pc, #132]	; (80045a8 <HAL_SPI_MspInit+0x160>)
 8004524:	f000 fb20 	bl	8004b68 <HAL_GPIO_Init>
}
 8004528:	e031      	b.n	800458e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <HAL_SPI_MspInit+0x164>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d12c      	bne.n	800458e <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_SPI_MspInit+0x154>)
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_SPI_MspInit+0x154>)
 800453e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004542:	6413      	str	r3, [r2, #64]	; 0x40
 8004544:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	4a10      	ldr	r2, [pc, #64]	; (800459c <HAL_SPI_MspInit+0x154>)
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	6313      	str	r3, [r2, #48]	; 0x30
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_SPI_MspInit+0x154>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800456c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800457e:	2306      	movs	r3, #6
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004586:	4619      	mov	r1, r3
 8004588:	4809      	ldr	r0, [pc, #36]	; (80045b0 <HAL_SPI_MspInit+0x168>)
 800458a:	f000 faed 	bl	8004b68 <HAL_GPIO_Init>
}
 800458e:	bf00      	nop
 8004590:	3738      	adds	r7, #56	; 0x38
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40013000 	.word	0x40013000
 800459c:	40023800 	.word	0x40023800
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40003800 	.word	0x40003800
 80045a8:	40020400 	.word	0x40020400
 80045ac:	40003c00 	.word	0x40003c00
 80045b0:	40020800 	.word	0x40020800

080045b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0b      	ldr	r2, [pc, #44]	; (80045f0 <HAL_TIM_Base_MspInit+0x3c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10d      	bne.n	80045e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_TIM_Base_MspInit+0x40>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_TIM_Base_MspInit+0x40>)
 80045d0:	f043 0308 	orr.w	r3, r3, #8
 80045d4:	6413      	str	r3, [r2, #64]	; 0x40
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_TIM_Base_MspInit+0x40>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40023800 	.word	0x40023800

080045f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08e      	sub	sp, #56	; 0x38
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	609a      	str	r2, [r3, #8]
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <HAL_UART_MspInit+0x150>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d12d      	bne.n	8004676 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_UART_MspInit+0x154>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	4a4a      	ldr	r2, [pc, #296]	; (800474c <HAL_UART_MspInit+0x154>)
 8004624:	f043 0310 	orr.w	r3, r3, #16
 8004628:	6453      	str	r3, [r2, #68]	; 0x44
 800462a:	4b48      	ldr	r3, [pc, #288]	; (800474c <HAL_UART_MspInit+0x154>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	4b44      	ldr	r3, [pc, #272]	; (800474c <HAL_UART_MspInit+0x154>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_UART_MspInit+0x154>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6313      	str	r3, [r2, #48]	; 0x30
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_UART_MspInit+0x154>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004652:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800465c:	2301      	movs	r3, #1
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004660:	2303      	movs	r3, #3
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004664:	2307      	movs	r3, #7
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800466c:	4619      	mov	r1, r3
 800466e:	4838      	ldr	r0, [pc, #224]	; (8004750 <HAL_UART_MspInit+0x158>)
 8004670:	f000 fa7a 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004674:	e063      	b.n	800473e <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a36      	ldr	r2, [pc, #216]	; (8004754 <HAL_UART_MspInit+0x15c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d12c      	bne.n	80046da <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <HAL_UART_MspInit+0x154>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	4a30      	ldr	r2, [pc, #192]	; (800474c <HAL_UART_MspInit+0x154>)
 800468a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468e:	6413      	str	r3, [r2, #64]	; 0x40
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_UART_MspInit+0x154>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_UART_MspInit+0x154>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	4a29      	ldr	r2, [pc, #164]	; (800474c <HAL_UART_MspInit+0x154>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6313      	str	r3, [r2, #48]	; 0x30
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_UART_MspInit+0x154>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046b8:	230c      	movs	r3, #12
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046bc:	2302      	movs	r3, #2
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046c0:	2301      	movs	r3, #1
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c4:	2303      	movs	r3, #3
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046c8:	2307      	movs	r3, #7
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	4619      	mov	r1, r3
 80046d2:	481f      	ldr	r0, [pc, #124]	; (8004750 <HAL_UART_MspInit+0x158>)
 80046d4:	f000 fa48 	bl	8004b68 <HAL_GPIO_Init>
}
 80046d8:	e031      	b.n	800473e <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_UART_MspInit+0x160>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d12c      	bne.n	800473e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046e4:	2300      	movs	r3, #0
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_UART_MspInit+0x154>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_UART_MspInit+0x154>)
 80046ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f2:	6413      	str	r3, [r2, #64]	; 0x40
 80046f4:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_UART_MspInit+0x154>)
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_UART_MspInit+0x154>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	4a10      	ldr	r2, [pc, #64]	; (800474c <HAL_UART_MspInit+0x154>)
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	6313      	str	r3, [r2, #48]	; 0x30
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_UART_MspInit+0x154>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800471c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004722:	2302      	movs	r3, #2
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004726:	2301      	movs	r3, #1
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472a:	2303      	movs	r3, #3
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800472e:	2307      	movs	r3, #7
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004736:	4619      	mov	r1, r3
 8004738:	4808      	ldr	r0, [pc, #32]	; (800475c <HAL_UART_MspInit+0x164>)
 800473a:	f000 fa15 	bl	8004b68 <HAL_GPIO_Init>
}
 800473e:	bf00      	nop
 8004740:	3738      	adds	r7, #56	; 0x38
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40011000 	.word	0x40011000
 800474c:	40023800 	.word	0x40023800
 8004750:	40020000 	.word	0x40020000
 8004754:	40004400 	.word	0x40004400
 8004758:	40004800 	.word	0x40004800
 800475c:	40020400 	.word	0x40020400

08004760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08c      	sub	sp, #48	; 0x30
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8004770:	2200      	movs	r2, #0
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	2036      	movs	r0, #54	; 0x36
 8004776:	f000 f9cd 	bl	8004b14 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800477a:	2036      	movs	r0, #54	; 0x36
 800477c:	f000 f9e6 	bl	8004b4c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <HAL_InitTick+0xa4>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_InitTick+0xa4>)
 800478a:	f043 0310 	orr.w	r3, r3, #16
 800478e:	6413      	str	r3, [r2, #64]	; 0x40
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <HAL_InitTick+0xa4>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800479c:	f107 0210 	add.w	r2, r7, #16
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 ffd2 	bl	8006750 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80047ac:	f001 ffa8 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 80047b0:	4603      	mov	r3, r0
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	4a13      	ldr	r2, [pc, #76]	; (8004808 <HAL_InitTick+0xa8>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0c9b      	lsrs	r3, r3, #18
 80047c0:	3b01      	subs	r3, #1
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_InitTick+0xac>)
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <HAL_InitTick+0xb0>)
 80047c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_InitTick+0xac>)
 80047cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80047d2:	4a0e      	ldr	r2, [pc, #56]	; (800480c <HAL_InitTick+0xac>)
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HAL_InitTick+0xac>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_InitTick+0xac>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80047e4:	4809      	ldr	r0, [pc, #36]	; (800480c <HAL_InitTick+0xac>)
 80047e6:	f002 fd39 	bl	800725c <HAL_TIM_Base_Init>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80047f0:	4806      	ldr	r0, [pc, #24]	; (800480c <HAL_InitTick+0xac>)
 80047f2:	f002 fd5e 	bl	80072b2 <HAL_TIM_Base_Start_IT>
 80047f6:	4603      	mov	r3, r0
 80047f8:	e000      	b.n	80047fc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3730      	adds	r7, #48	; 0x30
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	431bde83 	.word	0x431bde83
 800480c:	200048ec 	.word	0x200048ec
 8004810:	40001000 	.word	0x40001000

08004814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004826:	e7fe      	b.n	8004826 <HardFault_Handler+0x4>

08004828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800482c:	e7fe      	b.n	800482c <MemManage_Handler+0x4>

0800482e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004832:	e7fe      	b.n	8004832 <BusFault_Handler+0x4>

08004834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004838:	e7fe      	b.n	8004838 <UsageFault_Handler+0x4>

0800483a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800484c:	4802      	ldr	r0, [pc, #8]	; (8004858 <TIM6_DAC_IRQHandler+0x10>)
 800484e:	f002 fd54 	bl	80072fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200048ec 	.word	0x200048ec

0800485c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004860:	4b08      	ldr	r3, [pc, #32]	; (8004884 <SystemInit+0x28>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <SystemInit+0x28>)
 8004868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800486c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <SystemInit+0x28>)
 8004872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004876:	609a      	str	r2, [r3, #8]
#endif
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800488c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800488e:	e003      	b.n	8004898 <LoopCopyDataInit>

08004890 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004892:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004894:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004896:	3104      	adds	r1, #4

08004898 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004898:	480b      	ldr	r0, [pc, #44]	; (80048c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800489c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800489e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048a0:	d3f6      	bcc.n	8004890 <CopyDataInit>
  ldr  r2, =_sbss
 80048a2:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048a4:	e002      	b.n	80048ac <LoopFillZerobss>

080048a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048a8:	f842 3b04 	str.w	r3, [r2], #4

080048ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048b0:	d3f9      	bcc.n	80048a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048b2:	f7ff ffd3 	bl	800485c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048b6:	f006 f8e3 	bl	800aa80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048ba:	f7fe fad5 	bl	8002e68 <main>
  bx  lr    
 80048be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80048c4:	0800af80 	.word	0x0800af80
  ldr  r0, =_sdata
 80048c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048cc:	20000444 	.word	0x20000444
  ldr  r2, =_sbss
 80048d0:	20000444 	.word	0x20000444
  ldr  r3, = _ebss
 80048d4:	2000493c 	.word	0x2000493c

080048d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048d8:	e7fe      	b.n	80048d8 <ADC_IRQHandler>
	...

080048dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_Init+0x40>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <HAL_Init+0x40>)
 80048e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_Init+0x40>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <HAL_Init+0x40>)
 80048f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048f8:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_Init+0x40>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_Init+0x40>)
 80048fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004904:	2003      	movs	r0, #3
 8004906:	f000 f8fa 	bl	8004afe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800490a:	2000      	movs	r0, #0
 800490c:	f7ff ff28 	bl	8004760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004910:	f7ff fcce 	bl	80042b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023c00 	.word	0x40023c00

08004920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_IncTick+0x20>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_IncTick+0x24>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4413      	add	r3, r2
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_IncTick+0x24>)
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000008 	.word	0x20000008
 8004944:	2000492c 	.word	0x2000492c

08004948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return uwTick;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_GetTick+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	2000492c 	.word	0x2000492c

08004960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004968:	f7ff ffee 	bl	8004948 <HAL_GetTick>
 800496c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d005      	beq.n	8004986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_Delay+0x40>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004986:	bf00      	nop
 8004988:	f7ff ffde 	bl	8004948 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	429a      	cmp	r2, r3
 8004996:	d8f7      	bhi.n	8004988 <HAL_Delay+0x28>
  {
  }
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000008 	.word	0x20000008

080049a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <__NVIC_SetPriorityGrouping+0x44>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049c0:	4013      	ands	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d6:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <__NVIC_SetPriorityGrouping+0x44>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	60d3      	str	r3, [r2, #12]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <__NVIC_GetPriorityGrouping+0x18>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 0307 	and.w	r3, r3, #7
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	db0b      	blt.n	8004a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	f003 021f 	and.w	r2, r3, #31
 8004a20:	4907      	ldr	r1, [pc, #28]	; (8004a40 <__NVIC_EnableIRQ+0x38>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2001      	movs	r0, #1
 8004a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e100 	.word	0xe000e100

08004a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	db0a      	blt.n	8004a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	490c      	ldr	r1, [pc, #48]	; (8004a90 <__NVIC_SetPriority+0x4c>)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	0112      	lsls	r2, r2, #4
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	440b      	add	r3, r1
 8004a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a6c:	e00a      	b.n	8004a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4908      	ldr	r1, [pc, #32]	; (8004a94 <__NVIC_SetPriority+0x50>)
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	440b      	add	r3, r1
 8004a82:	761a      	strb	r2, [r3, #24]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000e100 	.word	0xe000e100
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f1c3 0307 	rsb	r3, r3, #7
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	bf28      	it	cs
 8004ab6:	2304      	movcs	r3, #4
 8004ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d902      	bls.n	8004ac8 <NVIC_EncodePriority+0x30>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3b03      	subs	r3, #3
 8004ac6:	e000      	b.n	8004aca <NVIC_EncodePriority+0x32>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	401a      	ands	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	43d9      	mvns	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	4313      	orrs	r3, r2
         );
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3724      	adds	r7, #36	; 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff4c 	bl	80049a4 <__NVIC_SetPriorityGrouping>
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b26:	f7ff ff61 	bl	80049ec <__NVIC_GetPriorityGrouping>
 8004b2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	6978      	ldr	r0, [r7, #20]
 8004b32:	f7ff ffb1 	bl	8004a98 <NVIC_EncodePriority>
 8004b36:	4602      	mov	r2, r0
 8004b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff80 	bl	8004a44 <__NVIC_SetPriority>
}
 8004b44:	bf00      	nop
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff ff54 	bl	8004a08 <__NVIC_EnableIRQ>
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	; 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e16b      	b.n	8004e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b84:	2201      	movs	r2, #1
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	f040 815a 	bne.w	8004e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_GPIO_Init+0x5a>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb6:	2b11      	cmp	r3, #17
 8004bb8:	d003      	beq.n	8004bc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b12      	cmp	r3, #18
 8004bc0:	d130      	bne.n	8004c24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	2203      	movs	r2, #3
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 0201 	and.w	r2, r3, #1
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	2203      	movs	r2, #3
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0xfc>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b12      	cmp	r3, #18
 8004c62:	d123      	bne.n	8004cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	08da      	lsrs	r2, r3, #3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3208      	adds	r2, #8
 8004c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	220f      	movs	r2, #15
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	08da      	lsrs	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3208      	adds	r2, #8
 8004ca6:	69b9      	ldr	r1, [r7, #24]
 8004ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 0203 	and.w	r2, r3, #3
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80b4 	beq.w	8004e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	4b5f      	ldr	r3, [pc, #380]	; (8004e70 <HAL_GPIO_Init+0x308>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	4a5e      	ldr	r2, [pc, #376]	; (8004e70 <HAL_GPIO_Init+0x308>)
 8004cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	; (8004e70 <HAL_GPIO_Init+0x308>)
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d0a:	4a5a      	ldr	r2, [pc, #360]	; (8004e74 <HAL_GPIO_Init+0x30c>)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	3302      	adds	r3, #2
 8004d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	220f      	movs	r2, #15
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a51      	ldr	r2, [pc, #324]	; (8004e78 <HAL_GPIO_Init+0x310>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02b      	beq.n	8004d8e <HAL_GPIO_Init+0x226>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a50      	ldr	r2, [pc, #320]	; (8004e7c <HAL_GPIO_Init+0x314>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d025      	beq.n	8004d8a <HAL_GPIO_Init+0x222>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a4f      	ldr	r2, [pc, #316]	; (8004e80 <HAL_GPIO_Init+0x318>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01f      	beq.n	8004d86 <HAL_GPIO_Init+0x21e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a4e      	ldr	r2, [pc, #312]	; (8004e84 <HAL_GPIO_Init+0x31c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d019      	beq.n	8004d82 <HAL_GPIO_Init+0x21a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a4d      	ldr	r2, [pc, #308]	; (8004e88 <HAL_GPIO_Init+0x320>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_GPIO_Init+0x216>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a4c      	ldr	r2, [pc, #304]	; (8004e8c <HAL_GPIO_Init+0x324>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00d      	beq.n	8004d7a <HAL_GPIO_Init+0x212>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_GPIO_Init+0x328>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <HAL_GPIO_Init+0x20e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <HAL_GPIO_Init+0x32c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_GPIO_Init+0x20a>
 8004d6e:	2307      	movs	r3, #7
 8004d70:	e00e      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d72:	2308      	movs	r3, #8
 8004d74:	e00c      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d76:	2306      	movs	r3, #6
 8004d78:	e00a      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	e008      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d7e:	2304      	movs	r3, #4
 8004d80:	e006      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d82:	2303      	movs	r3, #3
 8004d84:	e004      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e002      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_GPIO_Init+0x228>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	f002 0203 	and.w	r2, r2, #3
 8004d96:	0092      	lsls	r2, r2, #2
 8004d98:	4093      	lsls	r3, r2
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004da0:	4934      	ldr	r1, [pc, #208]	; (8004e74 <HAL_GPIO_Init+0x30c>)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	3302      	adds	r3, #2
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dae:	4b3a      	ldr	r3, [pc, #232]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dd2:	4a31      	ldr	r2, [pc, #196]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dfc:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e02:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e26:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e50:	4a11      	ldr	r2, [pc, #68]	; (8004e98 <HAL_GPIO_Init+0x330>)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	f67f ae90 	bls.w	8004b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3724      	adds	r7, #36	; 0x24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40013800 	.word	0x40013800
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	40020400 	.word	0x40020400
 8004e80:	40020800 	.word	0x40020800
 8004e84:	40020c00 	.word	0x40020c00
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40021400 	.word	0x40021400
 8004e90:	40021800 	.word	0x40021800
 8004e94:	40021c00 	.word	0x40021c00
 8004e98:	40013c00 	.word	0x40013c00

08004e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eac:	787b      	ldrb	r3, [r7, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004eb8:	e003      	b.n	8004ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	041a      	lsls	r2, r3, #16
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	619a      	str	r2, [r3, #24]
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d104      	bne.n	8004ef2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	041a      	lsls	r2, r3, #16
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004ef0:	e002      	b.n	8004ef8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004ef2:	887a      	ldrh	r2, [r7, #2]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	619a      	str	r2, [r3, #24]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f0e:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d006      	beq.n	8004f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f1a:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f806 	bl	8004f34 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40013c00 	.word	0x40013c00

08004f34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e11f      	b.n	800519e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff f9c8 	bl	8004308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2224      	movs	r2, #36	; 0x24
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f001 fba6 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 8004fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a7b      	ldr	r2, [pc, #492]	; (80051a8 <HAL_I2C_Init+0x25c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d807      	bhi.n	8004fd0 <HAL_I2C_Init+0x84>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a7a      	ldr	r2, [pc, #488]	; (80051ac <HAL_I2C_Init+0x260>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	bf94      	ite	ls
 8004fc8:	2301      	movls	r3, #1
 8004fca:	2300      	movhi	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	e006      	b.n	8004fde <HAL_I2C_Init+0x92>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a77      	ldr	r2, [pc, #476]	; (80051b0 <HAL_I2C_Init+0x264>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bf94      	ite	ls
 8004fd8:	2301      	movls	r3, #1
 8004fda:	2300      	movhi	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0db      	b.n	800519e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a72      	ldr	r2, [pc, #456]	; (80051b4 <HAL_I2C_Init+0x268>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0c9b      	lsrs	r3, r3, #18
 8004ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4a64      	ldr	r2, [pc, #400]	; (80051a8 <HAL_I2C_Init+0x25c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d802      	bhi.n	8005020 <HAL_I2C_Init+0xd4>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	3301      	adds	r3, #1
 800501e:	e009      	b.n	8005034 <HAL_I2C_Init+0xe8>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	4a63      	ldr	r2, [pc, #396]	; (80051b8 <HAL_I2C_Init+0x26c>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	3301      	adds	r3, #1
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	430b      	orrs	r3, r1
 800503a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4956      	ldr	r1, [pc, #344]	; (80051a8 <HAL_I2C_Init+0x25c>)
 8005050:	428b      	cmp	r3, r1
 8005052:	d80d      	bhi.n	8005070 <HAL_I2C_Init+0x124>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1e59      	subs	r1, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005062:	3301      	adds	r3, #1
 8005064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005068:	2b04      	cmp	r3, #4
 800506a:	bf38      	it	cc
 800506c:	2304      	movcc	r3, #4
 800506e:	e04f      	b.n	8005110 <HAL_I2C_Init+0x1c4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d111      	bne.n	800509c <HAL_I2C_Init+0x150>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	1e58      	subs	r0, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	440b      	add	r3, r1
 8005086:	fbb0 f3f3 	udiv	r3, r0, r3
 800508a:	3301      	adds	r3, #1
 800508c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e012      	b.n	80050c2 <HAL_I2C_Init+0x176>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1e58      	subs	r0, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	0099      	lsls	r1, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80050b2:	3301      	adds	r3, #1
 80050b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Init+0x17e>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e022      	b.n	8005110 <HAL_I2C_Init+0x1c4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10e      	bne.n	80050f0 <HAL_I2C_Init+0x1a4>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1e58      	subs	r0, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	440b      	add	r3, r1
 80050e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	e00f      	b.n	8005110 <HAL_I2C_Init+0x1c4>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1e58      	subs	r0, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	0099      	lsls	r1, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	fbb0 f3f3 	udiv	r3, r0, r3
 8005106:	3301      	adds	r3, #1
 8005108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	6809      	ldr	r1, [r1, #0]
 8005114:	4313      	orrs	r3, r2
 8005116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800513e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6911      	ldr	r1, [r2, #16]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	68d2      	ldr	r2, [r2, #12]
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	430b      	orrs	r3, r1
 8005152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	000186a0 	.word	0x000186a0
 80051ac:	001e847f 	.word	0x001e847f
 80051b0:	003d08ff 	.word	0x003d08ff
 80051b4:	431bde83 	.word	0x431bde83
 80051b8:	10624dd3 	.word	0x10624dd3

080051bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	461a      	mov	r2, r3
 80051c8:	460b      	mov	r3, r1
 80051ca:	817b      	strh	r3, [r7, #10]
 80051cc:	4613      	mov	r3, r2
 80051ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7ff fbba 	bl	8004948 <HAL_GetTick>
 80051d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b20      	cmp	r3, #32
 80051e0:	f040 80e0 	bne.w	80053a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2319      	movs	r3, #25
 80051ea:	2201      	movs	r2, #1
 80051ec:	4970      	ldr	r1, [pc, #448]	; (80053b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fc70 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
 80051fc:	e0d3      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_I2C_Master_Transmit+0x50>
 8005208:	2302      	movs	r3, #2
 800520a:	e0cc      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d007      	beq.n	8005232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	; 0x21
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2210      	movs	r2, #16
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	893a      	ldrh	r2, [r7, #8]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a50      	ldr	r2, [pc, #320]	; (80053b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005274:	8979      	ldrh	r1, [r7, #10]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fac2 	bl	8005804 <I2C_MasterRequestWrite>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e08d      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80052a0:	e066      	b.n	8005370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fcea 	bl	8005c80 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e06b      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b04      	cmp	r3, #4
 800530a:	d11b      	bne.n	8005344 <HAL_I2C_Master_Transmit+0x188>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6a39      	ldr	r1, [r7, #32]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fcda 	bl	8005d02 <I2C_WaitOnBTFFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2b04      	cmp	r3, #4
 800535a:	d107      	bne.n	800536c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e01a      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	d194      	bne.n	80052a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	00100002 	.word	0x00100002
 80053b4:	ffff0000 	.word	0xffff0000

080053b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	817b      	strh	r3, [r7, #10]
 80053ca:	460b      	mov	r3, r1
 80053cc:	813b      	strh	r3, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053d2:	f7ff fab9 	bl	8004948 <HAL_GetTick>
 80053d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	f040 8208 	bne.w	80057f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2319      	movs	r3, #25
 80053ec:	2201      	movs	r2, #1
 80053ee:	497b      	ldr	r1, [pc, #492]	; (80055dc <HAL_I2C_Mem_Read+0x224>)
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fb6f 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
 80053fe:	e1fb      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_I2C_Mem_Read+0x56>
 800540a:	2302      	movs	r3, #2
 800540c:	e1f4      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d007      	beq.n	8005434 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2222      	movs	r2, #34	; 0x22
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a5b      	ldr	r2, [pc, #364]	; (80055e0 <HAL_I2C_Mem_Read+0x228>)
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005476:	88f8      	ldrh	r0, [r7, #6]
 8005478:	893a      	ldrh	r2, [r7, #8]
 800547a:	8979      	ldrh	r1, [r7, #10]
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4603      	mov	r3, r0
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fa3e 	bl	8005908 <I2C_RequestMemoryRead>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e1b0      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d113      	bne.n	80054c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e184      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d11b      	bne.n	8005506 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e164      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	2b02      	cmp	r3, #2
 800550c:	d11b      	bne.n	8005546 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	e144      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800555c:	e138      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	2b03      	cmp	r3, #3
 8005564:	f200 80f1 	bhi.w	800574a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556c:	2b01      	cmp	r3, #1
 800556e:	d123      	bne.n	80055b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fc05 	bl	8005d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e139      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055b6:	e10b      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d14e      	bne.n	800565e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2200      	movs	r2, #0
 80055c8:	4906      	ldr	r1, [pc, #24]	; (80055e4 <HAL_I2C_Mem_Read+0x22c>)
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fa82 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e10e      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
 80055da:	bf00      	nop
 80055dc:	00100002 	.word	0x00100002
 80055e0:	ffff0000 	.word	0xffff0000
 80055e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800565c:	e0b8      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2200      	movs	r2, #0
 8005666:	4966      	ldr	r1, [pc, #408]	; (8005800 <HAL_I2C_Mem_Read+0x448>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fa33 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0bf      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2200      	movs	r2, #0
 80056c2:	494f      	ldr	r1, [pc, #316]	; (8005800 <HAL_I2C_Mem_Read+0x448>)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fa05 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e091      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005748:	e042      	b.n	80057d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fb18 	bl	8005d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e04c      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d118      	bne.n	80057d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f aec2 	bne.w	800555e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3728      	adds	r7, #40	; 0x28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	00010004 	.word	0x00010004

08005804 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	460b      	mov	r3, r1
 8005812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d006      	beq.n	800582e <I2C_MasterRequestWrite+0x2a>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d003      	beq.n	800582e <I2C_MasterRequestWrite+0x2a>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800582c:	d108      	bne.n	8005840 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e00b      	b.n	8005858 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	2b12      	cmp	r3, #18
 8005846:	d107      	bne.n	8005858 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f935 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e035      	b.n	80058f6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005892:	d108      	bne.n	80058a6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005894:	897b      	ldrh	r3, [r7, #10]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a2:	611a      	str	r2, [r3, #16]
 80058a4:	e01b      	b.n	80058de <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	11db      	asrs	r3, r3, #7
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 0306 	and.w	r3, r3, #6
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f063 030f 	orn	r3, r3, #15
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	490f      	ldr	r1, [pc, #60]	; (8005900 <I2C_MasterRequestWrite+0xfc>)
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f95c 	bl	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e010      	b.n	80058f6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058d4:	897b      	ldrh	r3, [r7, #10]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	4908      	ldr	r1, [pc, #32]	; (8005904 <I2C_MasterRequestWrite+0x100>)
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f94c 	bl	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	00010008 	.word	0x00010008
 8005904:	00010002 	.word	0x00010002

08005908 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	461a      	mov	r2, r3
 8005916:	4603      	mov	r3, r0
 8005918:	817b      	strh	r3, [r7, #10]
 800591a:	460b      	mov	r3, r1
 800591c:	813b      	strh	r3, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005940:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	2200      	movs	r2, #0
 800594a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f8c0 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00c      	beq.n	8005974 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0a9      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005974:	897b      	ldrh	r3, [r7, #10]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005982:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	4951      	ldr	r1, [pc, #324]	; (8005ad0 <I2C_RequestMemoryRead+0x1c8>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f8f9 	bl	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e096      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	6a39      	ldr	r1, [r7, #32]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f963 	bl	8005c80 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d107      	bne.n	80059d8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e075      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d105      	bne.n	80059ee <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059e2:	893b      	ldrh	r3, [r7, #8]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]
 80059ec:	e021      	b.n	8005a32 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059ee:	893b      	ldrh	r3, [r7, #8]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fe:	6a39      	ldr	r1, [r7, #32]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f93d 	bl	8005c80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d107      	bne.n	8005a24 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e04f      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a28:	893b      	ldrh	r3, [r7, #8]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a34:	6a39      	ldr	r1, [r7, #32]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f922 	bl	8005c80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d107      	bne.n	8005a5a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e034      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f82a 	bl	8005ad4 <I2C_WaitOnFlagUntilTimeout>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00c      	beq.n	8005aa0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e013      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aa0:	897b      	ldrh	r3, [r7, #10]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	6a3a      	ldr	r2, [r7, #32]
 8005ab4:	4906      	ldr	r1, [pc, #24]	; (8005ad0 <I2C_RequestMemoryRead+0x1c8>)
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f863 	bl	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	00010002 	.word	0x00010002

08005ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ae4:	e025      	b.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d021      	beq.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aee:	f7fe ff2b 	bl	8004948 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d116      	bne.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e023      	b.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10d      	bne.n	8005b58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	e00c      	b.n	8005b72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d0b6      	beq.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b90:	e051      	b.n	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d123      	bne.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0204 	orr.w	r2, r3, #4
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e046      	b.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d021      	beq.n	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf2:	f7fe fea9 	bl	8004948 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d302      	bcc.n	8005c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d116      	bne.n	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e020      	b.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10c      	bne.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	43da      	mvns	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	e00b      	b.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	43da      	mvns	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d18d      	bne.n	8005b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c8c:	e02d      	b.n	8005cea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f8ce 	bl	8005e30 <I2C_IsAcknowledgeFailed>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e02d      	b.n	8005cfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d021      	beq.n	8005cea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca6:	f7fe fe4f 	bl	8004948 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d116      	bne.n	8005cea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e007      	b.n	8005cfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	d1ca      	bne.n	8005c8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d0e:	e02d      	b.n	8005d6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f88d 	bl	8005e30 <I2C_IsAcknowledgeFailed>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e02d      	b.n	8005d7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d021      	beq.n	8005d6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fe fe0e 	bl	8004948 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d116      	bne.n	8005d6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e007      	b.n	8005d7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d1ca      	bne.n	8005d10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d90:	e042      	b.n	8005e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d119      	bne.n	8005dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0210 	mvn.w	r2, #16
 8005da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e029      	b.n	8005e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd4:	f7fe fdb8 	bl	8004948 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d116      	bne.n	8005e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e007      	b.n	8005e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d1b5      	bne.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e46:	d11b      	bne.n	8005e80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f043 0204 	orr.w	r2, r3, #4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e25b      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d075      	beq.n	8005f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eae:	4ba3      	ldr	r3, [pc, #652]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eba:	4ba0      	ldr	r3, [pc, #640]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d112      	bne.n	8005eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ec6:	4b9d      	ldr	r3, [pc, #628]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed2:	d10b      	bne.n	8005eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed4:	4b99      	ldr	r3, [pc, #612]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d05b      	beq.n	8005f98 <HAL_RCC_OscConfig+0x108>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d157      	bne.n	8005f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e236      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCC_OscConfig+0x74>
 8005ef6:	4b91      	ldr	r3, [pc, #580]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a90      	ldr	r2, [pc, #576]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e01d      	b.n	8005f40 <HAL_RCC_OscConfig+0xb0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f0c:	d10c      	bne.n	8005f28 <HAL_RCC_OscConfig+0x98>
 8005f0e:	4b8b      	ldr	r3, [pc, #556]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a8a      	ldr	r2, [pc, #552]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4b88      	ldr	r3, [pc, #544]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a87      	ldr	r2, [pc, #540]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e00b      	b.n	8005f40 <HAL_RCC_OscConfig+0xb0>
 8005f28:	4b84      	ldr	r3, [pc, #528]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a83      	ldr	r2, [pc, #524]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4b81      	ldr	r3, [pc, #516]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a80      	ldr	r2, [pc, #512]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d013      	beq.n	8005f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f48:	f7fe fcfe 	bl	8004948 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f50:	f7fe fcfa 	bl	8004948 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b64      	cmp	r3, #100	; 0x64
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e1fb      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	4b76      	ldr	r3, [pc, #472]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0xc0>
 8005f6e:	e014      	b.n	8005f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f70:	f7fe fcea 	bl	8004948 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f78:	f7fe fce6 	bl	8004948 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b64      	cmp	r3, #100	; 0x64
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e1e7      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8a:	4b6c      	ldr	r3, [pc, #432]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0xe8>
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d063      	beq.n	800606e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fa6:	4b65      	ldr	r3, [pc, #404]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fb2:	4b62      	ldr	r3, [pc, #392]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d11c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fbe:	4b5f      	ldr	r3, [pc, #380]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d116      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fca:	4b5c      	ldr	r3, [pc, #368]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x152>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d001      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e1bb      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	4b56      	ldr	r3, [pc, #344]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4952      	ldr	r1, [pc, #328]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ff6:	e03a      	b.n	800606e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d020      	beq.n	8006042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006000:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <HAL_RCC_OscConfig+0x2b0>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006006:	f7fe fc9f 	bl	8004948 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800600e:	f7fe fc9b 	bl	8004948 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e19c      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006020:	4b46      	ldr	r3, [pc, #280]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602c:	4b43      	ldr	r3, [pc, #268]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4940      	ldr	r1, [pc, #256]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]
 8006040:	e015      	b.n	800606e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006042:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <HAL_RCC_OscConfig+0x2b0>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fe fc7e 	bl	8004948 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006050:	f7fe fc7a 	bl	8004948 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e17b      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d030      	beq.n	80060dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006082:	4b30      	ldr	r3, [pc, #192]	; (8006144 <HAL_RCC_OscConfig+0x2b4>)
 8006084:	2201      	movs	r2, #1
 8006086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fe fc5e 	bl	8004948 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006090:	f7fe fc5a 	bl	8004948 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e15b      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a2:	4b26      	ldr	r3, [pc, #152]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0x200>
 80060ae:	e015      	b.n	80060dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060b0:	4b24      	ldr	r3, [pc, #144]	; (8006144 <HAL_RCC_OscConfig+0x2b4>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b6:	f7fe fc47 	bl	8004948 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060be:	f7fe fc43 	bl	8004948 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e144      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 80060d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80a0 	beq.w	800622a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10f      	bne.n	800611a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	4a0e      	ldr	r2, [pc, #56]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 8006104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006108:	6413      	str	r3, [r2, #64]	; 0x40
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <HAL_RCC_OscConfig+0x2ac>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCC_OscConfig+0x2b8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d121      	bne.n	800616a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <HAL_RCC_OscConfig+0x2b8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a07      	ldr	r2, [pc, #28]	; (8006148 <HAL_RCC_OscConfig+0x2b8>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006132:	f7fe fc09 	bl	8004948 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006138:	e011      	b.n	800615e <HAL_RCC_OscConfig+0x2ce>
 800613a:	bf00      	nop
 800613c:	40023800 	.word	0x40023800
 8006140:	42470000 	.word	0x42470000
 8006144:	42470e80 	.word	0x42470e80
 8006148:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614c:	f7fe fbfc 	bl	8004948 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0fd      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615e:	4b81      	ldr	r3, [pc, #516]	; (8006364 <HAL_RCC_OscConfig+0x4d4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d106      	bne.n	8006180 <HAL_RCC_OscConfig+0x2f0>
 8006172:	4b7d      	ldr	r3, [pc, #500]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	4a7c      	ldr	r2, [pc, #496]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	6713      	str	r3, [r2, #112]	; 0x70
 800617e:	e01c      	b.n	80061ba <HAL_RCC_OscConfig+0x32a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b05      	cmp	r3, #5
 8006186:	d10c      	bne.n	80061a2 <HAL_RCC_OscConfig+0x312>
 8006188:	4b77      	ldr	r3, [pc, #476]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	4a76      	ldr	r2, [pc, #472]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	6713      	str	r3, [r2, #112]	; 0x70
 8006194:	4b74      	ldr	r3, [pc, #464]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006198:	4a73      	ldr	r2, [pc, #460]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	6713      	str	r3, [r2, #112]	; 0x70
 80061a0:	e00b      	b.n	80061ba <HAL_RCC_OscConfig+0x32a>
 80061a2:	4b71      	ldr	r3, [pc, #452]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	4a70      	ldr	r2, [pc, #448]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	6713      	str	r3, [r2, #112]	; 0x70
 80061ae:	4b6e      	ldr	r3, [pc, #440]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	4a6d      	ldr	r2, [pc, #436]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80061b4:	f023 0304 	bic.w	r3, r3, #4
 80061b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d015      	beq.n	80061ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c2:	f7fe fbc1 	bl	8004948 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c8:	e00a      	b.n	80061e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ca:	f7fe fbbd 	bl	8004948 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d8:	4293      	cmp	r3, r2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e0bc      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e0:	4b61      	ldr	r3, [pc, #388]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ee      	beq.n	80061ca <HAL_RCC_OscConfig+0x33a>
 80061ec:	e014      	b.n	8006218 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ee:	f7fe fbab 	bl	8004948 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061f4:	e00a      	b.n	800620c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fe fba7 	bl	8004948 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e0a6      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800620c:	4b56      	ldr	r3, [pc, #344]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ee      	bne.n	80061f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800621e:	4b52      	ldr	r3, [pc, #328]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	4a51      	ldr	r2, [pc, #324]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8092 	beq.w	8006358 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006234:	4b4c      	ldr	r3, [pc, #304]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 030c 	and.w	r3, r3, #12
 800623c:	2b08      	cmp	r3, #8
 800623e:	d05c      	beq.n	80062fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d141      	bne.n	80062cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006248:	4b48      	ldr	r3, [pc, #288]	; (800636c <HAL_RCC_OscConfig+0x4dc>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624e:	f7fe fb7b 	bl	8004948 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006256:	f7fe fb77 	bl	8004948 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e078      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006268:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f0      	bne.n	8006256 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	019b      	lsls	r3, r3, #6
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	3b01      	subs	r3, #1
 800628e:	041b      	lsls	r3, r3, #16
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	061b      	lsls	r3, r3, #24
 8006298:	4933      	ldr	r1, [pc, #204]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800629e:	4b33      	ldr	r3, [pc, #204]	; (800636c <HAL_RCC_OscConfig+0x4dc>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7fe fb50 	bl	8004948 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fe fb4c 	bl	8004948 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e04d      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0x41c>
 80062ca:	e045      	b.n	8006358 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062cc:	4b27      	ldr	r3, [pc, #156]	; (800636c <HAL_RCC_OscConfig+0x4dc>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fe fb39 	bl	8004948 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062da:	f7fe fb35 	bl	8004948 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e036      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ec:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f0      	bne.n	80062da <HAL_RCC_OscConfig+0x44a>
 80062f8:	e02e      	b.n	8006358 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e029      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006306:	4b18      	ldr	r3, [pc, #96]	; (8006368 <HAL_RCC_OscConfig+0x4d8>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	429a      	cmp	r2, r3
 8006318:	d11c      	bne.n	8006354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d115      	bne.n	8006354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800632e:	4013      	ands	r3, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006334:	4293      	cmp	r3, r2
 8006336:	d10d      	bne.n	8006354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006342:	429a      	cmp	r2, r3
 8006344:	d106      	bne.n	8006354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40007000 	.word	0x40007000
 8006368:	40023800 	.word	0x40023800
 800636c:	42470060 	.word	0x42470060

08006370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0cc      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006384:	4b68      	ldr	r3, [pc, #416]	; (8006528 <HAL_RCC_ClockConfig+0x1b8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d90c      	bls.n	80063ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006392:	4b65      	ldr	r3, [pc, #404]	; (8006528 <HAL_RCC_ClockConfig+0x1b8>)
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800639a:	4b63      	ldr	r3, [pc, #396]	; (8006528 <HAL_RCC_ClockConfig+0x1b8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d001      	beq.n	80063ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0b8      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d020      	beq.n	80063fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063c4:	4b59      	ldr	r3, [pc, #356]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4a58      	ldr	r2, [pc, #352]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063dc:	4b53      	ldr	r3, [pc, #332]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4a52      	ldr	r2, [pc, #328]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e8:	4b50      	ldr	r3, [pc, #320]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	494d      	ldr	r1, [pc, #308]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d044      	beq.n	8006490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d107      	bne.n	800641e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640e:	4b47      	ldr	r3, [pc, #284]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d119      	bne.n	800644e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e07f      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d003      	beq.n	800642e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800642a:	2b03      	cmp	r3, #3
 800642c:	d107      	bne.n	800643e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800642e:	4b3f      	ldr	r3, [pc, #252]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e06f      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643e:	4b3b      	ldr	r3, [pc, #236]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e067      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 0203 	bic.w	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	4934      	ldr	r1, [pc, #208]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	4313      	orrs	r3, r2
 800645e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006460:	f7fe fa72 	bl	8004948 <HAL_GetTick>
 8006464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006466:	e00a      	b.n	800647e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006468:	f7fe fa6e 	bl	8004948 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	; 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e04f      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647e:	4b2b      	ldr	r3, [pc, #172]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 020c 	and.w	r2, r3, #12
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	429a      	cmp	r2, r3
 800648e:	d1eb      	bne.n	8006468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <HAL_RCC_ClockConfig+0x1b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d20c      	bcs.n	80064b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649e:	4b22      	ldr	r3, [pc, #136]	; (8006528 <HAL_RCC_ClockConfig+0x1b8>)
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	4b20      	ldr	r3, [pc, #128]	; (8006528 <HAL_RCC_ClockConfig+0x1b8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e032      	b.n	800651e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064c4:	4b19      	ldr	r3, [pc, #100]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4916      	ldr	r1, [pc, #88]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	490e      	ldr	r1, [pc, #56]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064f6:	f000 f821 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80064fa:	4601      	mov	r1, r0
 80064fc:	4b0b      	ldr	r3, [pc, #44]	; (800652c <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	091b      	lsrs	r3, r3, #4
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <HAL_RCC_ClockConfig+0x1c0>)
 8006508:	5cd3      	ldrb	r3, [r2, r3]
 800650a:	fa21 f303 	lsr.w	r3, r1, r3
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <HAL_RCC_ClockConfig+0x1c4>)
 8006510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006512:	4b09      	ldr	r3, [pc, #36]	; (8006538 <HAL_RCC_ClockConfig+0x1c8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe f922 	bl	8004760 <HAL_InitTick>

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40023c00 	.word	0x40023c00
 800652c:	40023800 	.word	0x40023800
 8006530:	0800ad30 	.word	0x0800ad30
 8006534:	20000000 	.word	0x20000000
 8006538:	20000004 	.word	0x20000004

0800653c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	2300      	movs	r3, #0
 800654c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006552:	4b63      	ldr	r3, [pc, #396]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b04      	cmp	r3, #4
 800655c:	d007      	beq.n	800656e <HAL_RCC_GetSysClockFreq+0x32>
 800655e:	2b08      	cmp	r3, #8
 8006560:	d008      	beq.n	8006574 <HAL_RCC_GetSysClockFreq+0x38>
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 80b4 	bne.w	80066d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006568:	4b5e      	ldr	r3, [pc, #376]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800656a:	60bb      	str	r3, [r7, #8]
       break;
 800656c:	e0b3      	b.n	80066d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800656e:	4b5d      	ldr	r3, [pc, #372]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006570:	60bb      	str	r3, [r7, #8]
      break;
 8006572:	e0b0      	b.n	80066d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006574:	4b5a      	ldr	r3, [pc, #360]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800657c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800657e:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d04a      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800658a:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	099b      	lsrs	r3, r3, #6
 8006590:	f04f 0400 	mov.w	r4, #0
 8006594:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	ea03 0501 	and.w	r5, r3, r1
 80065a0:	ea04 0602 	and.w	r6, r4, r2
 80065a4:	4629      	mov	r1, r5
 80065a6:	4632      	mov	r2, r6
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	f04f 0400 	mov.w	r4, #0
 80065b0:	0154      	lsls	r4, r2, #5
 80065b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065b6:	014b      	lsls	r3, r1, #5
 80065b8:	4619      	mov	r1, r3
 80065ba:	4622      	mov	r2, r4
 80065bc:	1b49      	subs	r1, r1, r5
 80065be:	eb62 0206 	sbc.w	r2, r2, r6
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	f04f 0400 	mov.w	r4, #0
 80065ca:	0194      	lsls	r4, r2, #6
 80065cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065d0:	018b      	lsls	r3, r1, #6
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	eb64 0402 	sbc.w	r4, r4, r2
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	00e2      	lsls	r2, r4, #3
 80065e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065e6:	00d9      	lsls	r1, r3, #3
 80065e8:	460b      	mov	r3, r1
 80065ea:	4614      	mov	r4, r2
 80065ec:	195b      	adds	r3, r3, r5
 80065ee:	eb44 0406 	adc.w	r4, r4, r6
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	02a2      	lsls	r2, r4, #10
 80065fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006600:	0299      	lsls	r1, r3, #10
 8006602:	460b      	mov	r3, r1
 8006604:	4614      	mov	r4, r2
 8006606:	4618      	mov	r0, r3
 8006608:	4621      	mov	r1, r4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f04f 0400 	mov.w	r4, #0
 8006610:	461a      	mov	r2, r3
 8006612:	4623      	mov	r3, r4
 8006614:	f7fa fac0 	bl	8000b98 <__aeabi_uldivmod>
 8006618:	4603      	mov	r3, r0
 800661a:	460c      	mov	r4, r1
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e049      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006620:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	099b      	lsrs	r3, r3, #6
 8006626:	f04f 0400 	mov.w	r4, #0
 800662a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	ea03 0501 	and.w	r5, r3, r1
 8006636:	ea04 0602 	and.w	r6, r4, r2
 800663a:	4629      	mov	r1, r5
 800663c:	4632      	mov	r2, r6
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	f04f 0400 	mov.w	r4, #0
 8006646:	0154      	lsls	r4, r2, #5
 8006648:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800664c:	014b      	lsls	r3, r1, #5
 800664e:	4619      	mov	r1, r3
 8006650:	4622      	mov	r2, r4
 8006652:	1b49      	subs	r1, r1, r5
 8006654:	eb62 0206 	sbc.w	r2, r2, r6
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	f04f 0400 	mov.w	r4, #0
 8006660:	0194      	lsls	r4, r2, #6
 8006662:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006666:	018b      	lsls	r3, r1, #6
 8006668:	1a5b      	subs	r3, r3, r1
 800666a:	eb64 0402 	sbc.w	r4, r4, r2
 800666e:	f04f 0100 	mov.w	r1, #0
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	00e2      	lsls	r2, r4, #3
 8006678:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800667c:	00d9      	lsls	r1, r3, #3
 800667e:	460b      	mov	r3, r1
 8006680:	4614      	mov	r4, r2
 8006682:	195b      	adds	r3, r3, r5
 8006684:	eb44 0406 	adc.w	r4, r4, r6
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	02a2      	lsls	r2, r4, #10
 8006692:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006696:	0299      	lsls	r1, r3, #10
 8006698:	460b      	mov	r3, r1
 800669a:	4614      	mov	r4, r2
 800669c:	4618      	mov	r0, r3
 800669e:	4621      	mov	r1, r4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f04f 0400 	mov.w	r4, #0
 80066a6:	461a      	mov	r2, r3
 80066a8:	4623      	mov	r3, r4
 80066aa:	f7fa fa75 	bl	8000b98 <__aeabi_uldivmod>
 80066ae:	4603      	mov	r3, r0
 80066b0:	460c      	mov	r4, r1
 80066b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	3301      	adds	r3, #1
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	60bb      	str	r3, [r7, #8]
      break;
 80066ce:	e002      	b.n	80066d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066d0:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066d2:	60bb      	str	r3, [r7, #8]
      break;
 80066d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d6:	68bb      	ldr	r3, [r7, #8]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400

080066e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ee:	681b      	ldr	r3, [r3, #0]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000000 	.word	0x20000000

08006700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006704:	f7ff fff0 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8006708:	4601      	mov	r1, r0
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	0a9b      	lsrs	r3, r3, #10
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	4a03      	ldr	r2, [pc, #12]	; (8006724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006716:	5cd3      	ldrb	r3, [r2, r3]
 8006718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40023800 	.word	0x40023800
 8006724:	0800ad40 	.word	0x0800ad40

08006728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800672c:	f7ff ffdc 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8006730:	4601      	mov	r1, r0
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	0b5b      	lsrs	r3, r3, #13
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4a03      	ldr	r2, [pc, #12]	; (800674c <HAL_RCC_GetPCLK2Freq+0x24>)
 800673e:	5cd3      	ldrb	r3, [r2, r3]
 8006740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40023800 	.word	0x40023800
 800674c:	0800ad40 	.word	0x0800ad40

08006750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	220f      	movs	r2, #15
 800675e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006760:	4b12      	ldr	r3, [pc, #72]	; (80067ac <HAL_RCC_GetClockConfig+0x5c>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0203 	and.w	r2, r3, #3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <HAL_RCC_GetClockConfig+0x5c>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <HAL_RCC_GetClockConfig+0x5c>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <HAL_RCC_GetClockConfig+0x5c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_RCC_GetClockConfig+0x60>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 020f 	and.w	r2, r3, #15
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	601a      	str	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40023800 	.word	0x40023800
 80067b0:	40023c00 	.word	0x40023c00

080067b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e056      	b.n	8006874 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fd fe31 	bl	8004448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	ea42 0103 	orr.w	r1, r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	f003 0104 	and.w	r1, r3, #4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_SPI_Transmit+0x22>
 800689a:	2302      	movs	r3, #2
 800689c:	e11e      	b.n	8006adc <HAL_SPI_Transmit+0x260>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a6:	f7fe f84f 	bl	8004948 <HAL_GetTick>
 80068aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d002      	beq.n	80068c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
 80068be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c0:	e103      	b.n	8006aca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <HAL_SPI_Transmit+0x52>
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d2:	e0fa      	b.n	8006aca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2203      	movs	r2, #3
 80068d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691a:	d107      	bne.n	800692c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800692a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d007      	beq.n	800694a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006948:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006952:	d14b      	bne.n	80069ec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_SPI_Transmit+0xe6>
 800695c:	8afb      	ldrh	r3, [r7, #22]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d13e      	bne.n	80069e0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	881a      	ldrh	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	1c9a      	adds	r2, r3, #2
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006986:	e02b      	b.n	80069e0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d112      	bne.n	80069bc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80069ba:	e011      	b.n	80069e0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069bc:	f7fd ffc4 	bl	8004948 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d803      	bhi.n	80069d4 <HAL_SPI_Transmit+0x158>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d102      	bne.n	80069da <HAL_SPI_Transmit+0x15e>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069de:	e074      	b.n	8006aca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1ce      	bne.n	8006988 <HAL_SPI_Transmit+0x10c>
 80069ea:	e04c      	b.n	8006a86 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_SPI_Transmit+0x17e>
 80069f4:	8afb      	ldrh	r3, [r7, #22]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d140      	bne.n	8006a7c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	7812      	ldrb	r2, [r2, #0]
 8006a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a20:	e02c      	b.n	8006a7c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d113      	bne.n	8006a58 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a56:	e011      	b.n	8006a7c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a58:	f7fd ff76 	bl	8004948 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d803      	bhi.n	8006a70 <HAL_SPI_Transmit+0x1f4>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d102      	bne.n	8006a76 <HAL_SPI_Transmit+0x1fa>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a7a:	e026      	b.n	8006aca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1cd      	bne.n	8006a22 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fba4 	bl	80071d8 <SPI_EndRxTxTransaction>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e000      	b.n	8006aca <HAL_SPI_Transmit+0x24e>
  }

error:
 8006ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b00:	d112      	bne.n	8006b28 <HAL_SPI_Receive+0x44>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10e      	bne.n	8006b28 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f8e9 	bl	8006cf6 <HAL_SPI_TransmitReceive>
 8006b24:	4603      	mov	r3, r0
 8006b26:	e0e2      	b.n	8006cee <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_SPI_Receive+0x52>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e0db      	b.n	8006cee <HAL_SPI_Receive+0x20a>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b3e:	f7fd ff03 	bl	8004948 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d002      	beq.n	8006b56 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
 8006b52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b54:	e0c2      	b.n	8006cdc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_SPI_Receive+0x7e>
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b66:	e0b9      	b.n	8006cdc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	88fa      	ldrh	r2, [r7, #6]
 8006b86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bae:	d107      	bne.n	8006bc0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bbe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d007      	beq.n	8006bde <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bdc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d162      	bne.n	8006cac <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006be6:	e02e      	b.n	8006c46 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d115      	bne.n	8006c22 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f103 020c 	add.w	r2, r3, #12
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c20:	e011      	b.n	8006c46 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c22:	f7fd fe91 	bl	8004948 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d803      	bhi.n	8006c3a <HAL_SPI_Receive+0x156>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d102      	bne.n	8006c40 <HAL_SPI_Receive+0x15c>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c44:	e04a      	b.n	8006cdc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1cb      	bne.n	8006be8 <HAL_SPI_Receive+0x104>
 8006c50:	e031      	b.n	8006cb6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d113      	bne.n	8006c88 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	b292      	uxth	r2, r2
 8006c6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	1c9a      	adds	r2, r3, #2
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c86:	e011      	b.n	8006cac <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c88:	f7fd fe5e 	bl	8004948 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d803      	bhi.n	8006ca0 <HAL_SPI_Receive+0x1bc>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d102      	bne.n	8006ca6 <HAL_SPI_Receive+0x1c2>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006caa:	e017      	b.n	8006cdc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1cd      	bne.n	8006c52 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa27 	bl	800710e <SPI_EndRxTransaction>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
 8006cd8:	e000      	b.n	8006cdc <HAL_SPI_Receive+0x1f8>
  }

error :
 8006cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b08c      	sub	sp, #48	; 0x30
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d04:	2301      	movs	r3, #1
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x26>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e18a      	b.n	8007032 <HAL_SPI_TransmitReceive+0x33c>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d24:	f7fd fe10 	bl	8004948 <HAL_GetTick>
 8006d28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d00f      	beq.n	8006d66 <HAL_SPI_TransmitReceive+0x70>
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d4c:	d107      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x68>
 8006d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d003      	beq.n	8006d66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d64:	e15b      	b.n	800701e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x82>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x82>
 8006d72:	887b      	ldrh	r3, [r7, #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d103      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d7e:	e14e      	b.n	800701e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d003      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	887a      	ldrh	r2, [r7, #2]
 8006da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	887a      	ldrh	r2, [r7, #2]
 8006daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	887a      	ldrh	r2, [r7, #2]
 8006db6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	887a      	ldrh	r2, [r7, #2]
 8006dbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d007      	beq.n	8006de8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df0:	d178      	bne.n	8006ee4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_SPI_TransmitReceive+0x10a>
 8006dfa:	8b7b      	ldrh	r3, [r7, #26]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d166      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	1c9a      	adds	r2, r3, #2
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e24:	e053      	b.n	8006ece <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d11b      	bne.n	8006e6c <HAL_SPI_TransmitReceive+0x176>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d016      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x176>
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d113      	bne.n	8006e6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	881a      	ldrh	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e54:	1c9a      	adds	r2, r3, #2
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d119      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x1b8>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d014      	beq.n	8006eae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	b292      	uxth	r2, r2
 8006e90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eae:	f7fd fd4b 	bl	8004948 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d807      	bhi.n	8006ece <HAL_SPI_TransmitReceive+0x1d8>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d003      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ecc:	e0a7      	b.n	800701e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1a6      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x130>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1a1      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x130>
 8006ee2:	e07c      	b.n	8006fde <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0x1fc>
 8006eec:	8b7b      	ldrh	r3, [r7, #26]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d16b      	bne.n	8006fca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f18:	e057      	b.n	8006fca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d11c      	bne.n	8006f62 <HAL_SPI_TransmitReceive+0x26c>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0x26c>
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d114      	bne.n	8006f62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d119      	bne.n	8006fa4 <HAL_SPI_TransmitReceive+0x2ae>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d014      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fa4:	f7fd fcd0 	bl	8004948 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d803      	bhi.n	8006fbc <HAL_SPI_TransmitReceive+0x2c6>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d102      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x2cc>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d103      	bne.n	8006fca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fc8:	e029      	b.n	800701e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1a2      	bne.n	8006f1a <HAL_SPI_TransmitReceive+0x224>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d19d      	bne.n	8006f1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f8f8 	bl	80071d8 <SPI_EndRxTxTransaction>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d006      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ffa:	e010      	b.n	800701e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	e000      	b.n	800701e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800701c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800702e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007032:	4618      	mov	r0, r3
 8007034:	3730      	adds	r7, #48	; 0x30
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800704a:	e04c      	b.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d048      	beq.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007054:	f7fd fc78 	bl	8004948 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d902      	bls.n	800706a <SPI_WaitFlagStateUntilTimeout+0x30>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d13d      	bne.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007082:	d111      	bne.n	80070a8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708c:	d004      	beq.n	8007098 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007096:	d107      	bne.n	80070a8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b0:	d10f      	bne.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e00f      	b.n	8007106 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	429a      	cmp	r2, r3
 8007102:	d1a3      	bne.n	800704c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b086      	sub	sp, #24
 8007112:	af02      	add	r7, sp, #8
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007122:	d111      	bne.n	8007148 <SPI_EndRxTransaction+0x3a>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d004      	beq.n	8007138 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007136:	d107      	bne.n	8007148 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007146:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007150:	d12a      	bne.n	80071a8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715a:	d012      	beq.n	8007182 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff ff67 	bl	800703a <SPI_WaitFlagStateUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d02d      	beq.n	80071ce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	f043 0220 	orr.w	r2, r3, #32
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e026      	b.n	80071d0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	2101      	movs	r1, #1
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff ff54 	bl	800703a <SPI_WaitFlagStateUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e013      	b.n	80071d0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	2101      	movs	r1, #1
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff ff41 	bl	800703a <SPI_WaitFlagStateUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c2:	f043 0220 	orr.w	r2, r3, #32
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e000      	b.n	80071d0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <SPI_EndRxTxTransaction+0x7c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <SPI_EndRxTxTransaction+0x80>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	0d5b      	lsrs	r3, r3, #21
 80071f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007202:	d112      	bne.n	800722a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff ff13 	bl	800703a <SPI_WaitFlagStateUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d016      	beq.n	8007248 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f043 0220 	orr.w	r2, r3, #32
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e00f      	b.n	800724a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	3b01      	subs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007240:	2b80      	cmp	r3, #128	; 0x80
 8007242:	d0f2      	beq.n	800722a <SPI_EndRxTxTransaction+0x52>
 8007244:	e000      	b.n	8007248 <SPI_EndRxTxTransaction+0x70>
        break;
 8007246:	bf00      	nop
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000000 	.word	0x20000000
 8007258:	165e9f81 	.word	0x165e9f81

0800725c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e01d      	b.n	80072aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fd f996 	bl	80045b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f000 f95e 	bl	800755c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0201 	orr.w	r2, r2, #1
 80072c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d007      	beq.n	80072ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b02      	cmp	r3, #2
 800730e:	d122      	bne.n	8007356 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b02      	cmp	r3, #2
 800731c:	d11b      	bne.n	8007356 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f06f 0202 	mvn.w	r2, #2
 8007326:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f8ee 	bl	800751e <HAL_TIM_IC_CaptureCallback>
 8007342:	e005      	b.n	8007350 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8e0 	bl	800750a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f8f1 	bl	8007532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b04      	cmp	r3, #4
 8007362:	d122      	bne.n	80073aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0304 	and.w	r3, r3, #4
 800736e:	2b04      	cmp	r3, #4
 8007370:	d11b      	bne.n	80073aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f06f 0204 	mvn.w	r2, #4
 800737a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8c4 	bl	800751e <HAL_TIM_IC_CaptureCallback>
 8007396:	e005      	b.n	80073a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f8b6 	bl	800750a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f8c7 	bl	8007532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d122      	bne.n	80073fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d11b      	bne.n	80073fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f06f 0208 	mvn.w	r2, #8
 80073ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2204      	movs	r2, #4
 80073d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f89a 	bl	800751e <HAL_TIM_IC_CaptureCallback>
 80073ea:	e005      	b.n	80073f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f88c 	bl	800750a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f89d 	bl	8007532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b10      	cmp	r3, #16
 800740a:	d122      	bne.n	8007452 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b10      	cmp	r3, #16
 8007418:	d11b      	bne.n	8007452 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f06f 0210 	mvn.w	r2, #16
 8007422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2208      	movs	r2, #8
 8007428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f870 	bl	800751e <HAL_TIM_IC_CaptureCallback>
 800743e:	e005      	b.n	800744c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f862 	bl	800750a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f873 	bl	8007532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d10e      	bne.n	800747e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b01      	cmp	r3, #1
 800746c:	d107      	bne.n	800747e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f06f 0201 	mvn.w	r2, #1
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7fc feff 	bl	800427c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d10e      	bne.n	80074aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d107      	bne.n	80074aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f903 	bl	80076b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d10e      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d107      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f838 	bl	8007546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d10e      	bne.n	8007502 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d107      	bne.n	8007502 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f06f 0220 	mvn.w	r2, #32
 80074fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8cd 	bl	800769c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a40      	ldr	r2, [pc, #256]	; (8007670 <TIM_Base_SetConfig+0x114>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d013      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757a:	d00f      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3d      	ldr	r2, [pc, #244]	; (8007674 <TIM_Base_SetConfig+0x118>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a3c      	ldr	r2, [pc, #240]	; (8007678 <TIM_Base_SetConfig+0x11c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a3b      	ldr	r2, [pc, #236]	; (800767c <TIM_Base_SetConfig+0x120>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a3a      	ldr	r2, [pc, #232]	; (8007680 <TIM_Base_SetConfig+0x124>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d108      	bne.n	80075ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2f      	ldr	r2, [pc, #188]	; (8007670 <TIM_Base_SetConfig+0x114>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d02b      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075bc:	d027      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <TIM_Base_SetConfig+0x118>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d023      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2b      	ldr	r2, [pc, #172]	; (8007678 <TIM_Base_SetConfig+0x11c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01f      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2a      	ldr	r2, [pc, #168]	; (800767c <TIM_Base_SetConfig+0x120>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d01b      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a29      	ldr	r2, [pc, #164]	; (8007680 <TIM_Base_SetConfig+0x124>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d017      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a28      	ldr	r2, [pc, #160]	; (8007684 <TIM_Base_SetConfig+0x128>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a27      	ldr	r2, [pc, #156]	; (8007688 <TIM_Base_SetConfig+0x12c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00f      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a26      	ldr	r2, [pc, #152]	; (800768c <TIM_Base_SetConfig+0x130>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00b      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a25      	ldr	r2, [pc, #148]	; (8007690 <TIM_Base_SetConfig+0x134>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a24      	ldr	r2, [pc, #144]	; (8007694 <TIM_Base_SetConfig+0x138>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a23      	ldr	r2, [pc, #140]	; (8007698 <TIM_Base_SetConfig+0x13c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d108      	bne.n	8007620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <TIM_Base_SetConfig+0x114>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_Base_SetConfig+0xf8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a0c      	ldr	r2, [pc, #48]	; (8007680 <TIM_Base_SetConfig+0x124>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d103      	bne.n	800765c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	615a      	str	r2, [r3, #20]
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40010000 	.word	0x40010000
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40000c00 	.word	0x40000c00
 8007680:	40010400 	.word	0x40010400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800
 8007690:	40001800 	.word	0x40001800
 8007694:	40001c00 	.word	0x40001c00
 8007698:	40002000 	.word	0x40002000

0800769c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e03f      	b.n	8007756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fc ff84 	bl	80045f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2224      	movs	r2, #36	; 0x24
 80076f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f829 	bl	8007760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800771c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800772c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800773c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80077a2:	f023 030c 	bic.w	r3, r3, #12
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	430b      	orrs	r3, r1
 80077ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ce:	f040 818b 	bne.w	8007ae8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4ac1      	ldr	r2, [pc, #772]	; (8007adc <UART_SetConfig+0x37c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d005      	beq.n	80077e8 <UART_SetConfig+0x88>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4abf      	ldr	r2, [pc, #764]	; (8007ae0 <UART_SetConfig+0x380>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	f040 80bd 	bne.w	8007962 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077e8:	f7fe ff9e 	bl	8006728 <HAL_RCC_GetPCLK2Freq>
 80077ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	461d      	mov	r5, r3
 80077f2:	f04f 0600 	mov.w	r6, #0
 80077f6:	46a8      	mov	r8, r5
 80077f8:	46b1      	mov	r9, r6
 80077fa:	eb18 0308 	adds.w	r3, r8, r8
 80077fe:	eb49 0409 	adc.w	r4, r9, r9
 8007802:	4698      	mov	r8, r3
 8007804:	46a1      	mov	r9, r4
 8007806:	eb18 0805 	adds.w	r8, r8, r5
 800780a:	eb49 0906 	adc.w	r9, r9, r6
 800780e:	f04f 0100 	mov.w	r1, #0
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800781a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800781e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007822:	4688      	mov	r8, r1
 8007824:	4691      	mov	r9, r2
 8007826:	eb18 0005 	adds.w	r0, r8, r5
 800782a:	eb49 0106 	adc.w	r1, r9, r6
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	461d      	mov	r5, r3
 8007834:	f04f 0600 	mov.w	r6, #0
 8007838:	196b      	adds	r3, r5, r5
 800783a:	eb46 0406 	adc.w	r4, r6, r6
 800783e:	461a      	mov	r2, r3
 8007840:	4623      	mov	r3, r4
 8007842:	f7f9 f9a9 	bl	8000b98 <__aeabi_uldivmod>
 8007846:	4603      	mov	r3, r0
 8007848:	460c      	mov	r4, r1
 800784a:	461a      	mov	r2, r3
 800784c:	4ba5      	ldr	r3, [pc, #660]	; (8007ae4 <UART_SetConfig+0x384>)
 800784e:	fba3 2302 	umull	r2, r3, r3, r2
 8007852:	095b      	lsrs	r3, r3, #5
 8007854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	461d      	mov	r5, r3
 800785c:	f04f 0600 	mov.w	r6, #0
 8007860:	46a9      	mov	r9, r5
 8007862:	46b2      	mov	sl, r6
 8007864:	eb19 0309 	adds.w	r3, r9, r9
 8007868:	eb4a 040a 	adc.w	r4, sl, sl
 800786c:	4699      	mov	r9, r3
 800786e:	46a2      	mov	sl, r4
 8007870:	eb19 0905 	adds.w	r9, r9, r5
 8007874:	eb4a 0a06 	adc.w	sl, sl, r6
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800788c:	4689      	mov	r9, r1
 800788e:	4692      	mov	sl, r2
 8007890:	eb19 0005 	adds.w	r0, r9, r5
 8007894:	eb4a 0106 	adc.w	r1, sl, r6
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	461d      	mov	r5, r3
 800789e:	f04f 0600 	mov.w	r6, #0
 80078a2:	196b      	adds	r3, r5, r5
 80078a4:	eb46 0406 	adc.w	r4, r6, r6
 80078a8:	461a      	mov	r2, r3
 80078aa:	4623      	mov	r3, r4
 80078ac:	f7f9 f974 	bl	8000b98 <__aeabi_uldivmod>
 80078b0:	4603      	mov	r3, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	461a      	mov	r2, r3
 80078b6:	4b8b      	ldr	r3, [pc, #556]	; (8007ae4 <UART_SetConfig+0x384>)
 80078b8:	fba3 1302 	umull	r1, r3, r3, r2
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	2164      	movs	r1, #100	; 0x64
 80078c0:	fb01 f303 	mul.w	r3, r1, r3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	3332      	adds	r3, #50	; 0x32
 80078ca:	4a86      	ldr	r2, [pc, #536]	; (8007ae4 <UART_SetConfig+0x384>)
 80078cc:	fba2 2303 	umull	r2, r3, r2, r3
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078d8:	4498      	add	r8, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	461d      	mov	r5, r3
 80078de:	f04f 0600 	mov.w	r6, #0
 80078e2:	46a9      	mov	r9, r5
 80078e4:	46b2      	mov	sl, r6
 80078e6:	eb19 0309 	adds.w	r3, r9, r9
 80078ea:	eb4a 040a 	adc.w	r4, sl, sl
 80078ee:	4699      	mov	r9, r3
 80078f0:	46a2      	mov	sl, r4
 80078f2:	eb19 0905 	adds.w	r9, r9, r5
 80078f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80078fa:	f04f 0100 	mov.w	r1, #0
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800790a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800790e:	4689      	mov	r9, r1
 8007910:	4692      	mov	sl, r2
 8007912:	eb19 0005 	adds.w	r0, r9, r5
 8007916:	eb4a 0106 	adc.w	r1, sl, r6
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	461d      	mov	r5, r3
 8007920:	f04f 0600 	mov.w	r6, #0
 8007924:	196b      	adds	r3, r5, r5
 8007926:	eb46 0406 	adc.w	r4, r6, r6
 800792a:	461a      	mov	r2, r3
 800792c:	4623      	mov	r3, r4
 800792e:	f7f9 f933 	bl	8000b98 <__aeabi_uldivmod>
 8007932:	4603      	mov	r3, r0
 8007934:	460c      	mov	r4, r1
 8007936:	461a      	mov	r2, r3
 8007938:	4b6a      	ldr	r3, [pc, #424]	; (8007ae4 <UART_SetConfig+0x384>)
 800793a:	fba3 1302 	umull	r1, r3, r3, r2
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	2164      	movs	r1, #100	; 0x64
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	3332      	adds	r3, #50	; 0x32
 800794c:	4a65      	ldr	r2, [pc, #404]	; (8007ae4 <UART_SetConfig+0x384>)
 800794e:	fba2 2303 	umull	r2, r3, r2, r3
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	f003 0207 	and.w	r2, r3, #7
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4442      	add	r2, r8
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	e26f      	b.n	8007e42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007962:	f7fe fecd 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 8007966:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	461d      	mov	r5, r3
 800796c:	f04f 0600 	mov.w	r6, #0
 8007970:	46a8      	mov	r8, r5
 8007972:	46b1      	mov	r9, r6
 8007974:	eb18 0308 	adds.w	r3, r8, r8
 8007978:	eb49 0409 	adc.w	r4, r9, r9
 800797c:	4698      	mov	r8, r3
 800797e:	46a1      	mov	r9, r4
 8007980:	eb18 0805 	adds.w	r8, r8, r5
 8007984:	eb49 0906 	adc.w	r9, r9, r6
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007994:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007998:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800799c:	4688      	mov	r8, r1
 800799e:	4691      	mov	r9, r2
 80079a0:	eb18 0005 	adds.w	r0, r8, r5
 80079a4:	eb49 0106 	adc.w	r1, r9, r6
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	461d      	mov	r5, r3
 80079ae:	f04f 0600 	mov.w	r6, #0
 80079b2:	196b      	adds	r3, r5, r5
 80079b4:	eb46 0406 	adc.w	r4, r6, r6
 80079b8:	461a      	mov	r2, r3
 80079ba:	4623      	mov	r3, r4
 80079bc:	f7f9 f8ec 	bl	8000b98 <__aeabi_uldivmod>
 80079c0:	4603      	mov	r3, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	461a      	mov	r2, r3
 80079c6:	4b47      	ldr	r3, [pc, #284]	; (8007ae4 <UART_SetConfig+0x384>)
 80079c8:	fba3 2302 	umull	r2, r3, r3, r2
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	461d      	mov	r5, r3
 80079d6:	f04f 0600 	mov.w	r6, #0
 80079da:	46a9      	mov	r9, r5
 80079dc:	46b2      	mov	sl, r6
 80079de:	eb19 0309 	adds.w	r3, r9, r9
 80079e2:	eb4a 040a 	adc.w	r4, sl, sl
 80079e6:	4699      	mov	r9, r3
 80079e8:	46a2      	mov	sl, r4
 80079ea:	eb19 0905 	adds.w	r9, r9, r5
 80079ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80079f2:	f04f 0100 	mov.w	r1, #0
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a06:	4689      	mov	r9, r1
 8007a08:	4692      	mov	sl, r2
 8007a0a:	eb19 0005 	adds.w	r0, r9, r5
 8007a0e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	461d      	mov	r5, r3
 8007a18:	f04f 0600 	mov.w	r6, #0
 8007a1c:	196b      	adds	r3, r5, r5
 8007a1e:	eb46 0406 	adc.w	r4, r6, r6
 8007a22:	461a      	mov	r2, r3
 8007a24:	4623      	mov	r3, r4
 8007a26:	f7f9 f8b7 	bl	8000b98 <__aeabi_uldivmod>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b2c      	ldr	r3, [pc, #176]	; (8007ae4 <UART_SetConfig+0x384>)
 8007a32:	fba3 1302 	umull	r1, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	2164      	movs	r1, #100	; 0x64
 8007a3a:	fb01 f303 	mul.w	r3, r1, r3
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	3332      	adds	r3, #50	; 0x32
 8007a44:	4a27      	ldr	r2, [pc, #156]	; (8007ae4 <UART_SetConfig+0x384>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a52:	4498      	add	r8, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	461d      	mov	r5, r3
 8007a58:	f04f 0600 	mov.w	r6, #0
 8007a5c:	46a9      	mov	r9, r5
 8007a5e:	46b2      	mov	sl, r6
 8007a60:	eb19 0309 	adds.w	r3, r9, r9
 8007a64:	eb4a 040a 	adc.w	r4, sl, sl
 8007a68:	4699      	mov	r9, r3
 8007a6a:	46a2      	mov	sl, r4
 8007a6c:	eb19 0905 	adds.w	r9, r9, r5
 8007a70:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a74:	f04f 0100 	mov.w	r1, #0
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a88:	4689      	mov	r9, r1
 8007a8a:	4692      	mov	sl, r2
 8007a8c:	eb19 0005 	adds.w	r0, r9, r5
 8007a90:	eb4a 0106 	adc.w	r1, sl, r6
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	461d      	mov	r5, r3
 8007a9a:	f04f 0600 	mov.w	r6, #0
 8007a9e:	196b      	adds	r3, r5, r5
 8007aa0:	eb46 0406 	adc.w	r4, r6, r6
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	f7f9 f876 	bl	8000b98 <__aeabi_uldivmod>
 8007aac:	4603      	mov	r3, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <UART_SetConfig+0x384>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a07      	ldr	r2, [pc, #28]	; (8007ae4 <UART_SetConfig+0x384>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 0207 	and.w	r2, r3, #7
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4442      	add	r2, r8
 8007ad8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007ada:	e1b2      	b.n	8007e42 <UART_SetConfig+0x6e2>
 8007adc:	40011000 	.word	0x40011000
 8007ae0:	40011400 	.word	0x40011400
 8007ae4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4ad7      	ldr	r2, [pc, #860]	; (8007e4c <UART_SetConfig+0x6ec>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d005      	beq.n	8007afe <UART_SetConfig+0x39e>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4ad6      	ldr	r2, [pc, #856]	; (8007e50 <UART_SetConfig+0x6f0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	f040 80d1 	bne.w	8007ca0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007afe:	f7fe fe13 	bl	8006728 <HAL_RCC_GetPCLK2Freq>
 8007b02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	469a      	mov	sl, r3
 8007b08:	f04f 0b00 	mov.w	fp, #0
 8007b0c:	46d0      	mov	r8, sl
 8007b0e:	46d9      	mov	r9, fp
 8007b10:	eb18 0308 	adds.w	r3, r8, r8
 8007b14:	eb49 0409 	adc.w	r4, r9, r9
 8007b18:	4698      	mov	r8, r3
 8007b1a:	46a1      	mov	r9, r4
 8007b1c:	eb18 080a 	adds.w	r8, r8, sl
 8007b20:	eb49 090b 	adc.w	r9, r9, fp
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b38:	4688      	mov	r8, r1
 8007b3a:	4691      	mov	r9, r2
 8007b3c:	eb1a 0508 	adds.w	r5, sl, r8
 8007b40:	eb4b 0609 	adc.w	r6, fp, r9
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	f04f 0400 	mov.w	r4, #0
 8007b56:	0094      	lsls	r4, r2, #2
 8007b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b5c:	008b      	lsls	r3, r1, #2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4623      	mov	r3, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	4631      	mov	r1, r6
 8007b66:	f7f9 f817 	bl	8000b98 <__aeabi_uldivmod>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4bb8      	ldr	r3, [pc, #736]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007b72:	fba3 2302 	umull	r2, r3, r3, r2
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	469b      	mov	fp, r3
 8007b80:	f04f 0c00 	mov.w	ip, #0
 8007b84:	46d9      	mov	r9, fp
 8007b86:	46e2      	mov	sl, ip
 8007b88:	eb19 0309 	adds.w	r3, r9, r9
 8007b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8007b90:	4699      	mov	r9, r3
 8007b92:	46a2      	mov	sl, r4
 8007b94:	eb19 090b 	adds.w	r9, r9, fp
 8007b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b9c:	f04f 0100 	mov.w	r1, #0
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	4692      	mov	sl, r2
 8007bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8007bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	f04f 0400 	mov.w	r4, #0
 8007bce:	0094      	lsls	r4, r2, #2
 8007bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bd4:	008b      	lsls	r3, r1, #2
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	4623      	mov	r3, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	4631      	mov	r1, r6
 8007bde:	f7f8 ffdb 	bl	8000b98 <__aeabi_uldivmod>
 8007be2:	4603      	mov	r3, r0
 8007be4:	460c      	mov	r4, r1
 8007be6:	461a      	mov	r2, r3
 8007be8:	4b9a      	ldr	r3, [pc, #616]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007bea:	fba3 1302 	umull	r1, r3, r3, r2
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	2164      	movs	r1, #100	; 0x64
 8007bf2:	fb01 f303 	mul.w	r3, r1, r3
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	3332      	adds	r3, #50	; 0x32
 8007bfc:	4a95      	ldr	r2, [pc, #596]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c08:	4498      	add	r8, r3
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	469b      	mov	fp, r3
 8007c0e:	f04f 0c00 	mov.w	ip, #0
 8007c12:	46d9      	mov	r9, fp
 8007c14:	46e2      	mov	sl, ip
 8007c16:	eb19 0309 	adds.w	r3, r9, r9
 8007c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c1e:	4699      	mov	r9, r3
 8007c20:	46a2      	mov	sl, r4
 8007c22:	eb19 090b 	adds.w	r9, r9, fp
 8007c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c2a:	f04f 0100 	mov.w	r1, #0
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c3e:	4689      	mov	r9, r1
 8007c40:	4692      	mov	sl, r2
 8007c42:	eb1b 0509 	adds.w	r5, fp, r9
 8007c46:	eb4c 060a 	adc.w	r6, ip, sl
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f04f 0200 	mov.w	r2, #0
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	0094      	lsls	r4, r2, #2
 8007c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c62:	008b      	lsls	r3, r1, #2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4623      	mov	r3, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	f7f8 ff94 	bl	8000b98 <__aeabi_uldivmod>
 8007c70:	4603      	mov	r3, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	461a      	mov	r2, r3
 8007c76:	4b77      	ldr	r3, [pc, #476]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007c78:	fba3 1302 	umull	r1, r3, r3, r2
 8007c7c:	095b      	lsrs	r3, r3, #5
 8007c7e:	2164      	movs	r1, #100	; 0x64
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	3332      	adds	r3, #50	; 0x32
 8007c8a:	4a72      	ldr	r2, [pc, #456]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	f003 020f 	and.w	r2, r3, #15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4442      	add	r2, r8
 8007c9c:	609a      	str	r2, [r3, #8]
 8007c9e:	e0d0      	b.n	8007e42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ca0:	f7fe fd2e 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 8007ca4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	469a      	mov	sl, r3
 8007caa:	f04f 0b00 	mov.w	fp, #0
 8007cae:	46d0      	mov	r8, sl
 8007cb0:	46d9      	mov	r9, fp
 8007cb2:	eb18 0308 	adds.w	r3, r8, r8
 8007cb6:	eb49 0409 	adc.w	r4, r9, r9
 8007cba:	4698      	mov	r8, r3
 8007cbc:	46a1      	mov	r9, r4
 8007cbe:	eb18 080a 	adds.w	r8, r8, sl
 8007cc2:	eb49 090b 	adc.w	r9, r9, fp
 8007cc6:	f04f 0100 	mov.w	r1, #0
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007cd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007cd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007cda:	4688      	mov	r8, r1
 8007cdc:	4691      	mov	r9, r2
 8007cde:	eb1a 0508 	adds.w	r5, sl, r8
 8007ce2:	eb4b 0609 	adc.w	r6, fp, r9
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	f04f 0400 	mov.w	r4, #0
 8007cf8:	0094      	lsls	r4, r2, #2
 8007cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cfe:	008b      	lsls	r3, r1, #2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	4631      	mov	r1, r6
 8007d08:	f7f8 ff46 	bl	8000b98 <__aeabi_uldivmod>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b50      	ldr	r3, [pc, #320]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007d14:	fba3 2302 	umull	r2, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	469b      	mov	fp, r3
 8007d22:	f04f 0c00 	mov.w	ip, #0
 8007d26:	46d9      	mov	r9, fp
 8007d28:	46e2      	mov	sl, ip
 8007d2a:	eb19 0309 	adds.w	r3, r9, r9
 8007d2e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d32:	4699      	mov	r9, r3
 8007d34:	46a2      	mov	sl, r4
 8007d36:	eb19 090b 	adds.w	r9, r9, fp
 8007d3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d3e:	f04f 0100 	mov.w	r1, #0
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d52:	4689      	mov	r9, r1
 8007d54:	4692      	mov	sl, r2
 8007d56:	eb1b 0509 	adds.w	r5, fp, r9
 8007d5a:	eb4c 060a 	adc.w	r6, ip, sl
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4619      	mov	r1, r3
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	f04f 0400 	mov.w	r4, #0
 8007d70:	0094      	lsls	r4, r2, #2
 8007d72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d76:	008b      	lsls	r3, r1, #2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	4631      	mov	r1, r6
 8007d80:	f7f8 ff0a 	bl	8000b98 <__aeabi_uldivmod>
 8007d84:	4603      	mov	r3, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4b32      	ldr	r3, [pc, #200]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d90:	095b      	lsrs	r3, r3, #5
 8007d92:	2164      	movs	r1, #100	; 0x64
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	3332      	adds	r3, #50	; 0x32
 8007d9e:	4a2d      	ldr	r2, [pc, #180]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007da0:	fba2 2303 	umull	r2, r3, r2, r3
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007daa:	4498      	add	r8, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	469b      	mov	fp, r3
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	46d9      	mov	r9, fp
 8007db6:	46e2      	mov	sl, ip
 8007db8:	eb19 0309 	adds.w	r3, r9, r9
 8007dbc:	eb4a 040a 	adc.w	r4, sl, sl
 8007dc0:	4699      	mov	r9, r3
 8007dc2:	46a2      	mov	sl, r4
 8007dc4:	eb19 090b 	adds.w	r9, r9, fp
 8007dc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dcc:	f04f 0100 	mov.w	r1, #0
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007de0:	4689      	mov	r9, r1
 8007de2:	4692      	mov	sl, r2
 8007de4:	eb1b 0509 	adds.w	r5, fp, r9
 8007de8:	eb4c 060a 	adc.w	r6, ip, sl
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4619      	mov	r1, r3
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	f04f 0400 	mov.w	r4, #0
 8007dfe:	0094      	lsls	r4, r2, #2
 8007e00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e04:	008b      	lsls	r3, r1, #2
 8007e06:	461a      	mov	r2, r3
 8007e08:	4623      	mov	r3, r4
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	f7f8 fec3 	bl	8000b98 <__aeabi_uldivmod>
 8007e12:	4603      	mov	r3, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	2164      	movs	r1, #100	; 0x64
 8007e22:	fb01 f303 	mul.w	r3, r1, r3
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	3332      	adds	r3, #50	; 0x32
 8007e2c:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <UART_SetConfig+0x6f4>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4442      	add	r2, r8
 8007e3e:	609a      	str	r2, [r3, #8]
}
 8007e40:	e7ff      	b.n	8007e42 <UART_SetConfig+0x6e2>
 8007e42:	bf00      	nop
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	40011000 	.word	0x40011000
 8007e50:	40011400 	.word	0x40011400
 8007e54:	51eb851f 	.word	0x51eb851f

08007e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e6a:	2b84      	cmp	r3, #132	; 0x84
 8007e6c:	d005      	beq.n	8007e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	3303      	adds	r3, #3
 8007e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e8c:	f000 fad2 	bl	8008434 <vTaskStartScheduler>
  
  return osOK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e98:	b089      	sub	sp, #36	; 0x24
 8007e9a:	af04      	add	r7, sp, #16
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d020      	beq.n	8007eea <osThreadCreate+0x54>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01c      	beq.n	8007eea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685c      	ldr	r4, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681d      	ldr	r5, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691e      	ldr	r6, [r3, #16]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff ffc8 	bl	8007e58 <makeFreeRtosPriority>
 8007ec8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ed2:	9202      	str	r2, [sp, #8]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	9100      	str	r1, [sp, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	4632      	mov	r2, r6
 8007edc:	4629      	mov	r1, r5
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f8ed 	bl	80080be <xTaskCreateStatic>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e01c      	b.n	8007f24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685c      	ldr	r4, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ef6:	b29e      	uxth	r6, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff ffaa 	bl	8007e58 <makeFreeRtosPriority>
 8007f04:	4602      	mov	r2, r0
 8007f06:	f107 030c 	add.w	r3, r7, #12
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	9200      	str	r2, [sp, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	4632      	mov	r2, r6
 8007f12:	4629      	mov	r1, r5
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 f92b 	bl	8008170 <xTaskCreate>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d001      	beq.n	8007f24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	e000      	b.n	8007f26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f24:	68fb      	ldr	r3, [r7, #12]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <osDelay+0x16>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	e000      	b.n	8007f46 <osDelay+0x18>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fa40 	bl	80083cc <vTaskDelay>
  
  return osOK;
 8007f4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f103 0208 	add.w	r2, r3, #8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f103 0208 	add.w	r2, r3, #8
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f103 0208 	add.w	r2, r3, #8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]
}
 8007fec:	bf00      	nop
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d103      	bne.n	8008018 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e00c      	b.n	8008032 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3308      	adds	r3, #8
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e002      	b.n	8008026 <vListInsert+0x2e>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	d2f6      	bcs.n	8008020 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800806a:	b480      	push	{r7}
 800806c:	b085      	sub	sp, #20
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6892      	ldr	r2, [r2, #8]
 8008080:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6852      	ldr	r2, [r2, #4]
 800808a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d103      	bne.n	800809e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b08e      	sub	sp, #56	; 0x38
 80080c2:	af04      	add	r7, sp, #16
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	623b      	str	r3, [r7, #32]
 80080e4:	e7fe      	b.n	80080e4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <xTaskCreateStatic+0x42>
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	e7fe      	b.n	80080fe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008100:	2354      	movs	r3, #84	; 0x54
 8008102:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2b54      	cmp	r3, #84	; 0x54
 8008108:	d009      	beq.n	800811e <xTaskCreateStatic+0x60>
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	e7fe      	b.n	800811c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01e      	beq.n	8008162 <xTaskCreateStatic+0xa4>
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01b      	beq.n	8008162 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008132:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	2202      	movs	r2, #2
 8008138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	9302      	str	r3, [sp, #8]
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f850 	bl	80081fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800815a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800815c:	f000 f8cc 	bl	80082f8 <prvAddNewTaskToReadyList>
 8008160:	e001      	b.n	8008166 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008166:	697b      	ldr	r3, [r7, #20]
	}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	af04      	add	r7, sp, #16
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4618      	mov	r0, r3
 8008186:	f000 feb5 	bl	8008ef4 <pvPortMalloc>
 800818a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008192:	2054      	movs	r0, #84	; 0x54
 8008194:	f000 feae 	bl	8008ef4 <pvPortMalloc>
 8008198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30
 80081a6:	e005      	b.n	80081b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081a8:	6978      	ldr	r0, [r7, #20]
 80081aa:	f000 ff65 	bl	8009078 <vPortFree>
 80081ae:	e001      	b.n	80081b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d017      	beq.n	80081ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081c2:	88fa      	ldrh	r2, [r7, #6]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f80e 	bl	80081fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081de:	69f8      	ldr	r0, [r7, #28]
 80081e0:	f000 f88a 	bl	80082f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	e002      	b.n	80081f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081f0:	69bb      	ldr	r3, [r7, #24]
	}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008212:	3b01      	subs	r3, #1
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f023 0307 	bic.w	r3, r3, #7
 8008220:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <prvInitialiseNewTask+0x46>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e7fe      	b.n	800823e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e012      	b.n	800826c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	7819      	ldrb	r1, [r3, #0]
 800824e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	3334      	adds	r3, #52	; 0x34
 8008256:	460a      	mov	r2, r1
 8008258:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	3301      	adds	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b0f      	cmp	r3, #15
 8008270:	d9e9      	bls.n	8008246 <prvInitialiseNewTask+0x4c>
 8008272:	e000      	b.n	8008276 <prvInitialiseNewTask+0x7c>
		{
			break;
 8008274:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	2b06      	cmp	r3, #6
 8008282:	d901      	bls.n	8008288 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008284:	2306      	movs	r3, #6
 8008286:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008292:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	2200      	movs	r2, #0
 8008298:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	3304      	adds	r3, #4
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fe79 	bl	8007f96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	3318      	adds	r3, #24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fe74 	bl	8007f96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f1c3 0207 	rsb	r2, r3, #7
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	2200      	movs	r2, #0
 80082c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	68f9      	ldr	r1, [r7, #12]
 80082d6:	69b8      	ldr	r0, [r7, #24]
 80082d8:	f000 fc08 	bl	8008aec <pxPortInitialiseStack>
 80082dc:	4602      	mov	r2, r0
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ee:	bf00      	nop
 80082f0:	3720      	adds	r7, #32
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008300:	f000 fd1c 	bl	8008d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008304:	4b2a      	ldr	r3, [pc, #168]	; (80083b0 <prvAddNewTaskToReadyList+0xb8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	4a29      	ldr	r2, [pc, #164]	; (80083b0 <prvAddNewTaskToReadyList+0xb8>)
 800830c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800830e:	4b29      	ldr	r3, [pc, #164]	; (80083b4 <prvAddNewTaskToReadyList+0xbc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008316:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <prvAddNewTaskToReadyList+0xbc>)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800831c:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <prvAddNewTaskToReadyList+0xb8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d110      	bne.n	8008346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008324:	f000 fabc 	bl	80088a0 <prvInitialiseTaskLists>
 8008328:	e00d      	b.n	8008346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800832a:	4b23      	ldr	r3, [pc, #140]	; (80083b8 <prvAddNewTaskToReadyList+0xc0>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d109      	bne.n	8008346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008332:	4b20      	ldr	r3, [pc, #128]	; (80083b4 <prvAddNewTaskToReadyList+0xbc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d802      	bhi.n	8008346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008340:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <prvAddNewTaskToReadyList+0xbc>)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <prvAddNewTaskToReadyList+0xc4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3301      	adds	r3, #1
 800834c:	4a1b      	ldr	r2, [pc, #108]	; (80083bc <prvAddNewTaskToReadyList+0xc4>)
 800834e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	2201      	movs	r2, #1
 8008356:	409a      	lsls	r2, r3
 8008358:	4b19      	ldr	r3, [pc, #100]	; (80083c0 <prvAddNewTaskToReadyList+0xc8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4313      	orrs	r3, r2
 800835e:	4a18      	ldr	r2, [pc, #96]	; (80083c0 <prvAddNewTaskToReadyList+0xc8>)
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4a15      	ldr	r2, [pc, #84]	; (80083c4 <prvAddNewTaskToReadyList+0xcc>)
 8008370:	441a      	add	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3304      	adds	r3, #4
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f7ff fe19 	bl	8007fb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800837e:	f000 fd0b 	bl	8008d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <prvAddNewTaskToReadyList+0xc0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00e      	beq.n	80083a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <prvAddNewTaskToReadyList+0xbc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	429a      	cmp	r2, r3
 8008396:	d207      	bcs.n	80083a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008398:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <prvAddNewTaskToReadyList+0xd0>)
 800839a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200007e8 	.word	0x200007e8
 80083b4:	200006e8 	.word	0x200006e8
 80083b8:	200007f4 	.word	0x200007f4
 80083bc:	20000804 	.word	0x20000804
 80083c0:	200007f0 	.word	0x200007f0
 80083c4:	200006ec 	.word	0x200006ec
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d016      	beq.n	800840c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <vTaskDelay+0x60>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <vTaskDelay+0x2e>
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60bb      	str	r3, [r7, #8]
 80083f8:	e7fe      	b.n	80083f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80083fa:	f000 f879 	bl	80084f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fb0d 	bl	8008a20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008406:	f000 f881 	bl	800850c <xTaskResumeAll>
 800840a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008412:	4b07      	ldr	r3, [pc, #28]	; (8008430 <vTaskDelay+0x64>)
 8008414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000810 	.word	0x20000810
 8008430:	e000ed04 	.word	0xe000ed04

08008434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	; 0x28
 8008438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008442:	463a      	mov	r2, r7
 8008444:	1d39      	adds	r1, r7, #4
 8008446:	f107 0308 	add.w	r3, r7, #8
 800844a:	4618      	mov	r0, r3
 800844c:	f7fa fc5a 	bl	8002d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	9202      	str	r2, [sp, #8]
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	2300      	movs	r3, #0
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	2300      	movs	r3, #0
 8008460:	460a      	mov	r2, r1
 8008462:	491d      	ldr	r1, [pc, #116]	; (80084d8 <vTaskStartScheduler+0xa4>)
 8008464:	481d      	ldr	r0, [pc, #116]	; (80084dc <vTaskStartScheduler+0xa8>)
 8008466:	f7ff fe2a 	bl	80080be <xTaskCreateStatic>
 800846a:	4602      	mov	r2, r0
 800846c:	4b1c      	ldr	r3, [pc, #112]	; (80084e0 <vTaskStartScheduler+0xac>)
 800846e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008470:	4b1b      	ldr	r3, [pc, #108]	; (80084e0 <vTaskStartScheduler+0xac>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e001      	b.n	8008482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d115      	bne.n	80084b4 <vTaskStartScheduler+0x80>
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <vTaskStartScheduler+0xb0>)
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <vTaskStartScheduler+0xb4>)
 80084a4:	2201      	movs	r2, #1
 80084a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80084a8:	4b10      	ldr	r3, [pc, #64]	; (80084ec <vTaskStartScheduler+0xb8>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084ae:	f000 fba7 	bl	8008c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084b2:	e00d      	b.n	80084d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d109      	bne.n	80084d0 <vTaskStartScheduler+0x9c>
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e7fe      	b.n	80084ce <vTaskStartScheduler+0x9a>
}
 80084d0:	bf00      	nop
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	0800ad28 	.word	0x0800ad28
 80084dc:	08008871 	.word	0x08008871
 80084e0:	2000080c 	.word	0x2000080c
 80084e4:	20000808 	.word	0x20000808
 80084e8:	200007f4 	.word	0x200007f4
 80084ec:	200007ec 	.word	0x200007ec

080084f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084f4:	4b04      	ldr	r3, [pc, #16]	; (8008508 <vTaskSuspendAll+0x18>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	4a03      	ldr	r2, [pc, #12]	; (8008508 <vTaskSuspendAll+0x18>)
 80084fc:	6013      	str	r3, [r2, #0]
}
 80084fe:	bf00      	nop
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	20000810 	.word	0x20000810

0800850c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800851a:	4b41      	ldr	r3, [pc, #260]	; (8008620 <xTaskResumeAll+0x114>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <xTaskResumeAll+0x2a>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	e7fe      	b.n	8008534 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008536:	f000 fc01 	bl	8008d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800853a:	4b39      	ldr	r3, [pc, #228]	; (8008620 <xTaskResumeAll+0x114>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3b01      	subs	r3, #1
 8008540:	4a37      	ldr	r2, [pc, #220]	; (8008620 <xTaskResumeAll+0x114>)
 8008542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008544:	4b36      	ldr	r3, [pc, #216]	; (8008620 <xTaskResumeAll+0x114>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d161      	bne.n	8008610 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800854c:	4b35      	ldr	r3, [pc, #212]	; (8008624 <xTaskResumeAll+0x118>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d05d      	beq.n	8008610 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008554:	e02e      	b.n	80085b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008556:	4b34      	ldr	r3, [pc, #208]	; (8008628 <xTaskResumeAll+0x11c>)
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3318      	adds	r3, #24
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fd81 	bl	800806a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3304      	adds	r3, #4
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fd7c 	bl	800806a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	2201      	movs	r2, #1
 8008578:	409a      	lsls	r2, r3
 800857a:	4b2c      	ldr	r3, [pc, #176]	; (800862c <xTaskResumeAll+0x120>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4313      	orrs	r3, r2
 8008580:	4a2a      	ldr	r2, [pc, #168]	; (800862c <xTaskResumeAll+0x120>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a27      	ldr	r2, [pc, #156]	; (8008630 <xTaskResumeAll+0x124>)
 8008592:	441a      	add	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3304      	adds	r3, #4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7ff fd08 	bl	8007fb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4b23      	ldr	r3, [pc, #140]	; (8008634 <xTaskResumeAll+0x128>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d302      	bcc.n	80085b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80085ae:	4b22      	ldr	r3, [pc, #136]	; (8008638 <xTaskResumeAll+0x12c>)
 80085b0:	2201      	movs	r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085b4:	4b1c      	ldr	r3, [pc, #112]	; (8008628 <xTaskResumeAll+0x11c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1cc      	bne.n	8008556 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085c2:	f000 fa07 	bl	80089d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <xTaskResumeAll+0x130>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d010      	beq.n	80085f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085d2:	f000 f837 	bl	8008644 <xTaskIncrementTick>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80085dc:	4b16      	ldr	r3, [pc, #88]	; (8008638 <xTaskResumeAll+0x12c>)
 80085de:	2201      	movs	r2, #1
 80085e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f1      	bne.n	80085d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <xTaskResumeAll+0x130>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085f4:	4b10      	ldr	r3, [pc, #64]	; (8008638 <xTaskResumeAll+0x12c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008600:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <xTaskResumeAll+0x134>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008610:	f000 fbc2 	bl	8008d98 <vPortExitCritical>

	return xAlreadyYielded;
 8008614:	68bb      	ldr	r3, [r7, #8]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000810 	.word	0x20000810
 8008624:	200007e8 	.word	0x200007e8
 8008628:	200007a8 	.word	0x200007a8
 800862c:	200007f0 	.word	0x200007f0
 8008630:	200006ec 	.word	0x200006ec
 8008634:	200006e8 	.word	0x200006e8
 8008638:	200007fc 	.word	0x200007fc
 800863c:	200007f8 	.word	0x200007f8
 8008640:	e000ed04 	.word	0xe000ed04

08008644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800864a:	2300      	movs	r3, #0
 800864c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800864e:	4b50      	ldr	r3, [pc, #320]	; (8008790 <xTaskIncrementTick+0x14c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 808c 	bne.w	8008770 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008658:	4b4e      	ldr	r3, [pc, #312]	; (8008794 <xTaskIncrementTick+0x150>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008660:	4a4c      	ldr	r2, [pc, #304]	; (8008794 <xTaskIncrementTick+0x150>)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11f      	bne.n	80086ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800866c:	4b4a      	ldr	r3, [pc, #296]	; (8008798 <xTaskIncrementTick+0x154>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <xTaskIncrementTick+0x46>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	e7fe      	b.n	8008688 <xTaskIncrementTick+0x44>
 800868a:	4b43      	ldr	r3, [pc, #268]	; (8008798 <xTaskIncrementTick+0x154>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	4b42      	ldr	r3, [pc, #264]	; (800879c <xTaskIncrementTick+0x158>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a40      	ldr	r2, [pc, #256]	; (8008798 <xTaskIncrementTick+0x154>)
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	4a40      	ldr	r2, [pc, #256]	; (800879c <xTaskIncrementTick+0x158>)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	4b40      	ldr	r3, [pc, #256]	; (80087a0 <xTaskIncrementTick+0x15c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	4a3e      	ldr	r2, [pc, #248]	; (80087a0 <xTaskIncrementTick+0x15c>)
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	f000 f994 	bl	80089d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086ac:	4b3d      	ldr	r3, [pc, #244]	; (80087a4 <xTaskIncrementTick+0x160>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d34d      	bcc.n	8008752 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b6:	4b38      	ldr	r3, [pc, #224]	; (8008798 <xTaskIncrementTick+0x154>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <xTaskIncrementTick+0x80>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <xTaskIncrementTick+0x82>
 80086c4:	2300      	movs	r3, #0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ca:	4b36      	ldr	r3, [pc, #216]	; (80087a4 <xTaskIncrementTick+0x160>)
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295
 80086d0:	601a      	str	r2, [r3, #0]
					break;
 80086d2:	e03e      	b.n	8008752 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086d4:	4b30      	ldr	r3, [pc, #192]	; (8008798 <xTaskIncrementTick+0x154>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d203      	bcs.n	80086f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086ec:	4a2d      	ldr	r2, [pc, #180]	; (80087a4 <xTaskIncrementTick+0x160>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6013      	str	r3, [r2, #0]
						break;
 80086f2:	e02e      	b.n	8008752 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	3304      	adds	r3, #4
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fcb6 	bl	800806a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3318      	adds	r3, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fcad 	bl	800806a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	2201      	movs	r2, #1
 8008716:	409a      	lsls	r2, r3
 8008718:	4b23      	ldr	r3, [pc, #140]	; (80087a8 <xTaskIncrementTick+0x164>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4313      	orrs	r3, r2
 800871e:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <xTaskIncrementTick+0x164>)
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4a1f      	ldr	r2, [pc, #124]	; (80087ac <xTaskIncrementTick+0x168>)
 8008730:	441a      	add	r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7ff fc39 	bl	8007fb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <xTaskIncrementTick+0x16c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d3b4      	bcc.n	80086b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008750:	e7b1      	b.n	80086b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008752:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <xTaskIncrementTick+0x16c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008758:	4914      	ldr	r1, [pc, #80]	; (80087ac <xTaskIncrementTick+0x168>)
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d907      	bls.n	800877a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e004      	b.n	800877a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008770:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <xTaskIncrementTick+0x170>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	4a0f      	ldr	r2, [pc, #60]	; (80087b4 <xTaskIncrementTick+0x170>)
 8008778:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800877a:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <xTaskIncrementTick+0x174>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008782:	2301      	movs	r3, #1
 8008784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008786:	697b      	ldr	r3, [r7, #20]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000810 	.word	0x20000810
 8008794:	200007ec 	.word	0x200007ec
 8008798:	200007a0 	.word	0x200007a0
 800879c:	200007a4 	.word	0x200007a4
 80087a0:	20000800 	.word	0x20000800
 80087a4:	20000808 	.word	0x20000808
 80087a8:	200007f0 	.word	0x200007f0
 80087ac:	200006ec 	.word	0x200006ec
 80087b0:	200006e8 	.word	0x200006e8
 80087b4:	200007f8 	.word	0x200007f8
 80087b8:	200007fc 	.word	0x200007fc

080087bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087c2:	4b26      	ldr	r3, [pc, #152]	; (800885c <vTaskSwitchContext+0xa0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087ca:	4b25      	ldr	r3, [pc, #148]	; (8008860 <vTaskSwitchContext+0xa4>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087d0:	e03e      	b.n	8008850 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80087d2:	4b23      	ldr	r3, [pc, #140]	; (8008860 <vTaskSwitchContext+0xa4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80087d8:	4b22      	ldr	r3, [pc, #136]	; (8008864 <vTaskSwitchContext+0xa8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	fab3 f383 	clz	r3, r3
 80087e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087e6:	7afb      	ldrb	r3, [r7, #11]
 80087e8:	f1c3 031f 	rsb	r3, r3, #31
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	491e      	ldr	r1, [pc, #120]	; (8008868 <vTaskSwitchContext+0xac>)
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	e7fe      	b.n	8008814 <vTaskSwitchContext+0x58>
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4a11      	ldr	r2, [pc, #68]	; (8008868 <vTaskSwitchContext+0xac>)
 8008822:	4413      	add	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	3308      	adds	r3, #8
 8008838:	429a      	cmp	r2, r3
 800883a:	d104      	bne.n	8008846 <vTaskSwitchContext+0x8a>
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	4a07      	ldr	r2, [pc, #28]	; (800886c <vTaskSwitchContext+0xb0>)
 800884e:	6013      	str	r3, [r2, #0]
}
 8008850:	bf00      	nop
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	20000810 	.word	0x20000810
 8008860:	200007fc 	.word	0x200007fc
 8008864:	200007f0 	.word	0x200007f0
 8008868:	200006ec 	.word	0x200006ec
 800886c:	200006e8 	.word	0x200006e8

08008870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008878:	f000 f852 	bl	8008920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <prvIdleTask+0x28>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d9f9      	bls.n	8008878 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <prvIdleTask+0x2c>)
 8008886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008894:	e7f0      	b.n	8008878 <prvIdleTask+0x8>
 8008896:	bf00      	nop
 8008898:	200006ec 	.word	0x200006ec
 800889c:	e000ed04 	.word	0xe000ed04

080088a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088a6:	2300      	movs	r3, #0
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	e00c      	b.n	80088c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4a12      	ldr	r2, [pc, #72]	; (8008900 <prvInitialiseTaskLists+0x60>)
 80088b8:	4413      	add	r3, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fb4b 	bl	8007f56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3301      	adds	r3, #1
 80088c4:	607b      	str	r3, [r7, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	d9ef      	bls.n	80088ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088cc:	480d      	ldr	r0, [pc, #52]	; (8008904 <prvInitialiseTaskLists+0x64>)
 80088ce:	f7ff fb42 	bl	8007f56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088d2:	480d      	ldr	r0, [pc, #52]	; (8008908 <prvInitialiseTaskLists+0x68>)
 80088d4:	f7ff fb3f 	bl	8007f56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088d8:	480c      	ldr	r0, [pc, #48]	; (800890c <prvInitialiseTaskLists+0x6c>)
 80088da:	f7ff fb3c 	bl	8007f56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088de:	480c      	ldr	r0, [pc, #48]	; (8008910 <prvInitialiseTaskLists+0x70>)
 80088e0:	f7ff fb39 	bl	8007f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088e4:	480b      	ldr	r0, [pc, #44]	; (8008914 <prvInitialiseTaskLists+0x74>)
 80088e6:	f7ff fb36 	bl	8007f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <prvInitialiseTaskLists+0x78>)
 80088ec:	4a05      	ldr	r2, [pc, #20]	; (8008904 <prvInitialiseTaskLists+0x64>)
 80088ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088f0:	4b0a      	ldr	r3, [pc, #40]	; (800891c <prvInitialiseTaskLists+0x7c>)
 80088f2:	4a05      	ldr	r2, [pc, #20]	; (8008908 <prvInitialiseTaskLists+0x68>)
 80088f4:	601a      	str	r2, [r3, #0]
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	200006ec 	.word	0x200006ec
 8008904:	20000778 	.word	0x20000778
 8008908:	2000078c 	.word	0x2000078c
 800890c:	200007a8 	.word	0x200007a8
 8008910:	200007bc 	.word	0x200007bc
 8008914:	200007d4 	.word	0x200007d4
 8008918:	200007a0 	.word	0x200007a0
 800891c:	200007a4 	.word	0x200007a4

08008920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008926:	e019      	b.n	800895c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008928:	f000 fa08 	bl	8008d3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <prvCheckTasksWaitingTermination+0x4c>)
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3304      	adds	r3, #4
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff fb96 	bl	800806a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <prvCheckTasksWaitingTermination+0x50>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3b01      	subs	r3, #1
 8008944:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <prvCheckTasksWaitingTermination+0x50>)
 8008946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <prvCheckTasksWaitingTermination+0x54>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3b01      	subs	r3, #1
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <prvCheckTasksWaitingTermination+0x54>)
 8008950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008952:	f000 fa21 	bl	8008d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f80e 	bl	8008978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <prvCheckTasksWaitingTermination+0x54>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e1      	bne.n	8008928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	200007bc 	.word	0x200007bc
 8008970:	200007e8 	.word	0x200007e8
 8008974:	200007d0 	.word	0x200007d0

08008978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008986:	2b00      	cmp	r3, #0
 8008988:	d108      	bne.n	800899c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fb72 	bl	8009078 <vPortFree>
				vPortFree( pxTCB );
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb6f 	bl	8009078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800899a:	e017      	b.n	80089cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d103      	bne.n	80089ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fb66 	bl	8009078 <vPortFree>
	}
 80089ac:	e00e      	b.n	80089cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d009      	beq.n	80089cc <prvDeleteTCB+0x54>
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	e7fe      	b.n	80089ca <prvDeleteTCB+0x52>
	}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089da:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <prvResetNextTaskUnblockTime+0x44>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <prvResetNextTaskUnblockTime+0x14>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e000      	b.n	80089ea <prvResetNextTaskUnblockTime+0x16>
 80089e8:	2300      	movs	r3, #0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089ee:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <prvResetNextTaskUnblockTime+0x48>)
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295
 80089f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089f6:	e008      	b.n	8008a0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089f8:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <prvResetNextTaskUnblockTime+0x44>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4a05      	ldr	r2, [pc, #20]	; (8008a1c <prvResetNextTaskUnblockTime+0x48>)
 8008a08:	6013      	str	r3, [r2, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	200007a0 	.word	0x200007a0
 8008a1c:	20000808 	.word	0x20000808

08008a20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a2a:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a30:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3304      	adds	r3, #4
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fb17 	bl	800806a <uxListRemove>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008a42:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	2201      	movs	r2, #1
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43da      	mvns	r2, r3
 8008a50:	4b21      	ldr	r3, [pc, #132]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4013      	ands	r3, r2
 8008a56:	4a20      	ldr	r2, [pc, #128]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d10a      	bne.n	8008a78 <prvAddCurrentTaskToDelayedList+0x58>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	481a      	ldr	r0, [pc, #104]	; (8008adc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a72:	f7ff fa9d 	bl	8007fb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a76:	e026      	b.n	8008ac6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a80:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d209      	bcs.n	8008aa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7ff faab 	bl	8007ff8 <vListInsert>
}
 8008aa2:	e010      	b.n	8008ac6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aa4:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f7ff faa1 	bl	8007ff8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d202      	bcs.n	8008ac6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ac0:	4a09      	ldr	r2, [pc, #36]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6013      	str	r3, [r2, #0]
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200007ec 	.word	0x200007ec
 8008ad4:	200006e8 	.word	0x200006e8
 8008ad8:	200007f0 	.word	0x200007f0
 8008adc:	200007d4 	.word	0x200007d4
 8008ae0:	200007a4 	.word	0x200007a4
 8008ae4:	200007a0 	.word	0x200007a0
 8008ae8:	20000808 	.word	0x20000808

08008aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3b04      	subs	r3, #4
 8008afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f023 0201 	bic.w	r2, r3, #1
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b1c:	4a0c      	ldr	r2, [pc, #48]	; (8008b50 <pxPortInitialiseStack+0x64>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b14      	subs	r3, #20
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f06f 0202 	mvn.w	r2, #2
 8008b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3b20      	subs	r3, #32
 8008b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b42:	68fb      	ldr	r3, [r7, #12]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	08008b55 	.word	0x08008b55

08008b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <prvTaskExitError+0x50>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d009      	beq.n	8008b7c <prvTaskExitError+0x28>
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e7fe      	b.n	8008b7a <prvTaskExitError+0x26>
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b8e:	bf00      	nop
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0fc      	beq.n	8008b90 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b96:	bf00      	nop
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	2000000c 	.word	0x2000000c
	...

08008bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <pxCurrentTCBConst2>)
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	6808      	ldr	r0, [r1, #0]
 8008bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	f380 8809 	msr	PSP, r0
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f380 8811 	msr	BASEPRI, r0
 8008bca:	4770      	bx	lr
 8008bcc:	f3af 8000 	nop.w

08008bd0 <pxCurrentTCBConst2>:
 8008bd0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop

08008bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bd8:	4808      	ldr	r0, [pc, #32]	; (8008bfc <prvPortStartFirstTask+0x24>)
 8008bda:	6800      	ldr	r0, [r0, #0]
 8008bdc:	6800      	ldr	r0, [r0, #0]
 8008bde:	f380 8808 	msr	MSP, r0
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8814 	msr	CONTROL, r0
 8008bea:	b662      	cpsie	i
 8008bec:	b661      	cpsie	f
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	df00      	svc	0
 8008bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bfa:	bf00      	nop
 8008bfc:	e000ed08 	.word	0xe000ed08

08008c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c06:	4b44      	ldr	r3, [pc, #272]	; (8008d18 <xPortStartScheduler+0x118>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a44      	ldr	r2, [pc, #272]	; (8008d1c <xPortStartScheduler+0x11c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d109      	bne.n	8008c24 <xPortStartScheduler+0x24>
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	e7fe      	b.n	8008c22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c24:	4b3c      	ldr	r3, [pc, #240]	; (8008d18 <xPortStartScheduler+0x118>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a3d      	ldr	r2, [pc, #244]	; (8008d20 <xPortStartScheduler+0x120>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d109      	bne.n	8008c42 <xPortStartScheduler+0x42>
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	e7fe      	b.n	8008c40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c42:	4b38      	ldr	r3, [pc, #224]	; (8008d24 <xPortStartScheduler+0x124>)
 8008c44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	22ff      	movs	r2, #255	; 0xff
 8008c52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4b30      	ldr	r3, [pc, #192]	; (8008d28 <xPortStartScheduler+0x128>)
 8008c68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c6a:	4b30      	ldr	r3, [pc, #192]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008c6c:	2207      	movs	r2, #7
 8008c6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c70:	e009      	b.n	8008c86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008c72:	4b2e      	ldr	r3, [pc, #184]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	4a2c      	ldr	r2, [pc, #176]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008c7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8e:	2b80      	cmp	r3, #128	; 0x80
 8008c90:	d0ef      	beq.n	8008c72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c92:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f1c3 0307 	rsb	r3, r3, #7
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d009      	beq.n	8008cb2 <xPortStartScheduler+0xb2>
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	60bb      	str	r3, [r7, #8]
 8008cb0:	e7fe      	b.n	8008cb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cb2:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	021b      	lsls	r3, r3, #8
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008cba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cbc:	4b1b      	ldr	r3, [pc, #108]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cc4:	4a19      	ldr	r2, [pc, #100]	; (8008d2c <xPortStartScheduler+0x12c>)
 8008cc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cd0:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <xPortStartScheduler+0x130>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <xPortStartScheduler+0x130>)
 8008cd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cdc:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <xPortStartScheduler+0x130>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a13      	ldr	r2, [pc, #76]	; (8008d30 <xPortStartScheduler+0x130>)
 8008ce2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ce8:	f000 f8d6 	bl	8008e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cec:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <xPortStartScheduler+0x134>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cf2:	f000 f8f5 	bl	8008ee0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cf6:	4b10      	ldr	r3, [pc, #64]	; (8008d38 <xPortStartScheduler+0x138>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a0f      	ldr	r2, [pc, #60]	; (8008d38 <xPortStartScheduler+0x138>)
 8008cfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d02:	f7ff ff69 	bl	8008bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d06:	f7ff fd59 	bl	80087bc <vTaskSwitchContext>
	prvTaskExitError();
 8008d0a:	f7ff ff23 	bl	8008b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	e000ed00 	.word	0xe000ed00
 8008d1c:	410fc271 	.word	0x410fc271
 8008d20:	410fc270 	.word	0x410fc270
 8008d24:	e000e400 	.word	0xe000e400
 8008d28:	20000814 	.word	0x20000814
 8008d2c:	20000818 	.word	0x20000818
 8008d30:	e000ed20 	.word	0xe000ed20
 8008d34:	2000000c 	.word	0x2000000c
 8008d38:	e000ef34 	.word	0xe000ef34

08008d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <vPortEnterCritical+0x54>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	4a0d      	ldr	r2, [pc, #52]	; (8008d90 <vPortEnterCritical+0x54>)
 8008d5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <vPortEnterCritical+0x54>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d10e      	bne.n	8008d84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d66:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <vPortEnterCritical+0x58>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d009      	beq.n	8008d84 <vPortEnterCritical+0x48>
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	603b      	str	r3, [r7, #0]
 8008d82:	e7fe      	b.n	8008d82 <vPortEnterCritical+0x46>
	}
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	2000000c 	.word	0x2000000c
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d9e:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <vPortExitCritical+0x4c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <vPortExitCritical+0x22>
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	e7fe      	b.n	8008db8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008dba:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <vPortExitCritical+0x4c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <vPortExitCritical+0x4c>)
 8008dc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <vPortExitCritical+0x4c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <vPortExitCritical+0x3e>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2000000c 	.word	0x2000000c
	...

08008df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <pxCurrentTCBConst>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	f01e 0f10 	tst.w	lr, #16
 8008e00:	bf08      	it	eq
 8008e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e14:	f380 8811 	msr	BASEPRI, r0
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f7ff fccc 	bl	80087bc <vTaskSwitchContext>
 8008e24:	f04f 0000 	mov.w	r0, #0
 8008e28:	f380 8811 	msr	BASEPRI, r0
 8008e2c:	bc09      	pop	{r0, r3}
 8008e2e:	6819      	ldr	r1, [r3, #0]
 8008e30:	6808      	ldr	r0, [r1, #0]
 8008e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e36:	f01e 0f10 	tst.w	lr, #16
 8008e3a:	bf08      	it	eq
 8008e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e40:	f380 8809 	msr	PSP, r0
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	f3af 8000 	nop.w

08008e50 <pxCurrentTCBConst>:
 8008e50:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e70:	f7ff fbe8 	bl	8008644 <xTaskIncrementTick>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e7a:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <SysTick_Handler+0x3c>)
 8008e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	2300      	movs	r3, #0
 8008e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	e000ed04 	.word	0xe000ed04

08008e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <vPortSetupTimerInterrupt+0x34>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <vPortSetupTimerInterrupt+0x38>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <vPortSetupTimerInterrupt+0x3c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <vPortSetupTimerInterrupt+0x40>)
 8008eae:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb2:	099b      	lsrs	r3, r3, #6
 8008eb4:	4a09      	ldr	r2, [pc, #36]	; (8008edc <vPortSetupTimerInterrupt+0x44>)
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eba:	4b04      	ldr	r3, [pc, #16]	; (8008ecc <vPortSetupTimerInterrupt+0x34>)
 8008ebc:	2207      	movs	r2, #7
 8008ebe:	601a      	str	r2, [r3, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	e000e010 	.word	0xe000e010
 8008ed0:	e000e018 	.word	0xe000e018
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	e000e014 	.word	0xe000e014

08008ee0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ee0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ef0 <vPortEnableVFP+0x10>
 8008ee4:	6801      	ldr	r1, [r0, #0]
 8008ee6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eea:	6001      	str	r1, [r0, #0]
 8008eec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eee:	bf00      	nop
 8008ef0:	e000ed88 	.word	0xe000ed88

08008ef4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f00:	f7ff faf6 	bl	80084f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f04:	4b57      	ldr	r3, [pc, #348]	; (8009064 <pvPortMalloc+0x170>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f0c:	f000 f90c 	bl	8009128 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f10:	4b55      	ldr	r3, [pc, #340]	; (8009068 <pvPortMalloc+0x174>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 808c 	bne.w	8009036 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01c      	beq.n	8008f5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008f24:	2208      	movs	r2, #8
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d013      	beq.n	8008f5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f023 0307 	bic.w	r3, r3, #7
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d009      	beq.n	8008f5e <pvPortMalloc+0x6a>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e7fe      	b.n	8008f5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d068      	beq.n	8009036 <pvPortMalloc+0x142>
 8008f64:	4b41      	ldr	r3, [pc, #260]	; (800906c <pvPortMalloc+0x178>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d863      	bhi.n	8009036 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f6e:	4b40      	ldr	r3, [pc, #256]	; (8009070 <pvPortMalloc+0x17c>)
 8008f70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f72:	4b3f      	ldr	r3, [pc, #252]	; (8009070 <pvPortMalloc+0x17c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f78:	e004      	b.n	8008f84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d903      	bls.n	8008f96 <pvPortMalloc+0xa2>
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1f1      	bne.n	8008f7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f96:	4b33      	ldr	r3, [pc, #204]	; (8009064 <pvPortMalloc+0x170>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d04a      	beq.n	8009036 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2208      	movs	r2, #8
 8008fa6:	4413      	add	r3, r2
 8008fa8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	1ad2      	subs	r2, r2, r3
 8008fba:	2308      	movs	r3, #8
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d91e      	bls.n	8009000 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d009      	beq.n	8008fe8 <pvPortMalloc+0xf4>
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	613b      	str	r3, [r7, #16]
 8008fe6:	e7fe      	b.n	8008fe6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	1ad2      	subs	r2, r2, r3
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ffa:	69b8      	ldr	r0, [r7, #24]
 8008ffc:	f000 f8f6 	bl	80091ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009000:	4b1a      	ldr	r3, [pc, #104]	; (800906c <pvPortMalloc+0x178>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	4a18      	ldr	r2, [pc, #96]	; (800906c <pvPortMalloc+0x178>)
 800900c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800900e:	4b17      	ldr	r3, [pc, #92]	; (800906c <pvPortMalloc+0x178>)
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b18      	ldr	r3, [pc, #96]	; (8009074 <pvPortMalloc+0x180>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d203      	bcs.n	8009022 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800901a:	4b14      	ldr	r3, [pc, #80]	; (800906c <pvPortMalloc+0x178>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a15      	ldr	r2, [pc, #84]	; (8009074 <pvPortMalloc+0x180>)
 8009020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b10      	ldr	r3, [pc, #64]	; (8009068 <pvPortMalloc+0x174>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	431a      	orrs	r2, r3
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009036:	f7ff fa69 	bl	800850c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	2b00      	cmp	r3, #0
 8009042:	d009      	beq.n	8009058 <pvPortMalloc+0x164>
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e7fe      	b.n	8009056 <pvPortMalloc+0x162>
	return pvReturn;
 8009058:	69fb      	ldr	r3, [r7, #28]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3728      	adds	r7, #40	; 0x28
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20004424 	.word	0x20004424
 8009068:	20004430 	.word	0x20004430
 800906c:	20004428 	.word	0x20004428
 8009070:	2000441c 	.word	0x2000441c
 8009074:	2000442c 	.word	0x2000442c

08009078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d046      	beq.n	8009118 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800908a:	2308      	movs	r3, #8
 800908c:	425b      	negs	r3, r3
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4413      	add	r3, r2
 8009092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4b20      	ldr	r3, [pc, #128]	; (8009120 <vPortFree+0xa8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4013      	ands	r3, r2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <vPortFree+0x42>
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e7fe      	b.n	80090b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d009      	beq.n	80090d6 <vPortFree+0x5e>
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	e7fe      	b.n	80090d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <vPortFree+0xa8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4013      	ands	r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d019      	beq.n	8009118 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d115      	bne.n	8009118 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <vPortFree+0xa8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	43db      	mvns	r3, r3
 80090f6:	401a      	ands	r2, r3
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090fc:	f7ff f9f8 	bl	80084f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	4b07      	ldr	r3, [pc, #28]	; (8009124 <vPortFree+0xac>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4413      	add	r3, r2
 800910a:	4a06      	ldr	r2, [pc, #24]	; (8009124 <vPortFree+0xac>)
 800910c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800910e:	6938      	ldr	r0, [r7, #16]
 8009110:	f000 f86c 	bl	80091ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009114:	f7ff f9fa 	bl	800850c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009118:	bf00      	nop
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20004430 	.word	0x20004430
 8009124:	20004428 	.word	0x20004428

08009128 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800912e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009132:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <prvHeapInit+0xac>)
 8009136:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00c      	beq.n	800915c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3307      	adds	r3, #7
 8009146:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <prvHeapInit+0xac>)
 8009158:	4413      	add	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009160:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <prvHeapInit+0xb0>)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009166:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <prvHeapInit+0xb0>)
 8009168:	2200      	movs	r2, #0
 800916a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009174:	2208      	movs	r2, #8
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0307 	bic.w	r3, r3, #7
 8009182:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a15      	ldr	r2, [pc, #84]	; (80091dc <prvHeapInit+0xb4>)
 8009188:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800918a:	4b14      	ldr	r3, [pc, #80]	; (80091dc <prvHeapInit+0xb4>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009192:	4b12      	ldr	r3, [pc, #72]	; (80091dc <prvHeapInit+0xb4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091a8:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <prvHeapInit+0xb4>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <prvHeapInit+0xb8>)
 80091b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <prvHeapInit+0xbc>)
 80091be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091c0:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <prvHeapInit+0xc0>)
 80091c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091c6:	601a      	str	r2, [r3, #0]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	2000081c 	.word	0x2000081c
 80091d8:	2000441c 	.word	0x2000441c
 80091dc:	20004424 	.word	0x20004424
 80091e0:	2000442c 	.word	0x2000442c
 80091e4:	20004428 	.word	0x20004428
 80091e8:	20004430 	.word	0x20004430

080091ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091f4:	4b28      	ldr	r3, [pc, #160]	; (8009298 <prvInsertBlockIntoFreeList+0xac>)
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e002      	b.n	8009200 <prvInsertBlockIntoFreeList+0x14>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d8f7      	bhi.n	80091fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d108      	bne.n	800922e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	441a      	add	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d118      	bne.n	8009274 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b15      	ldr	r3, [pc, #84]	; (800929c <prvInsertBlockIntoFreeList+0xb0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	d00d      	beq.n	800926a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	441a      	add	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e008      	b.n	800927c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <prvInsertBlockIntoFreeList+0xb0>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e003      	b.n	800927c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d002      	beq.n	800928a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	2000441c 	.word	0x2000441c
 800929c:	20004424 	.word	0x20004424

080092a0 <cos>:
 80092a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092a2:	ec51 0b10 	vmov	r0, r1, d0
 80092a6:	4a1e      	ldr	r2, [pc, #120]	; (8009320 <cos+0x80>)
 80092a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092ac:	4293      	cmp	r3, r2
 80092ae:	dc06      	bgt.n	80092be <cos+0x1e>
 80092b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009318 <cos+0x78>
 80092b4:	f000 fc60 	bl	8009b78 <__kernel_cos>
 80092b8:	ec51 0b10 	vmov	r0, r1, d0
 80092bc:	e007      	b.n	80092ce <cos+0x2e>
 80092be:	4a19      	ldr	r2, [pc, #100]	; (8009324 <cos+0x84>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	dd09      	ble.n	80092d8 <cos+0x38>
 80092c4:	ee10 2a10 	vmov	r2, s0
 80092c8:	460b      	mov	r3, r1
 80092ca:	f7f6 ff85 	bl	80001d8 <__aeabi_dsub>
 80092ce:	ec41 0b10 	vmov	d0, r0, r1
 80092d2:	b005      	add	sp, #20
 80092d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80092d8:	4668      	mov	r0, sp
 80092da:	f000 f9a9 	bl	8009630 <__ieee754_rem_pio2>
 80092de:	f000 0003 	and.w	r0, r0, #3
 80092e2:	2801      	cmp	r0, #1
 80092e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092e8:	ed9d 0b00 	vldr	d0, [sp]
 80092ec:	d007      	beq.n	80092fe <cos+0x5e>
 80092ee:	2802      	cmp	r0, #2
 80092f0:	d00e      	beq.n	8009310 <cos+0x70>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d0de      	beq.n	80092b4 <cos+0x14>
 80092f6:	2001      	movs	r0, #1
 80092f8:	f001 f846 	bl	800a388 <__kernel_sin>
 80092fc:	e7dc      	b.n	80092b8 <cos+0x18>
 80092fe:	f001 f843 	bl	800a388 <__kernel_sin>
 8009302:	ec53 2b10 	vmov	r2, r3, d0
 8009306:	ee10 0a10 	vmov	r0, s0
 800930a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800930e:	e7de      	b.n	80092ce <cos+0x2e>
 8009310:	f000 fc32 	bl	8009b78 <__kernel_cos>
 8009314:	e7f5      	b.n	8009302 <cos+0x62>
 8009316:	bf00      	nop
	...
 8009320:	3fe921fb 	.word	0x3fe921fb
 8009324:	7fefffff 	.word	0x7fefffff

08009328 <sin>:
 8009328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800932a:	ec51 0b10 	vmov	r0, r1, d0
 800932e:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <sin+0x88>)
 8009330:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009334:	4293      	cmp	r3, r2
 8009336:	dc07      	bgt.n	8009348 <sin+0x20>
 8009338:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80093a8 <sin+0x80>
 800933c:	2000      	movs	r0, #0
 800933e:	f001 f823 	bl	800a388 <__kernel_sin>
 8009342:	ec51 0b10 	vmov	r0, r1, d0
 8009346:	e007      	b.n	8009358 <sin+0x30>
 8009348:	4a1a      	ldr	r2, [pc, #104]	; (80093b4 <sin+0x8c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	dd09      	ble.n	8009362 <sin+0x3a>
 800934e:	ee10 2a10 	vmov	r2, s0
 8009352:	460b      	mov	r3, r1
 8009354:	f7f6 ff40 	bl	80001d8 <__aeabi_dsub>
 8009358:	ec41 0b10 	vmov	d0, r0, r1
 800935c:	b005      	add	sp, #20
 800935e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009362:	4668      	mov	r0, sp
 8009364:	f000 f964 	bl	8009630 <__ieee754_rem_pio2>
 8009368:	f000 0003 	and.w	r0, r0, #3
 800936c:	2801      	cmp	r0, #1
 800936e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009372:	ed9d 0b00 	vldr	d0, [sp]
 8009376:	d004      	beq.n	8009382 <sin+0x5a>
 8009378:	2802      	cmp	r0, #2
 800937a:	d005      	beq.n	8009388 <sin+0x60>
 800937c:	b970      	cbnz	r0, 800939c <sin+0x74>
 800937e:	2001      	movs	r0, #1
 8009380:	e7dd      	b.n	800933e <sin+0x16>
 8009382:	f000 fbf9 	bl	8009b78 <__kernel_cos>
 8009386:	e7dc      	b.n	8009342 <sin+0x1a>
 8009388:	2001      	movs	r0, #1
 800938a:	f000 fffd 	bl	800a388 <__kernel_sin>
 800938e:	ec53 2b10 	vmov	r2, r3, d0
 8009392:	ee10 0a10 	vmov	r0, s0
 8009396:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800939a:	e7dd      	b.n	8009358 <sin+0x30>
 800939c:	f000 fbec 	bl	8009b78 <__kernel_cos>
 80093a0:	e7f5      	b.n	800938e <sin+0x66>
 80093a2:	bf00      	nop
 80093a4:	f3af 8000 	nop.w
	...
 80093b0:	3fe921fb 	.word	0x3fe921fb
 80093b4:	7fefffff 	.word	0x7fefffff

080093b8 <atan2>:
 80093b8:	f000 b85a 	b.w	8009470 <__ieee754_atan2>

080093bc <sqrt>:
 80093bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093c0:	ed2d 8b02 	vpush	{d8}
 80093c4:	b08b      	sub	sp, #44	; 0x2c
 80093c6:	ec55 4b10 	vmov	r4, r5, d0
 80093ca:	f000 fb23 	bl	8009a14 <__ieee754_sqrt>
 80093ce:	4b26      	ldr	r3, [pc, #152]	; (8009468 <sqrt+0xac>)
 80093d0:	eeb0 8a40 	vmov.f32	s16, s0
 80093d4:	eef0 8a60 	vmov.f32	s17, s1
 80093d8:	f993 6000 	ldrsb.w	r6, [r3]
 80093dc:	1c73      	adds	r3, r6, #1
 80093de:	d02a      	beq.n	8009436 <sqrt+0x7a>
 80093e0:	4622      	mov	r2, r4
 80093e2:	462b      	mov	r3, r5
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 fb48 	bl	8000a7c <__aeabi_dcmpun>
 80093ec:	4607      	mov	r7, r0
 80093ee:	bb10      	cbnz	r0, 8009436 <sqrt+0x7a>
 80093f0:	f04f 0800 	mov.w	r8, #0
 80093f4:	f04f 0900 	mov.w	r9, #0
 80093f8:	4642      	mov	r2, r8
 80093fa:	464b      	mov	r3, r9
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 fb14 	bl	8000a2c <__aeabi_dcmplt>
 8009404:	b1b8      	cbz	r0, 8009436 <sqrt+0x7a>
 8009406:	2301      	movs	r3, #1
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	4b18      	ldr	r3, [pc, #96]	; (800946c <sqrt+0xb0>)
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	9708      	str	r7, [sp, #32]
 8009410:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009414:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009418:	b9b6      	cbnz	r6, 8009448 <sqrt+0x8c>
 800941a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800941e:	4668      	mov	r0, sp
 8009420:	f001 fa9e 	bl	800a960 <matherr>
 8009424:	b1d0      	cbz	r0, 800945c <sqrt+0xa0>
 8009426:	9b08      	ldr	r3, [sp, #32]
 8009428:	b11b      	cbz	r3, 8009432 <sqrt+0x76>
 800942a:	f001 fb23 	bl	800aa74 <__errno>
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	6003      	str	r3, [r0, #0]
 8009432:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009436:	eeb0 0a48 	vmov.f32	s0, s16
 800943a:	eef0 0a68 	vmov.f32	s1, s17
 800943e:	b00b      	add	sp, #44	; 0x2c
 8009440:	ecbd 8b02 	vpop	{d8}
 8009444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	4640      	mov	r0, r8
 800944e:	4649      	mov	r1, r9
 8009450:	f7f7 f9a4 	bl	800079c <__aeabi_ddiv>
 8009454:	2e02      	cmp	r6, #2
 8009456:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800945a:	d1e0      	bne.n	800941e <sqrt+0x62>
 800945c:	f001 fb0a 	bl	800aa74 <__errno>
 8009460:	2321      	movs	r3, #33	; 0x21
 8009462:	6003      	str	r3, [r0, #0]
 8009464:	e7df      	b.n	8009426 <sqrt+0x6a>
 8009466:	bf00      	nop
 8009468:	20000010 	.word	0x20000010
 800946c:	0800ad48 	.word	0x0800ad48

08009470 <__ieee754_atan2>:
 8009470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009474:	ec57 6b11 	vmov	r6, r7, d1
 8009478:	4273      	negs	r3, r6
 800947a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800947e:	4333      	orrs	r3, r6
 8009480:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009628 <__ieee754_atan2+0x1b8>
 8009484:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009488:	4573      	cmp	r3, lr
 800948a:	ec51 0b10 	vmov	r0, r1, d0
 800948e:	ee11 8a10 	vmov	r8, s2
 8009492:	d80a      	bhi.n	80094aa <__ieee754_atan2+0x3a>
 8009494:	4244      	negs	r4, r0
 8009496:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800949a:	4304      	orrs	r4, r0
 800949c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80094a0:	4574      	cmp	r4, lr
 80094a2:	468c      	mov	ip, r1
 80094a4:	ee10 9a10 	vmov	r9, s0
 80094a8:	d907      	bls.n	80094ba <__ieee754_atan2+0x4a>
 80094aa:	4632      	mov	r2, r6
 80094ac:	463b      	mov	r3, r7
 80094ae:	f7f6 fe95 	bl	80001dc <__adddf3>
 80094b2:	ec41 0b10 	vmov	d0, r0, r1
 80094b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80094be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094c2:	4334      	orrs	r4, r6
 80094c4:	d103      	bne.n	80094ce <__ieee754_atan2+0x5e>
 80094c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ca:	f001 b819 	b.w	800a500 <atan>
 80094ce:	17bc      	asrs	r4, r7, #30
 80094d0:	f004 0402 	and.w	r4, r4, #2
 80094d4:	ea53 0909 	orrs.w	r9, r3, r9
 80094d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80094dc:	d107      	bne.n	80094ee <__ieee754_atan2+0x7e>
 80094de:	2c02      	cmp	r4, #2
 80094e0:	d073      	beq.n	80095ca <__ieee754_atan2+0x15a>
 80094e2:	2c03      	cmp	r4, #3
 80094e4:	d1e5      	bne.n	80094b2 <__ieee754_atan2+0x42>
 80094e6:	a13e      	add	r1, pc, #248	; (adr r1, 80095e0 <__ieee754_atan2+0x170>)
 80094e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ec:	e7e1      	b.n	80094b2 <__ieee754_atan2+0x42>
 80094ee:	ea52 0808 	orrs.w	r8, r2, r8
 80094f2:	d106      	bne.n	8009502 <__ieee754_atan2+0x92>
 80094f4:	f1bc 0f00 	cmp.w	ip, #0
 80094f8:	da6b      	bge.n	80095d2 <__ieee754_atan2+0x162>
 80094fa:	a13b      	add	r1, pc, #236	; (adr r1, 80095e8 <__ieee754_atan2+0x178>)
 80094fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009500:	e7d7      	b.n	80094b2 <__ieee754_atan2+0x42>
 8009502:	4572      	cmp	r2, lr
 8009504:	d120      	bne.n	8009548 <__ieee754_atan2+0xd8>
 8009506:	4293      	cmp	r3, r2
 8009508:	d111      	bne.n	800952e <__ieee754_atan2+0xbe>
 800950a:	2c02      	cmp	r4, #2
 800950c:	d007      	beq.n	800951e <__ieee754_atan2+0xae>
 800950e:	2c03      	cmp	r4, #3
 8009510:	d009      	beq.n	8009526 <__ieee754_atan2+0xb6>
 8009512:	2c01      	cmp	r4, #1
 8009514:	d155      	bne.n	80095c2 <__ieee754_atan2+0x152>
 8009516:	a136      	add	r1, pc, #216	; (adr r1, 80095f0 <__ieee754_atan2+0x180>)
 8009518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800951c:	e7c9      	b.n	80094b2 <__ieee754_atan2+0x42>
 800951e:	a136      	add	r1, pc, #216	; (adr r1, 80095f8 <__ieee754_atan2+0x188>)
 8009520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009524:	e7c5      	b.n	80094b2 <__ieee754_atan2+0x42>
 8009526:	a136      	add	r1, pc, #216	; (adr r1, 8009600 <__ieee754_atan2+0x190>)
 8009528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952c:	e7c1      	b.n	80094b2 <__ieee754_atan2+0x42>
 800952e:	2c02      	cmp	r4, #2
 8009530:	d04b      	beq.n	80095ca <__ieee754_atan2+0x15a>
 8009532:	2c03      	cmp	r4, #3
 8009534:	d0d7      	beq.n	80094e6 <__ieee754_atan2+0x76>
 8009536:	2c01      	cmp	r4, #1
 8009538:	f04f 0000 	mov.w	r0, #0
 800953c:	d102      	bne.n	8009544 <__ieee754_atan2+0xd4>
 800953e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009542:	e7b6      	b.n	80094b2 <__ieee754_atan2+0x42>
 8009544:	2100      	movs	r1, #0
 8009546:	e7b4      	b.n	80094b2 <__ieee754_atan2+0x42>
 8009548:	4573      	cmp	r3, lr
 800954a:	d0d3      	beq.n	80094f4 <__ieee754_atan2+0x84>
 800954c:	1a9b      	subs	r3, r3, r2
 800954e:	151b      	asrs	r3, r3, #20
 8009550:	2b3c      	cmp	r3, #60	; 0x3c
 8009552:	dc1e      	bgt.n	8009592 <__ieee754_atan2+0x122>
 8009554:	2f00      	cmp	r7, #0
 8009556:	da01      	bge.n	800955c <__ieee754_atan2+0xec>
 8009558:	333c      	adds	r3, #60	; 0x3c
 800955a:	db1e      	blt.n	800959a <__ieee754_atan2+0x12a>
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	f7f7 f91c 	bl	800079c <__aeabi_ddiv>
 8009564:	ec41 0b10 	vmov	d0, r0, r1
 8009568:	f001 f96a 	bl	800a840 <fabs>
 800956c:	f000 ffc8 	bl	800a500 <atan>
 8009570:	ec51 0b10 	vmov	r0, r1, d0
 8009574:	2c01      	cmp	r4, #1
 8009576:	d013      	beq.n	80095a0 <__ieee754_atan2+0x130>
 8009578:	2c02      	cmp	r4, #2
 800957a:	d015      	beq.n	80095a8 <__ieee754_atan2+0x138>
 800957c:	2c00      	cmp	r4, #0
 800957e:	d098      	beq.n	80094b2 <__ieee754_atan2+0x42>
 8009580:	a321      	add	r3, pc, #132	; (adr r3, 8009608 <__ieee754_atan2+0x198>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f6 fe27 	bl	80001d8 <__aeabi_dsub>
 800958a:	a321      	add	r3, pc, #132	; (adr r3, 8009610 <__ieee754_atan2+0x1a0>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	e014      	b.n	80095bc <__ieee754_atan2+0x14c>
 8009592:	a121      	add	r1, pc, #132	; (adr r1, 8009618 <__ieee754_atan2+0x1a8>)
 8009594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009598:	e7ec      	b.n	8009574 <__ieee754_atan2+0x104>
 800959a:	2000      	movs	r0, #0
 800959c:	2100      	movs	r1, #0
 800959e:	e7e9      	b.n	8009574 <__ieee754_atan2+0x104>
 80095a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095a4:	4619      	mov	r1, r3
 80095a6:	e784      	b.n	80094b2 <__ieee754_atan2+0x42>
 80095a8:	a317      	add	r3, pc, #92	; (adr r3, 8009608 <__ieee754_atan2+0x198>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f6 fe13 	bl	80001d8 <__aeabi_dsub>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	a116      	add	r1, pc, #88	; (adr r1, 8009610 <__ieee754_atan2+0x1a0>)
 80095b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095bc:	f7f6 fe0c 	bl	80001d8 <__aeabi_dsub>
 80095c0:	e777      	b.n	80094b2 <__ieee754_atan2+0x42>
 80095c2:	a117      	add	r1, pc, #92	; (adr r1, 8009620 <__ieee754_atan2+0x1b0>)
 80095c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c8:	e773      	b.n	80094b2 <__ieee754_atan2+0x42>
 80095ca:	a111      	add	r1, pc, #68	; (adr r1, 8009610 <__ieee754_atan2+0x1a0>)
 80095cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d0:	e76f      	b.n	80094b2 <__ieee754_atan2+0x42>
 80095d2:	a111      	add	r1, pc, #68	; (adr r1, 8009618 <__ieee754_atan2+0x1a8>)
 80095d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d8:	e76b      	b.n	80094b2 <__ieee754_atan2+0x42>
 80095da:	bf00      	nop
 80095dc:	f3af 8000 	nop.w
 80095e0:	54442d18 	.word	0x54442d18
 80095e4:	c00921fb 	.word	0xc00921fb
 80095e8:	54442d18 	.word	0x54442d18
 80095ec:	bff921fb 	.word	0xbff921fb
 80095f0:	54442d18 	.word	0x54442d18
 80095f4:	bfe921fb 	.word	0xbfe921fb
 80095f8:	7f3321d2 	.word	0x7f3321d2
 80095fc:	4002d97c 	.word	0x4002d97c
 8009600:	7f3321d2 	.word	0x7f3321d2
 8009604:	c002d97c 	.word	0xc002d97c
 8009608:	33145c07 	.word	0x33145c07
 800960c:	3ca1a626 	.word	0x3ca1a626
 8009610:	54442d18 	.word	0x54442d18
 8009614:	400921fb 	.word	0x400921fb
 8009618:	54442d18 	.word	0x54442d18
 800961c:	3ff921fb 	.word	0x3ff921fb
 8009620:	54442d18 	.word	0x54442d18
 8009624:	3fe921fb 	.word	0x3fe921fb
 8009628:	7ff00000 	.word	0x7ff00000
 800962c:	00000000 	.word	0x00000000

08009630 <__ieee754_rem_pio2>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ec57 6b10 	vmov	r6, r7, d0
 8009638:	4bc3      	ldr	r3, [pc, #780]	; (8009948 <__ieee754_rem_pio2+0x318>)
 800963a:	b08d      	sub	sp, #52	; 0x34
 800963c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009640:	4598      	cmp	r8, r3
 8009642:	4604      	mov	r4, r0
 8009644:	9704      	str	r7, [sp, #16]
 8009646:	dc07      	bgt.n	8009658 <__ieee754_rem_pio2+0x28>
 8009648:	2200      	movs	r2, #0
 800964a:	2300      	movs	r3, #0
 800964c:	ed84 0b00 	vstr	d0, [r4]
 8009650:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009654:	2500      	movs	r5, #0
 8009656:	e027      	b.n	80096a8 <__ieee754_rem_pio2+0x78>
 8009658:	4bbc      	ldr	r3, [pc, #752]	; (800994c <__ieee754_rem_pio2+0x31c>)
 800965a:	4598      	cmp	r8, r3
 800965c:	dc75      	bgt.n	800974a <__ieee754_rem_pio2+0x11a>
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	4dbb      	ldr	r5, [pc, #748]	; (8009950 <__ieee754_rem_pio2+0x320>)
 8009662:	2b00      	cmp	r3, #0
 8009664:	ee10 0a10 	vmov	r0, s0
 8009668:	a3a9      	add	r3, pc, #676	; (adr r3, 8009910 <__ieee754_rem_pio2+0x2e0>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	4639      	mov	r1, r7
 8009670:	dd36      	ble.n	80096e0 <__ieee754_rem_pio2+0xb0>
 8009672:	f7f6 fdb1 	bl	80001d8 <__aeabi_dsub>
 8009676:	45a8      	cmp	r8, r5
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	d018      	beq.n	80096b0 <__ieee754_rem_pio2+0x80>
 800967e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f7f6 fda8 	bl	80001d8 <__aeabi_dsub>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	e9c4 2300 	strd	r2, r3, [r4]
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 fda0 	bl	80001d8 <__aeabi_dsub>
 8009698:	a39f      	add	r3, pc, #636	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fd9b 	bl	80001d8 <__aeabi_dsub>
 80096a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80096a6:	2501      	movs	r5, #1
 80096a8:	4628      	mov	r0, r5
 80096aa:	b00d      	add	sp, #52	; 0x34
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b0:	a39b      	add	r3, pc, #620	; (adr r3, 8009920 <__ieee754_rem_pio2+0x2f0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 fd8f 	bl	80001d8 <__aeabi_dsub>
 80096ba:	a39b      	add	r3, pc, #620	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	4606      	mov	r6, r0
 80096c2:	460f      	mov	r7, r1
 80096c4:	f7f6 fd88 	bl	80001d8 <__aeabi_dsub>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	e9c4 2300 	strd	r2, r3, [r4]
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f6 fd80 	bl	80001d8 <__aeabi_dsub>
 80096d8:	a393      	add	r3, pc, #588	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	e7de      	b.n	800969e <__ieee754_rem_pio2+0x6e>
 80096e0:	f7f6 fd7c 	bl	80001dc <__adddf3>
 80096e4:	45a8      	cmp	r8, r5
 80096e6:	4606      	mov	r6, r0
 80096e8:	460f      	mov	r7, r1
 80096ea:	d016      	beq.n	800971a <__ieee754_rem_pio2+0xea>
 80096ec:	a38a      	add	r3, pc, #552	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fd73 	bl	80001dc <__adddf3>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	e9c4 2300 	strd	r2, r3, [r4]
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fd69 	bl	80001d8 <__aeabi_dsub>
 8009706:	a384      	add	r3, pc, #528	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 fd66 	bl	80001dc <__adddf3>
 8009710:	f04f 35ff 	mov.w	r5, #4294967295
 8009714:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009718:	e7c6      	b.n	80096a8 <__ieee754_rem_pio2+0x78>
 800971a:	a381      	add	r3, pc, #516	; (adr r3, 8009920 <__ieee754_rem_pio2+0x2f0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fd5c 	bl	80001dc <__adddf3>
 8009724:	a380      	add	r3, pc, #512	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	f7f6 fd55 	bl	80001dc <__adddf3>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	e9c4 2300 	strd	r2, r3, [r4]
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	f7f6 fd4b 	bl	80001d8 <__aeabi_dsub>
 8009742:	a379      	add	r3, pc, #484	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e7e0      	b.n	800970c <__ieee754_rem_pio2+0xdc>
 800974a:	4b82      	ldr	r3, [pc, #520]	; (8009954 <__ieee754_rem_pio2+0x324>)
 800974c:	4598      	cmp	r8, r3
 800974e:	f300 80d0 	bgt.w	80098f2 <__ieee754_rem_pio2+0x2c2>
 8009752:	f001 f875 	bl	800a840 <fabs>
 8009756:	ec57 6b10 	vmov	r6, r7, d0
 800975a:	ee10 0a10 	vmov	r0, s0
 800975e:	a374      	add	r3, pc, #464	; (adr r3, 8009930 <__ieee754_rem_pio2+0x300>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 feef 	bl	8000548 <__aeabi_dmul>
 800976a:	2200      	movs	r2, #0
 800976c:	4b7a      	ldr	r3, [pc, #488]	; (8009958 <__ieee754_rem_pio2+0x328>)
 800976e:	f7f6 fd35 	bl	80001dc <__adddf3>
 8009772:	f7f7 f999 	bl	8000aa8 <__aeabi_d2iz>
 8009776:	4605      	mov	r5, r0
 8009778:	f7f6 fe7c 	bl	8000474 <__aeabi_i2d>
 800977c:	a364      	add	r3, pc, #400	; (adr r3, 8009910 <__ieee754_rem_pio2+0x2e0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009786:	f7f6 fedf 	bl	8000548 <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f6 fd21 	bl	80001d8 <__aeabi_dsub>
 8009796:	a360      	add	r3, pc, #384	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a4:	f7f6 fed0 	bl	8000548 <__aeabi_dmul>
 80097a8:	2d1f      	cmp	r5, #31
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	dc0c      	bgt.n	80097ca <__ieee754_rem_pio2+0x19a>
 80097b0:	1e6a      	subs	r2, r5, #1
 80097b2:	4b6a      	ldr	r3, [pc, #424]	; (800995c <__ieee754_rem_pio2+0x32c>)
 80097b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b8:	4543      	cmp	r3, r8
 80097ba:	d006      	beq.n	80097ca <__ieee754_rem_pio2+0x19a>
 80097bc:	4632      	mov	r2, r6
 80097be:	463b      	mov	r3, r7
 80097c0:	4650      	mov	r0, sl
 80097c2:	4659      	mov	r1, fp
 80097c4:	f7f6 fd08 	bl	80001d8 <__aeabi_dsub>
 80097c8:	e00e      	b.n	80097e8 <__ieee754_rem_pio2+0x1b8>
 80097ca:	4632      	mov	r2, r6
 80097cc:	463b      	mov	r3, r7
 80097ce:	4650      	mov	r0, sl
 80097d0:	4659      	mov	r1, fp
 80097d2:	f7f6 fd01 	bl	80001d8 <__aeabi_dsub>
 80097d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	9a05      	ldr	r2, [sp, #20]
 80097de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	dc02      	bgt.n	80097ee <__ieee754_rem_pio2+0x1be>
 80097e8:	e9c4 0100 	strd	r0, r1, [r4]
 80097ec:	e039      	b.n	8009862 <__ieee754_rem_pio2+0x232>
 80097ee:	a34c      	add	r3, pc, #304	; (adr r3, 8009920 <__ieee754_rem_pio2+0x2f0>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f8:	f7f6 fea6 	bl	8000548 <__aeabi_dmul>
 80097fc:	4606      	mov	r6, r0
 80097fe:	460f      	mov	r7, r1
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4650      	mov	r0, sl
 8009806:	4659      	mov	r1, fp
 8009808:	f7f6 fce6 	bl	80001d8 <__aeabi_dsub>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4680      	mov	r8, r0
 8009812:	4689      	mov	r9, r1
 8009814:	4650      	mov	r0, sl
 8009816:	4659      	mov	r1, fp
 8009818:	f7f6 fcde 	bl	80001d8 <__aeabi_dsub>
 800981c:	4632      	mov	r2, r6
 800981e:	463b      	mov	r3, r7
 8009820:	f7f6 fcda 	bl	80001d8 <__aeabi_dsub>
 8009824:	a340      	add	r3, pc, #256	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009832:	f7f6 fe89 	bl	8000548 <__aeabi_dmul>
 8009836:	4632      	mov	r2, r6
 8009838:	463b      	mov	r3, r7
 800983a:	f7f6 fccd 	bl	80001d8 <__aeabi_dsub>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4606      	mov	r6, r0
 8009844:	460f      	mov	r7, r1
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f6 fcc5 	bl	80001d8 <__aeabi_dsub>
 800984e:	9a05      	ldr	r2, [sp, #20]
 8009850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b31      	cmp	r3, #49	; 0x31
 8009858:	dc20      	bgt.n	800989c <__ieee754_rem_pio2+0x26c>
 800985a:	e9c4 0100 	strd	r0, r1, [r4]
 800985e:	46c2      	mov	sl, r8
 8009860:	46cb      	mov	fp, r9
 8009862:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009866:	4650      	mov	r0, sl
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	4659      	mov	r1, fp
 800986e:	f7f6 fcb3 	bl	80001d8 <__aeabi_dsub>
 8009872:	463b      	mov	r3, r7
 8009874:	4632      	mov	r2, r6
 8009876:	f7f6 fcaf 	bl	80001d8 <__aeabi_dsub>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009882:	f6bf af11 	bge.w	80096a8 <__ieee754_rem_pio2+0x78>
 8009886:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800988a:	6063      	str	r3, [r4, #4]
 800988c:	f8c4 8000 	str.w	r8, [r4]
 8009890:	60a0      	str	r0, [r4, #8]
 8009892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009896:	60e3      	str	r3, [r4, #12]
 8009898:	426d      	negs	r5, r5
 800989a:	e705      	b.n	80096a8 <__ieee754_rem_pio2+0x78>
 800989c:	a326      	add	r3, pc, #152	; (adr r3, 8009938 <__ieee754_rem_pio2+0x308>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a6:	f7f6 fe4f 	bl	8000548 <__aeabi_dmul>
 80098aa:	4606      	mov	r6, r0
 80098ac:	460f      	mov	r7, r1
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fc8f 	bl	80001d8 <__aeabi_dsub>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4682      	mov	sl, r0
 80098c0:	468b      	mov	fp, r1
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	f7f6 fc87 	bl	80001d8 <__aeabi_dsub>
 80098ca:	4632      	mov	r2, r6
 80098cc:	463b      	mov	r3, r7
 80098ce:	f7f6 fc83 	bl	80001d8 <__aeabi_dsub>
 80098d2:	a31b      	add	r3, pc, #108	; (adr r3, 8009940 <__ieee754_rem_pio2+0x310>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e0:	f7f6 fe32 	bl	8000548 <__aeabi_dmul>
 80098e4:	4632      	mov	r2, r6
 80098e6:	463b      	mov	r3, r7
 80098e8:	f7f6 fc76 	bl	80001d8 <__aeabi_dsub>
 80098ec:	4606      	mov	r6, r0
 80098ee:	460f      	mov	r7, r1
 80098f0:	e764      	b.n	80097bc <__ieee754_rem_pio2+0x18c>
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <__ieee754_rem_pio2+0x330>)
 80098f4:	4598      	cmp	r8, r3
 80098f6:	dd35      	ble.n	8009964 <__ieee754_rem_pio2+0x334>
 80098f8:	ee10 2a10 	vmov	r2, s0
 80098fc:	463b      	mov	r3, r7
 80098fe:	4630      	mov	r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	f7f6 fc69 	bl	80001d8 <__aeabi_dsub>
 8009906:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800990a:	e9c4 0100 	strd	r0, r1, [r4]
 800990e:	e6a1      	b.n	8009654 <__ieee754_rem_pio2+0x24>
 8009910:	54400000 	.word	0x54400000
 8009914:	3ff921fb 	.word	0x3ff921fb
 8009918:	1a626331 	.word	0x1a626331
 800991c:	3dd0b461 	.word	0x3dd0b461
 8009920:	1a600000 	.word	0x1a600000
 8009924:	3dd0b461 	.word	0x3dd0b461
 8009928:	2e037073 	.word	0x2e037073
 800992c:	3ba3198a 	.word	0x3ba3198a
 8009930:	6dc9c883 	.word	0x6dc9c883
 8009934:	3fe45f30 	.word	0x3fe45f30
 8009938:	2e000000 	.word	0x2e000000
 800993c:	3ba3198a 	.word	0x3ba3198a
 8009940:	252049c1 	.word	0x252049c1
 8009944:	397b839a 	.word	0x397b839a
 8009948:	3fe921fb 	.word	0x3fe921fb
 800994c:	4002d97b 	.word	0x4002d97b
 8009950:	3ff921fb 	.word	0x3ff921fb
 8009954:	413921fb 	.word	0x413921fb
 8009958:	3fe00000 	.word	0x3fe00000
 800995c:	0800ad50 	.word	0x0800ad50
 8009960:	7fefffff 	.word	0x7fefffff
 8009964:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009968:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800996c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009970:	4630      	mov	r0, r6
 8009972:	460f      	mov	r7, r1
 8009974:	f7f7 f898 	bl	8000aa8 <__aeabi_d2iz>
 8009978:	f7f6 fd7c 	bl	8000474 <__aeabi_i2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009988:	f7f6 fc26 	bl	80001d8 <__aeabi_dsub>
 800998c:	2200      	movs	r2, #0
 800998e:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <__ieee754_rem_pio2+0x3dc>)
 8009990:	f7f6 fdda 	bl	8000548 <__aeabi_dmul>
 8009994:	460f      	mov	r7, r1
 8009996:	4606      	mov	r6, r0
 8009998:	f7f7 f886 	bl	8000aa8 <__aeabi_d2iz>
 800999c:	f7f6 fd6a 	bl	8000474 <__aeabi_i2d>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099ac:	f7f6 fc14 	bl	80001d8 <__aeabi_dsub>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <__ieee754_rem_pio2+0x3dc>)
 80099b4:	f7f6 fdc8 	bl	8000548 <__aeabi_dmul>
 80099b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80099bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80099c0:	f04f 0803 	mov.w	r8, #3
 80099c4:	2600      	movs	r6, #0
 80099c6:	2700      	movs	r7, #0
 80099c8:	4632      	mov	r2, r6
 80099ca:	463b      	mov	r3, r7
 80099cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80099d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80099d4:	f7f7 f820 	bl	8000a18 <__aeabi_dcmpeq>
 80099d8:	b9b0      	cbnz	r0, 8009a08 <__ieee754_rem_pio2+0x3d8>
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <__ieee754_rem_pio2+0x3e0>)
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	2302      	movs	r3, #2
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	462a      	mov	r2, r5
 80099e4:	4643      	mov	r3, r8
 80099e6:	4621      	mov	r1, r4
 80099e8:	a806      	add	r0, sp, #24
 80099ea:	f000 f98d 	bl	8009d08 <__kernel_rem_pio2>
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	4605      	mov	r5, r0
 80099f4:	f6bf ae58 	bge.w	80096a8 <__ieee754_rem_pio2+0x78>
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	68e3      	ldr	r3, [r4, #12]
 8009a02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a06:	e746      	b.n	8009896 <__ieee754_rem_pio2+0x266>
 8009a08:	46d0      	mov	r8, sl
 8009a0a:	e7dd      	b.n	80099c8 <__ieee754_rem_pio2+0x398>
 8009a0c:	41700000 	.word	0x41700000
 8009a10:	0800add0 	.word	0x0800add0

08009a14 <__ieee754_sqrt>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	4955      	ldr	r1, [pc, #340]	; (8009b70 <__ieee754_sqrt+0x15c>)
 8009a1a:	ec55 4b10 	vmov	r4, r5, d0
 8009a1e:	43a9      	bics	r1, r5
 8009a20:	462b      	mov	r3, r5
 8009a22:	462a      	mov	r2, r5
 8009a24:	d112      	bne.n	8009a4c <__ieee754_sqrt+0x38>
 8009a26:	ee10 2a10 	vmov	r2, s0
 8009a2a:	ee10 0a10 	vmov	r0, s0
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f7f6 fd8a 	bl	8000548 <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f7f6 fbce 	bl	80001dc <__adddf3>
 8009a40:	4604      	mov	r4, r0
 8009a42:	460d      	mov	r5, r1
 8009a44:	ec45 4b10 	vmov	d0, r4, r5
 8009a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4c:	2d00      	cmp	r5, #0
 8009a4e:	ee10 0a10 	vmov	r0, s0
 8009a52:	4621      	mov	r1, r4
 8009a54:	dc0f      	bgt.n	8009a76 <__ieee754_sqrt+0x62>
 8009a56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a5a:	4330      	orrs	r0, r6
 8009a5c:	d0f2      	beq.n	8009a44 <__ieee754_sqrt+0x30>
 8009a5e:	b155      	cbz	r5, 8009a76 <__ieee754_sqrt+0x62>
 8009a60:	ee10 2a10 	vmov	r2, s0
 8009a64:	4620      	mov	r0, r4
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f6 fbb6 	bl	80001d8 <__aeabi_dsub>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	f7f6 fe94 	bl	800079c <__aeabi_ddiv>
 8009a74:	e7e4      	b.n	8009a40 <__ieee754_sqrt+0x2c>
 8009a76:	151b      	asrs	r3, r3, #20
 8009a78:	d073      	beq.n	8009b62 <__ieee754_sqrt+0x14e>
 8009a7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a7e:	07dd      	lsls	r5, r3, #31
 8009a80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009a84:	bf48      	it	mi
 8009a86:	0fc8      	lsrmi	r0, r1, #31
 8009a88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009a8c:	bf44      	itt	mi
 8009a8e:	0049      	lslmi	r1, r1, #1
 8009a90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009a94:	2500      	movs	r5, #0
 8009a96:	1058      	asrs	r0, r3, #1
 8009a98:	0fcb      	lsrs	r3, r1, #31
 8009a9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009a9e:	0049      	lsls	r1, r1, #1
 8009aa0:	2316      	movs	r3, #22
 8009aa2:	462c      	mov	r4, r5
 8009aa4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009aa8:	19a7      	adds	r7, r4, r6
 8009aaa:	4297      	cmp	r7, r2
 8009aac:	bfde      	ittt	le
 8009aae:	19bc      	addle	r4, r7, r6
 8009ab0:	1bd2      	suble	r2, r2, r7
 8009ab2:	19ad      	addle	r5, r5, r6
 8009ab4:	0fcf      	lsrs	r7, r1, #31
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009abc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ac0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ac4:	d1f0      	bne.n	8009aa8 <__ieee754_sqrt+0x94>
 8009ac6:	f04f 0c20 	mov.w	ip, #32
 8009aca:	469e      	mov	lr, r3
 8009acc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009ad0:	42a2      	cmp	r2, r4
 8009ad2:	eb06 070e 	add.w	r7, r6, lr
 8009ad6:	dc02      	bgt.n	8009ade <__ieee754_sqrt+0xca>
 8009ad8:	d112      	bne.n	8009b00 <__ieee754_sqrt+0xec>
 8009ada:	428f      	cmp	r7, r1
 8009adc:	d810      	bhi.n	8009b00 <__ieee754_sqrt+0xec>
 8009ade:	2f00      	cmp	r7, #0
 8009ae0:	eb07 0e06 	add.w	lr, r7, r6
 8009ae4:	da42      	bge.n	8009b6c <__ieee754_sqrt+0x158>
 8009ae6:	f1be 0f00 	cmp.w	lr, #0
 8009aea:	db3f      	blt.n	8009b6c <__ieee754_sqrt+0x158>
 8009aec:	f104 0801 	add.w	r8, r4, #1
 8009af0:	1b12      	subs	r2, r2, r4
 8009af2:	428f      	cmp	r7, r1
 8009af4:	bf88      	it	hi
 8009af6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009afa:	1bc9      	subs	r1, r1, r7
 8009afc:	4433      	add	r3, r6
 8009afe:	4644      	mov	r4, r8
 8009b00:	0052      	lsls	r2, r2, #1
 8009b02:	f1bc 0c01 	subs.w	ip, ip, #1
 8009b06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009b0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b12:	d1dd      	bne.n	8009ad0 <__ieee754_sqrt+0xbc>
 8009b14:	430a      	orrs	r2, r1
 8009b16:	d006      	beq.n	8009b26 <__ieee754_sqrt+0x112>
 8009b18:	1c5c      	adds	r4, r3, #1
 8009b1a:	bf13      	iteet	ne
 8009b1c:	3301      	addne	r3, #1
 8009b1e:	3501      	addeq	r5, #1
 8009b20:	4663      	moveq	r3, ip
 8009b22:	f023 0301 	bicne.w	r3, r3, #1
 8009b26:	106a      	asrs	r2, r5, #1
 8009b28:	085b      	lsrs	r3, r3, #1
 8009b2a:	07e9      	lsls	r1, r5, #31
 8009b2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009b30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009b34:	bf48      	it	mi
 8009b36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009b3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009b3e:	461c      	mov	r4, r3
 8009b40:	e780      	b.n	8009a44 <__ieee754_sqrt+0x30>
 8009b42:	0aca      	lsrs	r2, r1, #11
 8009b44:	3815      	subs	r0, #21
 8009b46:	0549      	lsls	r1, r1, #21
 8009b48:	2a00      	cmp	r2, #0
 8009b4a:	d0fa      	beq.n	8009b42 <__ieee754_sqrt+0x12e>
 8009b4c:	02d6      	lsls	r6, r2, #11
 8009b4e:	d50a      	bpl.n	8009b66 <__ieee754_sqrt+0x152>
 8009b50:	f1c3 0420 	rsb	r4, r3, #32
 8009b54:	fa21 f404 	lsr.w	r4, r1, r4
 8009b58:	1e5d      	subs	r5, r3, #1
 8009b5a:	4099      	lsls	r1, r3
 8009b5c:	4322      	orrs	r2, r4
 8009b5e:	1b43      	subs	r3, r0, r5
 8009b60:	e78b      	b.n	8009a7a <__ieee754_sqrt+0x66>
 8009b62:	4618      	mov	r0, r3
 8009b64:	e7f0      	b.n	8009b48 <__ieee754_sqrt+0x134>
 8009b66:	0052      	lsls	r2, r2, #1
 8009b68:	3301      	adds	r3, #1
 8009b6a:	e7ef      	b.n	8009b4c <__ieee754_sqrt+0x138>
 8009b6c:	46a0      	mov	r8, r4
 8009b6e:	e7bf      	b.n	8009af0 <__ieee754_sqrt+0xdc>
 8009b70:	7ff00000 	.word	0x7ff00000
 8009b74:	00000000 	.word	0x00000000

08009b78 <__kernel_cos>:
 8009b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	ec59 8b10 	vmov	r8, r9, d0
 8009b80:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009b84:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009b88:	ed2d 8b02 	vpush	{d8}
 8009b8c:	eeb0 8a41 	vmov.f32	s16, s2
 8009b90:	eef0 8a61 	vmov.f32	s17, s3
 8009b94:	da07      	bge.n	8009ba6 <__kernel_cos+0x2e>
 8009b96:	ee10 0a10 	vmov	r0, s0
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	f7f6 ff84 	bl	8000aa8 <__aeabi_d2iz>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f000 8089 	beq.w	8009cb8 <__kernel_cos+0x140>
 8009ba6:	4642      	mov	r2, r8
 8009ba8:	464b      	mov	r3, r9
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	f7f6 fccb 	bl	8000548 <__aeabi_dmul>
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	4b4e      	ldr	r3, [pc, #312]	; (8009cf0 <__kernel_cos+0x178>)
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	f7f6 fcc5 	bl	8000548 <__aeabi_dmul>
 8009bbe:	a340      	add	r3, pc, #256	; (adr r3, 8009cc0 <__kernel_cos+0x148>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	468b      	mov	fp, r1
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4629      	mov	r1, r5
 8009bcc:	f7f6 fcbc 	bl	8000548 <__aeabi_dmul>
 8009bd0:	a33d      	add	r3, pc, #244	; (adr r3, 8009cc8 <__kernel_cos+0x150>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fb01 	bl	80001dc <__adddf3>
 8009bda:	4622      	mov	r2, r4
 8009bdc:	462b      	mov	r3, r5
 8009bde:	f7f6 fcb3 	bl	8000548 <__aeabi_dmul>
 8009be2:	a33b      	add	r3, pc, #236	; (adr r3, 8009cd0 <__kernel_cos+0x158>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 faf6 	bl	80001d8 <__aeabi_dsub>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	f7f6 fcaa 	bl	8000548 <__aeabi_dmul>
 8009bf4:	a338      	add	r3, pc, #224	; (adr r3, 8009cd8 <__kernel_cos+0x160>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 faef 	bl	80001dc <__adddf3>
 8009bfe:	4622      	mov	r2, r4
 8009c00:	462b      	mov	r3, r5
 8009c02:	f7f6 fca1 	bl	8000548 <__aeabi_dmul>
 8009c06:	a336      	add	r3, pc, #216	; (adr r3, 8009ce0 <__kernel_cos+0x168>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fae4 	bl	80001d8 <__aeabi_dsub>
 8009c10:	4622      	mov	r2, r4
 8009c12:	462b      	mov	r3, r5
 8009c14:	f7f6 fc98 	bl	8000548 <__aeabi_dmul>
 8009c18:	a333      	add	r3, pc, #204	; (adr r3, 8009ce8 <__kernel_cos+0x170>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fadd 	bl	80001dc <__adddf3>
 8009c22:	4622      	mov	r2, r4
 8009c24:	462b      	mov	r3, r5
 8009c26:	f7f6 fc8f 	bl	8000548 <__aeabi_dmul>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	f7f6 fc8b 	bl	8000548 <__aeabi_dmul>
 8009c32:	ec53 2b18 	vmov	r2, r3, d8
 8009c36:	4604      	mov	r4, r0
 8009c38:	460d      	mov	r5, r1
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fc83 	bl	8000548 <__aeabi_dmul>
 8009c42:	460b      	mov	r3, r1
 8009c44:	4602      	mov	r2, r0
 8009c46:	4629      	mov	r1, r5
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7f6 fac5 	bl	80001d8 <__aeabi_dsub>
 8009c4e:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <__kernel_cos+0x17c>)
 8009c50:	429e      	cmp	r6, r3
 8009c52:	4680      	mov	r8, r0
 8009c54:	4689      	mov	r9, r1
 8009c56:	dc11      	bgt.n	8009c7c <__kernel_cos+0x104>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4650      	mov	r0, sl
 8009c5e:	4659      	mov	r1, fp
 8009c60:	f7f6 faba 	bl	80001d8 <__aeabi_dsub>
 8009c64:	460b      	mov	r3, r1
 8009c66:	4924      	ldr	r1, [pc, #144]	; (8009cf8 <__kernel_cos+0x180>)
 8009c68:	4602      	mov	r2, r0
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f7f6 fab4 	bl	80001d8 <__aeabi_dsub>
 8009c70:	ecbd 8b02 	vpop	{d8}
 8009c74:	ec41 0b10 	vmov	d0, r0, r1
 8009c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7c:	4b1f      	ldr	r3, [pc, #124]	; (8009cfc <__kernel_cos+0x184>)
 8009c7e:	491e      	ldr	r1, [pc, #120]	; (8009cf8 <__kernel_cos+0x180>)
 8009c80:	429e      	cmp	r6, r3
 8009c82:	bfcc      	ite	gt
 8009c84:	4d1e      	ldrgt	r5, [pc, #120]	; (8009d00 <__kernel_cos+0x188>)
 8009c86:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009c8a:	2400      	movs	r4, #0
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	2000      	movs	r0, #0
 8009c92:	f7f6 faa1 	bl	80001d8 <__aeabi_dsub>
 8009c96:	4622      	mov	r2, r4
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	4659      	mov	r1, fp
 8009ca2:	f7f6 fa99 	bl	80001d8 <__aeabi_dsub>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	464b      	mov	r3, r9
 8009caa:	f7f6 fa95 	bl	80001d8 <__aeabi_dsub>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	e7d9      	b.n	8009c6c <__kernel_cos+0xf4>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	490f      	ldr	r1, [pc, #60]	; (8009cf8 <__kernel_cos+0x180>)
 8009cbc:	e7d8      	b.n	8009c70 <__kernel_cos+0xf8>
 8009cbe:	bf00      	nop
 8009cc0:	be8838d4 	.word	0xbe8838d4
 8009cc4:	bda8fae9 	.word	0xbda8fae9
 8009cc8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009ccc:	3e21ee9e 	.word	0x3e21ee9e
 8009cd0:	809c52ad 	.word	0x809c52ad
 8009cd4:	3e927e4f 	.word	0x3e927e4f
 8009cd8:	19cb1590 	.word	0x19cb1590
 8009cdc:	3efa01a0 	.word	0x3efa01a0
 8009ce0:	16c15177 	.word	0x16c15177
 8009ce4:	3f56c16c 	.word	0x3f56c16c
 8009ce8:	5555554c 	.word	0x5555554c
 8009cec:	3fa55555 	.word	0x3fa55555
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	3fd33332 	.word	0x3fd33332
 8009cf8:	3ff00000 	.word	0x3ff00000
 8009cfc:	3fe90000 	.word	0x3fe90000
 8009d00:	3fd20000 	.word	0x3fd20000
 8009d04:	00000000 	.word	0x00000000

08009d08 <__kernel_rem_pio2>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	ed2d 8b02 	vpush	{d8}
 8009d10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009d14:	1ed4      	subs	r4, r2, #3
 8009d16:	9308      	str	r3, [sp, #32]
 8009d18:	9101      	str	r1, [sp, #4]
 8009d1a:	4bc5      	ldr	r3, [pc, #788]	; (800a030 <__kernel_rem_pio2+0x328>)
 8009d1c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009d1e:	9009      	str	r0, [sp, #36]	; 0x24
 8009d20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	2318      	movs	r3, #24
 8009d2e:	fb94 f4f3 	sdiv	r4, r4, r3
 8009d32:	f06f 0317 	mvn.w	r3, #23
 8009d36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009d3a:	fb04 3303 	mla	r3, r4, r3, r3
 8009d3e:	eb03 0a02 	add.w	sl, r3, r2
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	9a07      	ldr	r2, [sp, #28]
 8009d46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a020 <__kernel_rem_pio2+0x318>
 8009d4a:	eb03 0802 	add.w	r8, r3, r2
 8009d4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d50:	1aa7      	subs	r7, r4, r2
 8009d52:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009d56:	ae22      	add	r6, sp, #136	; 0x88
 8009d58:	2500      	movs	r5, #0
 8009d5a:	4545      	cmp	r5, r8
 8009d5c:	dd13      	ble.n	8009d86 <__kernel_rem_pio2+0x7e>
 8009d5e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a020 <__kernel_rem_pio2+0x318>
 8009d62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009d66:	2600      	movs	r6, #0
 8009d68:	9b04      	ldr	r3, [sp, #16]
 8009d6a:	429e      	cmp	r6, r3
 8009d6c:	dc32      	bgt.n	8009dd4 <__kernel_rem_pio2+0xcc>
 8009d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d70:	9302      	str	r3, [sp, #8]
 8009d72:	9b08      	ldr	r3, [sp, #32]
 8009d74:	199d      	adds	r5, r3, r6
 8009d76:	ab22      	add	r3, sp, #136	; 0x88
 8009d78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009d7c:	9306      	str	r3, [sp, #24]
 8009d7e:	ec59 8b18 	vmov	r8, r9, d8
 8009d82:	2700      	movs	r7, #0
 8009d84:	e01f      	b.n	8009dc6 <__kernel_rem_pio2+0xbe>
 8009d86:	42ef      	cmn	r7, r5
 8009d88:	d407      	bmi.n	8009d9a <__kernel_rem_pio2+0x92>
 8009d8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009d8e:	f7f6 fb71 	bl	8000474 <__aeabi_i2d>
 8009d92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d96:	3501      	adds	r5, #1
 8009d98:	e7df      	b.n	8009d5a <__kernel_rem_pio2+0x52>
 8009d9a:	ec51 0b18 	vmov	r0, r1, d8
 8009d9e:	e7f8      	b.n	8009d92 <__kernel_rem_pio2+0x8a>
 8009da0:	9906      	ldr	r1, [sp, #24]
 8009da2:	9d02      	ldr	r5, [sp, #8]
 8009da4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009da8:	9106      	str	r1, [sp, #24]
 8009daa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009dae:	9502      	str	r5, [sp, #8]
 8009db0:	f7f6 fbca 	bl	8000548 <__aeabi_dmul>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4640      	mov	r0, r8
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f7f6 fa0e 	bl	80001dc <__adddf3>
 8009dc0:	3701      	adds	r7, #1
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	429f      	cmp	r7, r3
 8009dca:	dde9      	ble.n	8009da0 <__kernel_rem_pio2+0x98>
 8009dcc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009dd0:	3601      	adds	r6, #1
 8009dd2:	e7c9      	b.n	8009d68 <__kernel_rem_pio2+0x60>
 8009dd4:	9b04      	ldr	r3, [sp, #16]
 8009dd6:	aa0e      	add	r2, sp, #56	; 0x38
 8009dd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ddc:	930c      	str	r3, [sp, #48]	; 0x30
 8009dde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009de0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009de4:	9c04      	ldr	r4, [sp, #16]
 8009de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009de8:	ab9a      	add	r3, sp, #616	; 0x268
 8009dea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009dee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009df6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009dfa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009dfe:	ab9a      	add	r3, sp, #616	; 0x268
 8009e00:	445b      	add	r3, fp
 8009e02:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009e06:	2500      	movs	r5, #0
 8009e08:	1b63      	subs	r3, r4, r5
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dc78      	bgt.n	8009f00 <__kernel_rem_pio2+0x1f8>
 8009e0e:	4650      	mov	r0, sl
 8009e10:	ec49 8b10 	vmov	d0, r8, r9
 8009e14:	f000 fda8 	bl	800a968 <scalbn>
 8009e18:	ec57 6b10 	vmov	r6, r7, d0
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009e22:	ee10 0a10 	vmov	r0, s0
 8009e26:	4639      	mov	r1, r7
 8009e28:	f7f6 fb8e 	bl	8000548 <__aeabi_dmul>
 8009e2c:	ec41 0b10 	vmov	d0, r0, r1
 8009e30:	f000 fd12 	bl	800a858 <floor>
 8009e34:	2200      	movs	r2, #0
 8009e36:	ec51 0b10 	vmov	r0, r1, d0
 8009e3a:	4b7e      	ldr	r3, [pc, #504]	; (800a034 <__kernel_rem_pio2+0x32c>)
 8009e3c:	f7f6 fb84 	bl	8000548 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4630      	mov	r0, r6
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 f9c6 	bl	80001d8 <__aeabi_dsub>
 8009e4c:	460f      	mov	r7, r1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	f7f6 fe2a 	bl	8000aa8 <__aeabi_d2iz>
 8009e54:	9006      	str	r0, [sp, #24]
 8009e56:	f7f6 fb0d 	bl	8000474 <__aeabi_i2d>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	f7f6 f9b9 	bl	80001d8 <__aeabi_dsub>
 8009e66:	f1ba 0f00 	cmp.w	sl, #0
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	dd6c      	ble.n	8009f4a <__kernel_rem_pio2+0x242>
 8009e70:	1e62      	subs	r2, r4, #1
 8009e72:	ab0e      	add	r3, sp, #56	; 0x38
 8009e74:	f1ca 0118 	rsb	r1, sl, #24
 8009e78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e7c:	9d06      	ldr	r5, [sp, #24]
 8009e7e:	fa40 f301 	asr.w	r3, r0, r1
 8009e82:	441d      	add	r5, r3
 8009e84:	408b      	lsls	r3, r1
 8009e86:	1ac0      	subs	r0, r0, r3
 8009e88:	ab0e      	add	r3, sp, #56	; 0x38
 8009e8a:	9506      	str	r5, [sp, #24]
 8009e8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009e90:	f1ca 0317 	rsb	r3, sl, #23
 8009e94:	fa40 f303 	asr.w	r3, r0, r3
 8009e98:	9302      	str	r3, [sp, #8]
 8009e9a:	9b02      	ldr	r3, [sp, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dd62      	ble.n	8009f66 <__kernel_rem_pio2+0x25e>
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	9306      	str	r3, [sp, #24]
 8009ea8:	4615      	mov	r5, r2
 8009eaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009eae:	4294      	cmp	r4, r2
 8009eb0:	f300 8095 	bgt.w	8009fde <__kernel_rem_pio2+0x2d6>
 8009eb4:	f1ba 0f00 	cmp.w	sl, #0
 8009eb8:	dd07      	ble.n	8009eca <__kernel_rem_pio2+0x1c2>
 8009eba:	f1ba 0f01 	cmp.w	sl, #1
 8009ebe:	f000 80a2 	beq.w	800a006 <__kernel_rem_pio2+0x2fe>
 8009ec2:	f1ba 0f02 	cmp.w	sl, #2
 8009ec6:	f000 80c1 	beq.w	800a04c <__kernel_rem_pio2+0x344>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d14a      	bne.n	8009f66 <__kernel_rem_pio2+0x25e>
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	4958      	ldr	r1, [pc, #352]	; (800a038 <__kernel_rem_pio2+0x330>)
 8009ed8:	f7f6 f97e 	bl	80001d8 <__aeabi_dsub>
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	d040      	beq.n	8009f66 <__kernel_rem_pio2+0x25e>
 8009ee4:	4650      	mov	r0, sl
 8009ee6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a028 <__kernel_rem_pio2+0x320>
 8009eea:	f000 fd3d 	bl	800a968 <scalbn>
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	ec53 2b10 	vmov	r2, r3, d0
 8009ef6:	f7f6 f96f 	bl	80001d8 <__aeabi_dsub>
 8009efa:	4606      	mov	r6, r0
 8009efc:	460f      	mov	r7, r1
 8009efe:	e032      	b.n	8009f66 <__kernel_rem_pio2+0x25e>
 8009f00:	2200      	movs	r2, #0
 8009f02:	4b4e      	ldr	r3, [pc, #312]	; (800a03c <__kernel_rem_pio2+0x334>)
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 fb1e 	bl	8000548 <__aeabi_dmul>
 8009f0c:	f7f6 fdcc 	bl	8000aa8 <__aeabi_d2iz>
 8009f10:	f7f6 fab0 	bl	8000474 <__aeabi_i2d>
 8009f14:	2200      	movs	r2, #0
 8009f16:	4b4a      	ldr	r3, [pc, #296]	; (800a040 <__kernel_rem_pio2+0x338>)
 8009f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f1c:	f7f6 fb14 	bl	8000548 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4640      	mov	r0, r8
 8009f26:	4649      	mov	r1, r9
 8009f28:	f7f6 f956 	bl	80001d8 <__aeabi_dsub>
 8009f2c:	f7f6 fdbc 	bl	8000aa8 <__aeabi_d2iz>
 8009f30:	ab0e      	add	r3, sp, #56	; 0x38
 8009f32:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009f36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f3e:	f7f6 f94d 	bl	80001dc <__adddf3>
 8009f42:	3501      	adds	r5, #1
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	e75e      	b.n	8009e08 <__kernel_rem_pio2+0x100>
 8009f4a:	d105      	bne.n	8009f58 <__kernel_rem_pio2+0x250>
 8009f4c:	1e63      	subs	r3, r4, #1
 8009f4e:	aa0e      	add	r2, sp, #56	; 0x38
 8009f50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009f54:	15c3      	asrs	r3, r0, #23
 8009f56:	e79f      	b.n	8009e98 <__kernel_rem_pio2+0x190>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4b3a      	ldr	r3, [pc, #232]	; (800a044 <__kernel_rem_pio2+0x33c>)
 8009f5c:	f7f6 fd7a 	bl	8000a54 <__aeabi_dcmpge>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d139      	bne.n	8009fd8 <__kernel_rem_pio2+0x2d0>
 8009f64:	9002      	str	r0, [sp, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 fd53 	bl	8000a18 <__aeabi_dcmpeq>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f000 80c7 	beq.w	800a106 <__kernel_rem_pio2+0x3fe>
 8009f78:	1e65      	subs	r5, r4, #1
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	9904      	ldr	r1, [sp, #16]
 8009f80:	428b      	cmp	r3, r1
 8009f82:	da6a      	bge.n	800a05a <__kernel_rem_pio2+0x352>
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	f000 8088 	beq.w	800a09a <__kernel_rem_pio2+0x392>
 8009f8a:	ab0e      	add	r3, sp, #56	; 0x38
 8009f8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009f90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 80b4 	beq.w	800a102 <__kernel_rem_pio2+0x3fa>
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a028 <__kernel_rem_pio2+0x320>
 8009fa0:	f000 fce2 	bl	800a968 <scalbn>
 8009fa4:	00ec      	lsls	r4, r5, #3
 8009fa6:	ab72      	add	r3, sp, #456	; 0x1c8
 8009fa8:	191e      	adds	r6, r3, r4
 8009faa:	ec59 8b10 	vmov	r8, r9, d0
 8009fae:	f106 0a08 	add.w	sl, r6, #8
 8009fb2:	462f      	mov	r7, r5
 8009fb4:	2f00      	cmp	r7, #0
 8009fb6:	f280 80df 	bge.w	800a178 <__kernel_rem_pio2+0x470>
 8009fba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a020 <__kernel_rem_pio2+0x318>
 8009fbe:	f04f 0a00 	mov.w	sl, #0
 8009fc2:	eba5 030a 	sub.w	r3, r5, sl
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f2c0 810a 	blt.w	800a1e0 <__kernel_rem_pio2+0x4d8>
 8009fcc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a048 <__kernel_rem_pio2+0x340>
 8009fd0:	ec59 8b18 	vmov	r8, r9, d8
 8009fd4:	2700      	movs	r7, #0
 8009fd6:	e0f5      	b.n	800a1c4 <__kernel_rem_pio2+0x4bc>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	9302      	str	r3, [sp, #8]
 8009fdc:	e760      	b.n	8009ea0 <__kernel_rem_pio2+0x198>
 8009fde:	ab0e      	add	r3, sp, #56	; 0x38
 8009fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe4:	b94d      	cbnz	r5, 8009ffa <__kernel_rem_pio2+0x2f2>
 8009fe6:	b12b      	cbz	r3, 8009ff4 <__kernel_rem_pio2+0x2ec>
 8009fe8:	a80e      	add	r0, sp, #56	; 0x38
 8009fea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009fee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	3201      	adds	r2, #1
 8009ff6:	461d      	mov	r5, r3
 8009ff8:	e759      	b.n	8009eae <__kernel_rem_pio2+0x1a6>
 8009ffa:	a80e      	add	r0, sp, #56	; 0x38
 8009ffc:	1acb      	subs	r3, r1, r3
 8009ffe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a002:	462b      	mov	r3, r5
 800a004:	e7f6      	b.n	8009ff4 <__kernel_rem_pio2+0x2ec>
 800a006:	1e62      	subs	r2, r4, #1
 800a008:	ab0e      	add	r3, sp, #56	; 0x38
 800a00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a012:	a90e      	add	r1, sp, #56	; 0x38
 800a014:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a018:	e757      	b.n	8009eca <__kernel_rem_pio2+0x1c2>
 800a01a:	bf00      	nop
 800a01c:	f3af 8000 	nop.w
	...
 800a02c:	3ff00000 	.word	0x3ff00000
 800a030:	0800af18 	.word	0x0800af18
 800a034:	40200000 	.word	0x40200000
 800a038:	3ff00000 	.word	0x3ff00000
 800a03c:	3e700000 	.word	0x3e700000
 800a040:	41700000 	.word	0x41700000
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	0800aed8 	.word	0x0800aed8
 800a04c:	1e62      	subs	r2, r4, #1
 800a04e:	ab0e      	add	r3, sp, #56	; 0x38
 800a050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a054:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a058:	e7db      	b.n	800a012 <__kernel_rem_pio2+0x30a>
 800a05a:	a90e      	add	r1, sp, #56	; 0x38
 800a05c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a060:	3b01      	subs	r3, #1
 800a062:	430a      	orrs	r2, r1
 800a064:	e78b      	b.n	8009f7e <__kernel_rem_pio2+0x276>
 800a066:	3301      	adds	r3, #1
 800a068:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a06c:	2900      	cmp	r1, #0
 800a06e:	d0fa      	beq.n	800a066 <__kernel_rem_pio2+0x35e>
 800a070:	9a08      	ldr	r2, [sp, #32]
 800a072:	4422      	add	r2, r4
 800a074:	00d2      	lsls	r2, r2, #3
 800a076:	a922      	add	r1, sp, #136	; 0x88
 800a078:	18e3      	adds	r3, r4, r3
 800a07a:	9206      	str	r2, [sp, #24]
 800a07c:	440a      	add	r2, r1
 800a07e:	9302      	str	r3, [sp, #8]
 800a080:	f10b 0108 	add.w	r1, fp, #8
 800a084:	f102 0308 	add.w	r3, r2, #8
 800a088:	1c66      	adds	r6, r4, #1
 800a08a:	910a      	str	r1, [sp, #40]	; 0x28
 800a08c:	2500      	movs	r5, #0
 800a08e:	930d      	str	r3, [sp, #52]	; 0x34
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	42b3      	cmp	r3, r6
 800a094:	da04      	bge.n	800a0a0 <__kernel_rem_pio2+0x398>
 800a096:	461c      	mov	r4, r3
 800a098:	e6a6      	b.n	8009de8 <__kernel_rem_pio2+0xe0>
 800a09a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a09c:	2301      	movs	r3, #1
 800a09e:	e7e3      	b.n	800a068 <__kernel_rem_pio2+0x360>
 800a0a0:	9b06      	ldr	r3, [sp, #24]
 800a0a2:	18ef      	adds	r7, r5, r3
 800a0a4:	ab22      	add	r3, sp, #136	; 0x88
 800a0a6:	441f      	add	r7, r3
 800a0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a0ae:	f7f6 f9e1 	bl	8000474 <__aeabi_i2d>
 800a0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b4:	461c      	mov	r4, r3
 800a0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b8:	e9c7 0100 	strd	r0, r1, [r7]
 800a0bc:	eb03 0b05 	add.w	fp, r3, r5
 800a0c0:	2700      	movs	r7, #0
 800a0c2:	f04f 0800 	mov.w	r8, #0
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	9b07      	ldr	r3, [sp, #28]
 800a0cc:	429f      	cmp	r7, r3
 800a0ce:	dd08      	ble.n	800a0e2 <__kernel_rem_pio2+0x3da>
 800a0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d2:	aa72      	add	r2, sp, #456	; 0x1c8
 800a0d4:	18eb      	adds	r3, r5, r3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a0dc:	3601      	adds	r6, #1
 800a0de:	3508      	adds	r5, #8
 800a0e0:	e7d6      	b.n	800a090 <__kernel_rem_pio2+0x388>
 800a0e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a0e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a0ea:	f7f6 fa2d 	bl	8000548 <__aeabi_dmul>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 f871 	bl	80001dc <__adddf3>
 800a0fa:	3701      	adds	r7, #1
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	4689      	mov	r9, r1
 800a100:	e7e3      	b.n	800a0ca <__kernel_rem_pio2+0x3c2>
 800a102:	3d01      	subs	r5, #1
 800a104:	e741      	b.n	8009f8a <__kernel_rem_pio2+0x282>
 800a106:	f1ca 0000 	rsb	r0, sl, #0
 800a10a:	ec47 6b10 	vmov	d0, r6, r7
 800a10e:	f000 fc2b 	bl	800a968 <scalbn>
 800a112:	ec57 6b10 	vmov	r6, r7, d0
 800a116:	2200      	movs	r2, #0
 800a118:	4b99      	ldr	r3, [pc, #612]	; (800a380 <__kernel_rem_pio2+0x678>)
 800a11a:	ee10 0a10 	vmov	r0, s0
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 fc98 	bl	8000a54 <__aeabi_dcmpge>
 800a124:	b1f8      	cbz	r0, 800a166 <__kernel_rem_pio2+0x45e>
 800a126:	2200      	movs	r2, #0
 800a128:	4b96      	ldr	r3, [pc, #600]	; (800a384 <__kernel_rem_pio2+0x67c>)
 800a12a:	4630      	mov	r0, r6
 800a12c:	4639      	mov	r1, r7
 800a12e:	f7f6 fa0b 	bl	8000548 <__aeabi_dmul>
 800a132:	f7f6 fcb9 	bl	8000aa8 <__aeabi_d2iz>
 800a136:	4680      	mov	r8, r0
 800a138:	f7f6 f99c 	bl	8000474 <__aeabi_i2d>
 800a13c:	2200      	movs	r2, #0
 800a13e:	4b90      	ldr	r3, [pc, #576]	; (800a380 <__kernel_rem_pio2+0x678>)
 800a140:	f7f6 fa02 	bl	8000548 <__aeabi_dmul>
 800a144:	460b      	mov	r3, r1
 800a146:	4602      	mov	r2, r0
 800a148:	4639      	mov	r1, r7
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7f6 f844 	bl	80001d8 <__aeabi_dsub>
 800a150:	f7f6 fcaa 	bl	8000aa8 <__aeabi_d2iz>
 800a154:	1c65      	adds	r5, r4, #1
 800a156:	ab0e      	add	r3, sp, #56	; 0x38
 800a158:	f10a 0a18 	add.w	sl, sl, #24
 800a15c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a160:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a164:	e719      	b.n	8009f9a <__kernel_rem_pio2+0x292>
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 fc9d 	bl	8000aa8 <__aeabi_d2iz>
 800a16e:	ab0e      	add	r3, sp, #56	; 0x38
 800a170:	4625      	mov	r5, r4
 800a172:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a176:	e710      	b.n	8009f9a <__kernel_rem_pio2+0x292>
 800a178:	ab0e      	add	r3, sp, #56	; 0x38
 800a17a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a17e:	f7f6 f979 	bl	8000474 <__aeabi_i2d>
 800a182:	4642      	mov	r2, r8
 800a184:	464b      	mov	r3, r9
 800a186:	f7f6 f9df 	bl	8000548 <__aeabi_dmul>
 800a18a:	2200      	movs	r2, #0
 800a18c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a190:	4b7c      	ldr	r3, [pc, #496]	; (800a384 <__kernel_rem_pio2+0x67c>)
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f9d7 	bl	8000548 <__aeabi_dmul>
 800a19a:	3f01      	subs	r7, #1
 800a19c:	4680      	mov	r8, r0
 800a19e:	4689      	mov	r9, r1
 800a1a0:	e708      	b.n	8009fb4 <__kernel_rem_pio2+0x2ac>
 800a1a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a1ae:	f7f6 f9cb 	bl	8000548 <__aeabi_dmul>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	f7f6 f80f 	bl	80001dc <__adddf3>
 800a1be:	3701      	adds	r7, #1
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4689      	mov	r9, r1
 800a1c4:	9b04      	ldr	r3, [sp, #16]
 800a1c6:	429f      	cmp	r7, r3
 800a1c8:	dc01      	bgt.n	800a1ce <__kernel_rem_pio2+0x4c6>
 800a1ca:	45ba      	cmp	sl, r7
 800a1cc:	dae9      	bge.n	800a1a2 <__kernel_rem_pio2+0x49a>
 800a1ce:	ab4a      	add	r3, sp, #296	; 0x128
 800a1d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1d4:	e9c3 8900 	strd	r8, r9, [r3]
 800a1d8:	f10a 0a01 	add.w	sl, sl, #1
 800a1dc:	3e08      	subs	r6, #8
 800a1de:	e6f0      	b.n	8009fc2 <__kernel_rem_pio2+0x2ba>
 800a1e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d85b      	bhi.n	800a29e <__kernel_rem_pio2+0x596>
 800a1e6:	e8df f003 	tbb	[pc, r3]
 800a1ea:	264a      	.short	0x264a
 800a1ec:	0226      	.short	0x0226
 800a1ee:	ab9a      	add	r3, sp, #616	; 0x268
 800a1f0:	441c      	add	r4, r3
 800a1f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a1f6:	46a2      	mov	sl, r4
 800a1f8:	46ab      	mov	fp, r5
 800a1fa:	f1bb 0f00 	cmp.w	fp, #0
 800a1fe:	dc6c      	bgt.n	800a2da <__kernel_rem_pio2+0x5d2>
 800a200:	46a2      	mov	sl, r4
 800a202:	46ab      	mov	fp, r5
 800a204:	f1bb 0f01 	cmp.w	fp, #1
 800a208:	f300 8086 	bgt.w	800a318 <__kernel_rem_pio2+0x610>
 800a20c:	2000      	movs	r0, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	2d01      	cmp	r5, #1
 800a212:	f300 80a0 	bgt.w	800a356 <__kernel_rem_pio2+0x64e>
 800a216:	9b02      	ldr	r3, [sp, #8]
 800a218:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a21c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a220:	2b00      	cmp	r3, #0
 800a222:	f040 809e 	bne.w	800a362 <__kernel_rem_pio2+0x65a>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	e9c3 7800 	strd	r7, r8, [r3]
 800a22c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a230:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a234:	e033      	b.n	800a29e <__kernel_rem_pio2+0x596>
 800a236:	3408      	adds	r4, #8
 800a238:	ab4a      	add	r3, sp, #296	; 0x128
 800a23a:	441c      	add	r4, r3
 800a23c:	462e      	mov	r6, r5
 800a23e:	2000      	movs	r0, #0
 800a240:	2100      	movs	r1, #0
 800a242:	2e00      	cmp	r6, #0
 800a244:	da3a      	bge.n	800a2bc <__kernel_rem_pio2+0x5b4>
 800a246:	9b02      	ldr	r3, [sp, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d03d      	beq.n	800a2c8 <__kernel_rem_pio2+0x5c0>
 800a24c:	4602      	mov	r2, r0
 800a24e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a252:	9c01      	ldr	r4, [sp, #4]
 800a254:	e9c4 2300 	strd	r2, r3, [r4]
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a260:	f7f5 ffba 	bl	80001d8 <__aeabi_dsub>
 800a264:	ae4c      	add	r6, sp, #304	; 0x130
 800a266:	2401      	movs	r4, #1
 800a268:	42a5      	cmp	r5, r4
 800a26a:	da30      	bge.n	800a2ce <__kernel_rem_pio2+0x5c6>
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	b113      	cbz	r3, 800a276 <__kernel_rem_pio2+0x56e>
 800a270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a274:	4619      	mov	r1, r3
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a27c:	e00f      	b.n	800a29e <__kernel_rem_pio2+0x596>
 800a27e:	ab9a      	add	r3, sp, #616	; 0x268
 800a280:	441c      	add	r4, r3
 800a282:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a286:	2000      	movs	r0, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	da10      	bge.n	800a2b0 <__kernel_rem_pio2+0x5a8>
 800a28e:	9b02      	ldr	r3, [sp, #8]
 800a290:	b113      	cbz	r3, 800a298 <__kernel_rem_pio2+0x590>
 800a292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a296:	4619      	mov	r1, r3
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	e9c3 0100 	strd	r0, r1, [r3]
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	f003 0007 	and.w	r0, r3, #7
 800a2a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a2a8:	ecbd 8b02 	vpop	{d8}
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2b4:	f7f5 ff92 	bl	80001dc <__adddf3>
 800a2b8:	3d01      	subs	r5, #1
 800a2ba:	e7e6      	b.n	800a28a <__kernel_rem_pio2+0x582>
 800a2bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2c0:	f7f5 ff8c 	bl	80001dc <__adddf3>
 800a2c4:	3e01      	subs	r6, #1
 800a2c6:	e7bc      	b.n	800a242 <__kernel_rem_pio2+0x53a>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	e7c1      	b.n	800a252 <__kernel_rem_pio2+0x54a>
 800a2ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a2d2:	f7f5 ff83 	bl	80001dc <__adddf3>
 800a2d6:	3401      	adds	r4, #1
 800a2d8:	e7c6      	b.n	800a268 <__kernel_rem_pio2+0x560>
 800a2da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a2de:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	ec53 2b17 	vmov	r2, r3, d7
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a2ee:	f7f5 ff75 	bl	80001dc <__adddf3>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	f7f5 ff6b 	bl	80001d8 <__aeabi_dsub>
 800a302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a306:	f7f5 ff69 	bl	80001dc <__adddf3>
 800a30a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a30e:	e9ca 0100 	strd	r0, r1, [sl]
 800a312:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a316:	e770      	b.n	800a1fa <__kernel_rem_pio2+0x4f2>
 800a318:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a31c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a320:	4630      	mov	r0, r6
 800a322:	ec53 2b17 	vmov	r2, r3, d7
 800a326:	4639      	mov	r1, r7
 800a328:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a32c:	f7f5 ff56 	bl	80001dc <__adddf3>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4680      	mov	r8, r0
 800a336:	4689      	mov	r9, r1
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f5 ff4c 	bl	80001d8 <__aeabi_dsub>
 800a340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a344:	f7f5 ff4a 	bl	80001dc <__adddf3>
 800a348:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a34c:	e9ca 0100 	strd	r0, r1, [sl]
 800a350:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a354:	e756      	b.n	800a204 <__kernel_rem_pio2+0x4fc>
 800a356:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a35a:	f7f5 ff3f 	bl	80001dc <__adddf3>
 800a35e:	3d01      	subs	r5, #1
 800a360:	e756      	b.n	800a210 <__kernel_rem_pio2+0x508>
 800a362:	9b01      	ldr	r3, [sp, #4]
 800a364:	9a01      	ldr	r2, [sp, #4]
 800a366:	601f      	str	r7, [r3, #0]
 800a368:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a36c:	605c      	str	r4, [r3, #4]
 800a36e:	609d      	str	r5, [r3, #8]
 800a370:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a374:	60d3      	str	r3, [r2, #12]
 800a376:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a37a:	6110      	str	r0, [r2, #16]
 800a37c:	6153      	str	r3, [r2, #20]
 800a37e:	e78e      	b.n	800a29e <__kernel_rem_pio2+0x596>
 800a380:	41700000 	.word	0x41700000
 800a384:	3e700000 	.word	0x3e700000

0800a388 <__kernel_sin>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ec55 4b10 	vmov	r4, r5, d0
 800a390:	b085      	sub	sp, #20
 800a392:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a396:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a39a:	ed8d 1b00 	vstr	d1, [sp]
 800a39e:	9002      	str	r0, [sp, #8]
 800a3a0:	da06      	bge.n	800a3b0 <__kernel_sin+0x28>
 800a3a2:	ee10 0a10 	vmov	r0, s0
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 fb7e 	bl	8000aa8 <__aeabi_d2iz>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d051      	beq.n	800a454 <__kernel_sin+0xcc>
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f6 f8c6 	bl	8000548 <__aeabi_dmul>
 800a3bc:	4682      	mov	sl, r0
 800a3be:	468b      	mov	fp, r1
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 f8be 	bl	8000548 <__aeabi_dmul>
 800a3cc:	a341      	add	r3, pc, #260	; (adr r3, 800a4d4 <__kernel_sin+0x14c>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	4689      	mov	r9, r1
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	4659      	mov	r1, fp
 800a3da:	f7f6 f8b5 	bl	8000548 <__aeabi_dmul>
 800a3de:	a33f      	add	r3, pc, #252	; (adr r3, 800a4dc <__kernel_sin+0x154>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 fef8 	bl	80001d8 <__aeabi_dsub>
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	465b      	mov	r3, fp
 800a3ec:	f7f6 f8ac 	bl	8000548 <__aeabi_dmul>
 800a3f0:	a33c      	add	r3, pc, #240	; (adr r3, 800a4e4 <__kernel_sin+0x15c>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 fef1 	bl	80001dc <__adddf3>
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	f7f6 f8a3 	bl	8000548 <__aeabi_dmul>
 800a402:	a33a      	add	r3, pc, #232	; (adr r3, 800a4ec <__kernel_sin+0x164>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	f7f5 fee6 	bl	80001d8 <__aeabi_dsub>
 800a40c:	4652      	mov	r2, sl
 800a40e:	465b      	mov	r3, fp
 800a410:	f7f6 f89a 	bl	8000548 <__aeabi_dmul>
 800a414:	a337      	add	r3, pc, #220	; (adr r3, 800a4f4 <__kernel_sin+0x16c>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f5 fedf 	bl	80001dc <__adddf3>
 800a41e:	9b02      	ldr	r3, [sp, #8]
 800a420:	4606      	mov	r6, r0
 800a422:	460f      	mov	r7, r1
 800a424:	b9db      	cbnz	r3, 800a45e <__kernel_sin+0xd6>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4650      	mov	r0, sl
 800a42c:	4659      	mov	r1, fp
 800a42e:	f7f6 f88b 	bl	8000548 <__aeabi_dmul>
 800a432:	a325      	add	r3, pc, #148	; (adr r3, 800a4c8 <__kernel_sin+0x140>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	f7f5 fece 	bl	80001d8 <__aeabi_dsub>
 800a43c:	4642      	mov	r2, r8
 800a43e:	464b      	mov	r3, r9
 800a440:	f7f6 f882 	bl	8000548 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f5 fec6 	bl	80001dc <__adddf3>
 800a450:	4604      	mov	r4, r0
 800a452:	460d      	mov	r5, r1
 800a454:	ec45 4b10 	vmov	d0, r4, r5
 800a458:	b005      	add	sp, #20
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45e:	2200      	movs	r2, #0
 800a460:	4b1b      	ldr	r3, [pc, #108]	; (800a4d0 <__kernel_sin+0x148>)
 800a462:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a466:	f7f6 f86f 	bl	8000548 <__aeabi_dmul>
 800a46a:	4632      	mov	r2, r6
 800a46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a470:	463b      	mov	r3, r7
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f6 f867 	bl	8000548 <__aeabi_dmul>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a482:	f7f5 fea9 	bl	80001d8 <__aeabi_dsub>
 800a486:	4652      	mov	r2, sl
 800a488:	465b      	mov	r3, fp
 800a48a:	f7f6 f85d 	bl	8000548 <__aeabi_dmul>
 800a48e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a492:	f7f5 fea1 	bl	80001d8 <__aeabi_dsub>
 800a496:	a30c      	add	r3, pc, #48	; (adr r3, 800a4c8 <__kernel_sin+0x140>)
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f6 f850 	bl	8000548 <__aeabi_dmul>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f5 fe94 	bl	80001dc <__adddf3>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7f5 fe8c 	bl	80001d8 <__aeabi_dsub>
 800a4c0:	e7c6      	b.n	800a450 <__kernel_sin+0xc8>
 800a4c2:	bf00      	nop
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	55555549 	.word	0x55555549
 800a4cc:	3fc55555 	.word	0x3fc55555
 800a4d0:	3fe00000 	.word	0x3fe00000
 800a4d4:	5acfd57c 	.word	0x5acfd57c
 800a4d8:	3de5d93a 	.word	0x3de5d93a
 800a4dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800a4e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a4e4:	57b1fe7d 	.word	0x57b1fe7d
 800a4e8:	3ec71de3 	.word	0x3ec71de3
 800a4ec:	19c161d5 	.word	0x19c161d5
 800a4f0:	3f2a01a0 	.word	0x3f2a01a0
 800a4f4:	1110f8a6 	.word	0x1110f8a6
 800a4f8:	3f811111 	.word	0x3f811111
 800a4fc:	00000000 	.word	0x00000000

0800a500 <atan>:
 800a500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	ec55 4b10 	vmov	r4, r5, d0
 800a508:	4bc3      	ldr	r3, [pc, #780]	; (800a818 <atan+0x318>)
 800a50a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a50e:	429e      	cmp	r6, r3
 800a510:	46ab      	mov	fp, r5
 800a512:	dd18      	ble.n	800a546 <atan+0x46>
 800a514:	4bc1      	ldr	r3, [pc, #772]	; (800a81c <atan+0x31c>)
 800a516:	429e      	cmp	r6, r3
 800a518:	dc01      	bgt.n	800a51e <atan+0x1e>
 800a51a:	d109      	bne.n	800a530 <atan+0x30>
 800a51c:	b144      	cbz	r4, 800a530 <atan+0x30>
 800a51e:	4622      	mov	r2, r4
 800a520:	462b      	mov	r3, r5
 800a522:	4620      	mov	r0, r4
 800a524:	4629      	mov	r1, r5
 800a526:	f7f5 fe59 	bl	80001dc <__adddf3>
 800a52a:	4604      	mov	r4, r0
 800a52c:	460d      	mov	r5, r1
 800a52e:	e006      	b.n	800a53e <atan+0x3e>
 800a530:	f1bb 0f00 	cmp.w	fp, #0
 800a534:	f340 8131 	ble.w	800a79a <atan+0x29a>
 800a538:	a59b      	add	r5, pc, #620	; (adr r5, 800a7a8 <atan+0x2a8>)
 800a53a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a53e:	ec45 4b10 	vmov	d0, r4, r5
 800a542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a546:	4bb6      	ldr	r3, [pc, #728]	; (800a820 <atan+0x320>)
 800a548:	429e      	cmp	r6, r3
 800a54a:	dc14      	bgt.n	800a576 <atan+0x76>
 800a54c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a550:	429e      	cmp	r6, r3
 800a552:	dc0d      	bgt.n	800a570 <atan+0x70>
 800a554:	a396      	add	r3, pc, #600	; (adr r3, 800a7b0 <atan+0x2b0>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	ee10 0a10 	vmov	r0, s0
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 fe3c 	bl	80001dc <__adddf3>
 800a564:	2200      	movs	r2, #0
 800a566:	4baf      	ldr	r3, [pc, #700]	; (800a824 <atan+0x324>)
 800a568:	f7f6 fa7e 	bl	8000a68 <__aeabi_dcmpgt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d1e6      	bne.n	800a53e <atan+0x3e>
 800a570:	f04f 3aff 	mov.w	sl, #4294967295
 800a574:	e02b      	b.n	800a5ce <atan+0xce>
 800a576:	f000 f963 	bl	800a840 <fabs>
 800a57a:	4bab      	ldr	r3, [pc, #684]	; (800a828 <atan+0x328>)
 800a57c:	429e      	cmp	r6, r3
 800a57e:	ec55 4b10 	vmov	r4, r5, d0
 800a582:	f300 80bf 	bgt.w	800a704 <atan+0x204>
 800a586:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a58a:	429e      	cmp	r6, r3
 800a58c:	f300 80a0 	bgt.w	800a6d0 <atan+0x1d0>
 800a590:	ee10 2a10 	vmov	r2, s0
 800a594:	ee10 0a10 	vmov	r0, s0
 800a598:	462b      	mov	r3, r5
 800a59a:	4629      	mov	r1, r5
 800a59c:	f7f5 fe1e 	bl	80001dc <__adddf3>
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4ba0      	ldr	r3, [pc, #640]	; (800a824 <atan+0x324>)
 800a5a4:	f7f5 fe18 	bl	80001d8 <__aeabi_dsub>
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	f7f5 fe11 	bl	80001dc <__adddf3>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4630      	mov	r0, r6
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	f7f6 f8eb 	bl	800079c <__aeabi_ddiv>
 800a5c6:	f04f 0a00 	mov.w	sl, #0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	f7f5 ffb7 	bl	8000548 <__aeabi_dmul>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4680      	mov	r8, r0
 800a5e0:	4689      	mov	r9, r1
 800a5e2:	f7f5 ffb1 	bl	8000548 <__aeabi_dmul>
 800a5e6:	a374      	add	r3, pc, #464	; (adr r3, 800a7b8 <atan+0x2b8>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	f7f5 ffaa 	bl	8000548 <__aeabi_dmul>
 800a5f4:	a372      	add	r3, pc, #456	; (adr r3, 800a7c0 <atan+0x2c0>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7f5 fdef 	bl	80001dc <__adddf3>
 800a5fe:	4632      	mov	r2, r6
 800a600:	463b      	mov	r3, r7
 800a602:	f7f5 ffa1 	bl	8000548 <__aeabi_dmul>
 800a606:	a370      	add	r3, pc, #448	; (adr r3, 800a7c8 <atan+0x2c8>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 fde6 	bl	80001dc <__adddf3>
 800a610:	4632      	mov	r2, r6
 800a612:	463b      	mov	r3, r7
 800a614:	f7f5 ff98 	bl	8000548 <__aeabi_dmul>
 800a618:	a36d      	add	r3, pc, #436	; (adr r3, 800a7d0 <atan+0x2d0>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f7f5 fddd 	bl	80001dc <__adddf3>
 800a622:	4632      	mov	r2, r6
 800a624:	463b      	mov	r3, r7
 800a626:	f7f5 ff8f 	bl	8000548 <__aeabi_dmul>
 800a62a:	a36b      	add	r3, pc, #428	; (adr r3, 800a7d8 <atan+0x2d8>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f7f5 fdd4 	bl	80001dc <__adddf3>
 800a634:	4632      	mov	r2, r6
 800a636:	463b      	mov	r3, r7
 800a638:	f7f5 ff86 	bl	8000548 <__aeabi_dmul>
 800a63c:	a368      	add	r3, pc, #416	; (adr r3, 800a7e0 <atan+0x2e0>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f7f5 fdcb 	bl	80001dc <__adddf3>
 800a646:	4642      	mov	r2, r8
 800a648:	464b      	mov	r3, r9
 800a64a:	f7f5 ff7d 	bl	8000548 <__aeabi_dmul>
 800a64e:	a366      	add	r3, pc, #408	; (adr r3, 800a7e8 <atan+0x2e8>)
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	4680      	mov	r8, r0
 800a656:	4689      	mov	r9, r1
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f5 ff74 	bl	8000548 <__aeabi_dmul>
 800a660:	a363      	add	r3, pc, #396	; (adr r3, 800a7f0 <atan+0x2f0>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 fdb7 	bl	80001d8 <__aeabi_dsub>
 800a66a:	4632      	mov	r2, r6
 800a66c:	463b      	mov	r3, r7
 800a66e:	f7f5 ff6b 	bl	8000548 <__aeabi_dmul>
 800a672:	a361      	add	r3, pc, #388	; (adr r3, 800a7f8 <atan+0x2f8>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 fdae 	bl	80001d8 <__aeabi_dsub>
 800a67c:	4632      	mov	r2, r6
 800a67e:	463b      	mov	r3, r7
 800a680:	f7f5 ff62 	bl	8000548 <__aeabi_dmul>
 800a684:	a35e      	add	r3, pc, #376	; (adr r3, 800a800 <atan+0x300>)
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	f7f5 fda5 	bl	80001d8 <__aeabi_dsub>
 800a68e:	4632      	mov	r2, r6
 800a690:	463b      	mov	r3, r7
 800a692:	f7f5 ff59 	bl	8000548 <__aeabi_dmul>
 800a696:	a35c      	add	r3, pc, #368	; (adr r3, 800a808 <atan+0x308>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	f7f5 fd9c 	bl	80001d8 <__aeabi_dsub>
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	f7f5 ff50 	bl	8000548 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f7f5 fd94 	bl	80001dc <__adddf3>
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	462b      	mov	r3, r5
 800a6b8:	f7f5 ff46 	bl	8000548 <__aeabi_dmul>
 800a6bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	d14b      	bne.n	800a75e <atan+0x25e>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f5 fd85 	bl	80001d8 <__aeabi_dsub>
 800a6ce:	e72c      	b.n	800a52a <atan+0x2a>
 800a6d0:	ee10 0a10 	vmov	r0, s0
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4b53      	ldr	r3, [pc, #332]	; (800a824 <atan+0x324>)
 800a6d8:	4629      	mov	r1, r5
 800a6da:	f7f5 fd7d 	bl	80001d8 <__aeabi_dsub>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	4b4f      	ldr	r3, [pc, #316]	; (800a824 <atan+0x324>)
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7f5 fd77 	bl	80001dc <__adddf3>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	f7f6 f851 	bl	800079c <__aeabi_ddiv>
 800a6fa:	f04f 0a01 	mov.w	sl, #1
 800a6fe:	4604      	mov	r4, r0
 800a700:	460d      	mov	r5, r1
 800a702:	e764      	b.n	800a5ce <atan+0xce>
 800a704:	4b49      	ldr	r3, [pc, #292]	; (800a82c <atan+0x32c>)
 800a706:	429e      	cmp	r6, r3
 800a708:	dc1d      	bgt.n	800a746 <atan+0x246>
 800a70a:	ee10 0a10 	vmov	r0, s0
 800a70e:	2200      	movs	r2, #0
 800a710:	4b47      	ldr	r3, [pc, #284]	; (800a830 <atan+0x330>)
 800a712:	4629      	mov	r1, r5
 800a714:	f7f5 fd60 	bl	80001d8 <__aeabi_dsub>
 800a718:	2200      	movs	r2, #0
 800a71a:	4606      	mov	r6, r0
 800a71c:	460f      	mov	r7, r1
 800a71e:	4b44      	ldr	r3, [pc, #272]	; (800a830 <atan+0x330>)
 800a720:	4620      	mov	r0, r4
 800a722:	4629      	mov	r1, r5
 800a724:	f7f5 ff10 	bl	8000548 <__aeabi_dmul>
 800a728:	2200      	movs	r2, #0
 800a72a:	4b3e      	ldr	r3, [pc, #248]	; (800a824 <atan+0x324>)
 800a72c:	f7f5 fd56 	bl	80001dc <__adddf3>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4630      	mov	r0, r6
 800a736:	4639      	mov	r1, r7
 800a738:	f7f6 f830 	bl	800079c <__aeabi_ddiv>
 800a73c:	f04f 0a02 	mov.w	sl, #2
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	e743      	b.n	800a5ce <atan+0xce>
 800a746:	462b      	mov	r3, r5
 800a748:	ee10 2a10 	vmov	r2, s0
 800a74c:	2000      	movs	r0, #0
 800a74e:	4939      	ldr	r1, [pc, #228]	; (800a834 <atan+0x334>)
 800a750:	f7f6 f824 	bl	800079c <__aeabi_ddiv>
 800a754:	f04f 0a03 	mov.w	sl, #3
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	e737      	b.n	800a5ce <atan+0xce>
 800a75e:	4b36      	ldr	r3, [pc, #216]	; (800a838 <atan+0x338>)
 800a760:	4e36      	ldr	r6, [pc, #216]	; (800a83c <atan+0x33c>)
 800a762:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a766:	4456      	add	r6, sl
 800a768:	449a      	add	sl, r3
 800a76a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a76e:	f7f5 fd33 	bl	80001d8 <__aeabi_dsub>
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	f7f5 fd2f 	bl	80001d8 <__aeabi_dsub>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a782:	f7f5 fd29 	bl	80001d8 <__aeabi_dsub>
 800a786:	f1bb 0f00 	cmp.w	fp, #0
 800a78a:	4604      	mov	r4, r0
 800a78c:	460d      	mov	r5, r1
 800a78e:	f6bf aed6 	bge.w	800a53e <atan+0x3e>
 800a792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a796:	461d      	mov	r5, r3
 800a798:	e6d1      	b.n	800a53e <atan+0x3e>
 800a79a:	a51d      	add	r5, pc, #116	; (adr r5, 800a810 <atan+0x310>)
 800a79c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7a0:	e6cd      	b.n	800a53e <atan+0x3e>
 800a7a2:	bf00      	nop
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	54442d18 	.word	0x54442d18
 800a7ac:	3ff921fb 	.word	0x3ff921fb
 800a7b0:	8800759c 	.word	0x8800759c
 800a7b4:	7e37e43c 	.word	0x7e37e43c
 800a7b8:	e322da11 	.word	0xe322da11
 800a7bc:	3f90ad3a 	.word	0x3f90ad3a
 800a7c0:	24760deb 	.word	0x24760deb
 800a7c4:	3fa97b4b 	.word	0x3fa97b4b
 800a7c8:	a0d03d51 	.word	0xa0d03d51
 800a7cc:	3fb10d66 	.word	0x3fb10d66
 800a7d0:	c54c206e 	.word	0xc54c206e
 800a7d4:	3fb745cd 	.word	0x3fb745cd
 800a7d8:	920083ff 	.word	0x920083ff
 800a7dc:	3fc24924 	.word	0x3fc24924
 800a7e0:	5555550d 	.word	0x5555550d
 800a7e4:	3fd55555 	.word	0x3fd55555
 800a7e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a7ec:	bfa2b444 	.word	0xbfa2b444
 800a7f0:	52defd9a 	.word	0x52defd9a
 800a7f4:	3fadde2d 	.word	0x3fadde2d
 800a7f8:	af749a6d 	.word	0xaf749a6d
 800a7fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800a800:	fe231671 	.word	0xfe231671
 800a804:	3fbc71c6 	.word	0x3fbc71c6
 800a808:	9998ebc4 	.word	0x9998ebc4
 800a80c:	3fc99999 	.word	0x3fc99999
 800a810:	54442d18 	.word	0x54442d18
 800a814:	bff921fb 	.word	0xbff921fb
 800a818:	440fffff 	.word	0x440fffff
 800a81c:	7ff00000 	.word	0x7ff00000
 800a820:	3fdbffff 	.word	0x3fdbffff
 800a824:	3ff00000 	.word	0x3ff00000
 800a828:	3ff2ffff 	.word	0x3ff2ffff
 800a82c:	40037fff 	.word	0x40037fff
 800a830:	3ff80000 	.word	0x3ff80000
 800a834:	bff00000 	.word	0xbff00000
 800a838:	0800af48 	.word	0x0800af48
 800a83c:	0800af28 	.word	0x0800af28

0800a840 <fabs>:
 800a840:	ec51 0b10 	vmov	r0, r1, d0
 800a844:	ee10 2a10 	vmov	r2, s0
 800a848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a84c:	ec43 2b10 	vmov	d0, r2, r3
 800a850:	4770      	bx	lr
 800a852:	0000      	movs	r0, r0
 800a854:	0000      	movs	r0, r0
	...

0800a858 <floor>:
 800a858:	ec51 0b10 	vmov	r0, r1, d0
 800a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a860:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a864:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a868:	2e13      	cmp	r6, #19
 800a86a:	460c      	mov	r4, r1
 800a86c:	ee10 5a10 	vmov	r5, s0
 800a870:	4680      	mov	r8, r0
 800a872:	dc34      	bgt.n	800a8de <floor+0x86>
 800a874:	2e00      	cmp	r6, #0
 800a876:	da16      	bge.n	800a8a6 <floor+0x4e>
 800a878:	a335      	add	r3, pc, #212	; (adr r3, 800a950 <floor+0xf8>)
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	f7f5 fcad 	bl	80001dc <__adddf3>
 800a882:	2200      	movs	r2, #0
 800a884:	2300      	movs	r3, #0
 800a886:	f7f6 f8ef 	bl	8000a68 <__aeabi_dcmpgt>
 800a88a:	b148      	cbz	r0, 800a8a0 <floor+0x48>
 800a88c:	2c00      	cmp	r4, #0
 800a88e:	da59      	bge.n	800a944 <floor+0xec>
 800a890:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a894:	4a30      	ldr	r2, [pc, #192]	; (800a958 <floor+0x100>)
 800a896:	432b      	orrs	r3, r5
 800a898:	2500      	movs	r5, #0
 800a89a:	42ab      	cmp	r3, r5
 800a89c:	bf18      	it	ne
 800a89e:	4614      	movne	r4, r2
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	e025      	b.n	800a8f2 <floor+0x9a>
 800a8a6:	4f2d      	ldr	r7, [pc, #180]	; (800a95c <floor+0x104>)
 800a8a8:	4137      	asrs	r7, r6
 800a8aa:	ea01 0307 	and.w	r3, r1, r7
 800a8ae:	4303      	orrs	r3, r0
 800a8b0:	d01f      	beq.n	800a8f2 <floor+0x9a>
 800a8b2:	a327      	add	r3, pc, #156	; (adr r3, 800a950 <floor+0xf8>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fc90 	bl	80001dc <__adddf3>
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f7f6 f8d2 	bl	8000a68 <__aeabi_dcmpgt>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d0eb      	beq.n	800a8a0 <floor+0x48>
 800a8c8:	2c00      	cmp	r4, #0
 800a8ca:	bfbe      	ittt	lt
 800a8cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a8d0:	fa43 f606 	asrlt.w	r6, r3, r6
 800a8d4:	19a4      	addlt	r4, r4, r6
 800a8d6:	ea24 0407 	bic.w	r4, r4, r7
 800a8da:	2500      	movs	r5, #0
 800a8dc:	e7e0      	b.n	800a8a0 <floor+0x48>
 800a8de:	2e33      	cmp	r6, #51	; 0x33
 800a8e0:	dd0b      	ble.n	800a8fa <floor+0xa2>
 800a8e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a8e6:	d104      	bne.n	800a8f2 <floor+0x9a>
 800a8e8:	ee10 2a10 	vmov	r2, s0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	f7f5 fc75 	bl	80001dc <__adddf3>
 800a8f2:	ec41 0b10 	vmov	d0, r0, r1
 800a8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	fa23 f707 	lsr.w	r7, r3, r7
 800a906:	4207      	tst	r7, r0
 800a908:	d0f3      	beq.n	800a8f2 <floor+0x9a>
 800a90a:	a311      	add	r3, pc, #68	; (adr r3, 800a950 <floor+0xf8>)
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	f7f5 fc64 	bl	80001dc <__adddf3>
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	f7f6 f8a6 	bl	8000a68 <__aeabi_dcmpgt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d0bf      	beq.n	800a8a0 <floor+0x48>
 800a920:	2c00      	cmp	r4, #0
 800a922:	da02      	bge.n	800a92a <floor+0xd2>
 800a924:	2e14      	cmp	r6, #20
 800a926:	d103      	bne.n	800a930 <floor+0xd8>
 800a928:	3401      	adds	r4, #1
 800a92a:	ea25 0507 	bic.w	r5, r5, r7
 800a92e:	e7b7      	b.n	800a8a0 <floor+0x48>
 800a930:	2301      	movs	r3, #1
 800a932:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a936:	fa03 f606 	lsl.w	r6, r3, r6
 800a93a:	4435      	add	r5, r6
 800a93c:	4545      	cmp	r5, r8
 800a93e:	bf38      	it	cc
 800a940:	18e4      	addcc	r4, r4, r3
 800a942:	e7f2      	b.n	800a92a <floor+0xd2>
 800a944:	2500      	movs	r5, #0
 800a946:	462c      	mov	r4, r5
 800a948:	e7aa      	b.n	800a8a0 <floor+0x48>
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w
 800a950:	8800759c 	.word	0x8800759c
 800a954:	7e37e43c 	.word	0x7e37e43c
 800a958:	bff00000 	.word	0xbff00000
 800a95c:	000fffff 	.word	0x000fffff

0800a960 <matherr>:
 800a960:	2000      	movs	r0, #0
 800a962:	4770      	bx	lr
 800a964:	0000      	movs	r0, r0
	...

0800a968 <scalbn>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	ec55 4b10 	vmov	r4, r5, d0
 800a96e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a972:	4606      	mov	r6, r0
 800a974:	462b      	mov	r3, r5
 800a976:	b9aa      	cbnz	r2, 800a9a4 <scalbn+0x3c>
 800a978:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a97c:	4323      	orrs	r3, r4
 800a97e:	d03b      	beq.n	800a9f8 <scalbn+0x90>
 800a980:	4b31      	ldr	r3, [pc, #196]	; (800aa48 <scalbn+0xe0>)
 800a982:	4629      	mov	r1, r5
 800a984:	2200      	movs	r2, #0
 800a986:	ee10 0a10 	vmov	r0, s0
 800a98a:	f7f5 fddd 	bl	8000548 <__aeabi_dmul>
 800a98e:	4b2f      	ldr	r3, [pc, #188]	; (800aa4c <scalbn+0xe4>)
 800a990:	429e      	cmp	r6, r3
 800a992:	4604      	mov	r4, r0
 800a994:	460d      	mov	r5, r1
 800a996:	da12      	bge.n	800a9be <scalbn+0x56>
 800a998:	a327      	add	r3, pc, #156	; (adr r3, 800aa38 <scalbn+0xd0>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 fdd3 	bl	8000548 <__aeabi_dmul>
 800a9a2:	e009      	b.n	800a9b8 <scalbn+0x50>
 800a9a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a9a8:	428a      	cmp	r2, r1
 800a9aa:	d10c      	bne.n	800a9c6 <scalbn+0x5e>
 800a9ac:	ee10 2a10 	vmov	r2, s0
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f7f5 fc12 	bl	80001dc <__adddf3>
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	e01c      	b.n	800a9f8 <scalbn+0x90>
 800a9be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	3a36      	subs	r2, #54	; 0x36
 800a9c6:	4432      	add	r2, r6
 800a9c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a9cc:	428a      	cmp	r2, r1
 800a9ce:	dd0b      	ble.n	800a9e8 <scalbn+0x80>
 800a9d0:	ec45 4b11 	vmov	d1, r4, r5
 800a9d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800aa40 <scalbn+0xd8>
 800a9d8:	f000 f83c 	bl	800aa54 <copysign>
 800a9dc:	a318      	add	r3, pc, #96	; (adr r3, 800aa40 <scalbn+0xd8>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	ec51 0b10 	vmov	r0, r1, d0
 800a9e6:	e7da      	b.n	800a99e <scalbn+0x36>
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	dd08      	ble.n	800a9fe <scalbn+0x96>
 800a9ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9f8:	ec45 4b10 	vmov	d0, r4, r5
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
 800a9fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa02:	da0d      	bge.n	800aa20 <scalbn+0xb8>
 800aa04:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa08:	429e      	cmp	r6, r3
 800aa0a:	ec45 4b11 	vmov	d1, r4, r5
 800aa0e:	dce1      	bgt.n	800a9d4 <scalbn+0x6c>
 800aa10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800aa38 <scalbn+0xd0>
 800aa14:	f000 f81e 	bl	800aa54 <copysign>
 800aa18:	a307      	add	r3, pc, #28	; (adr r3, 800aa38 <scalbn+0xd0>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	e7e0      	b.n	800a9e2 <scalbn+0x7a>
 800aa20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa24:	3236      	adds	r2, #54	; 0x36
 800aa26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	2200      	movs	r2, #0
 800aa34:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <scalbn+0xe8>)
 800aa36:	e7b2      	b.n	800a99e <scalbn+0x36>
 800aa38:	c2f8f359 	.word	0xc2f8f359
 800aa3c:	01a56e1f 	.word	0x01a56e1f
 800aa40:	8800759c 	.word	0x8800759c
 800aa44:	7e37e43c 	.word	0x7e37e43c
 800aa48:	43500000 	.word	0x43500000
 800aa4c:	ffff3cb0 	.word	0xffff3cb0
 800aa50:	3c900000 	.word	0x3c900000

0800aa54 <copysign>:
 800aa54:	ec51 0b10 	vmov	r0, r1, d0
 800aa58:	ee11 0a90 	vmov	r0, s3
 800aa5c:	ee10 2a10 	vmov	r2, s0
 800aa60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aa68:	ea41 0300 	orr.w	r3, r1, r0
 800aa6c:	ec43 2b10 	vmov	d0, r2, r3
 800aa70:	4770      	bx	lr
	...

0800aa74 <__errno>:
 800aa74:	4b01      	ldr	r3, [pc, #4]	; (800aa7c <__errno+0x8>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20000014 	.word	0x20000014

0800aa80 <__libc_init_array>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4e0d      	ldr	r6, [pc, #52]	; (800aab8 <__libc_init_array+0x38>)
 800aa84:	4c0d      	ldr	r4, [pc, #52]	; (800aabc <__libc_init_array+0x3c>)
 800aa86:	1ba4      	subs	r4, r4, r6
 800aa88:	10a4      	asrs	r4, r4, #2
 800aa8a:	2500      	movs	r5, #0
 800aa8c:	42a5      	cmp	r5, r4
 800aa8e:	d109      	bne.n	800aaa4 <__libc_init_array+0x24>
 800aa90:	4e0b      	ldr	r6, [pc, #44]	; (800aac0 <__libc_init_array+0x40>)
 800aa92:	4c0c      	ldr	r4, [pc, #48]	; (800aac4 <__libc_init_array+0x44>)
 800aa94:	f000 f89c 	bl	800abd0 <_init>
 800aa98:	1ba4      	subs	r4, r4, r6
 800aa9a:	10a4      	asrs	r4, r4, #2
 800aa9c:	2500      	movs	r5, #0
 800aa9e:	42a5      	cmp	r5, r4
 800aaa0:	d105      	bne.n	800aaae <__libc_init_array+0x2e>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aaa8:	4798      	blx	r3
 800aaaa:	3501      	adds	r5, #1
 800aaac:	e7ee      	b.n	800aa8c <__libc_init_array+0xc>
 800aaae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aab2:	4798      	blx	r3
 800aab4:	3501      	adds	r5, #1
 800aab6:	e7f2      	b.n	800aa9e <__libc_init_array+0x1e>
 800aab8:	0800af74 	.word	0x0800af74
 800aabc:	0800af74 	.word	0x0800af74
 800aac0:	0800af74 	.word	0x0800af74
 800aac4:	0800af7c 	.word	0x0800af7c

0800aac8 <memset>:
 800aac8:	4402      	add	r2, r0
 800aaca:	4603      	mov	r3, r0
 800aacc:	4293      	cmp	r3, r2
 800aace:	d100      	bne.n	800aad2 <memset+0xa>
 800aad0:	4770      	bx	lr
 800aad2:	f803 1b01 	strb.w	r1, [r3], #1
 800aad6:	e7f9      	b.n	800aacc <memset+0x4>

0800aad8 <register_fini>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <register_fini+0xc>)
 800aada:	b113      	cbz	r3, 800aae2 <register_fini+0xa>
 800aadc:	4802      	ldr	r0, [pc, #8]	; (800aae8 <register_fini+0x10>)
 800aade:	f000 b805 	b.w	800aaec <atexit>
 800aae2:	4770      	bx	lr
 800aae4:	00000000 	.word	0x00000000
 800aae8:	0800aaf9 	.word	0x0800aaf9

0800aaec <atexit>:
 800aaec:	2300      	movs	r3, #0
 800aaee:	4601      	mov	r1, r0
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 b816 	b.w	800ab24 <__register_exitproc>

0800aaf8 <__libc_fini_array>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d07      	ldr	r5, [pc, #28]	; (800ab18 <__libc_fini_array+0x20>)
 800aafc:	4c07      	ldr	r4, [pc, #28]	; (800ab1c <__libc_fini_array+0x24>)
 800aafe:	1b64      	subs	r4, r4, r5
 800ab00:	10a4      	asrs	r4, r4, #2
 800ab02:	b91c      	cbnz	r4, 800ab0c <__libc_fini_array+0x14>
 800ab04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab08:	f000 b868 	b.w	800abdc <_fini>
 800ab0c:	3c01      	subs	r4, #1
 800ab0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ab12:	4798      	blx	r3
 800ab14:	e7f5      	b.n	800ab02 <__libc_fini_array+0xa>
 800ab16:	bf00      	nop
 800ab18:	0800af7c 	.word	0x0800af7c
 800ab1c:	0800af80 	.word	0x0800af80

0800ab20 <__retarget_lock_acquire_recursive>:
 800ab20:	4770      	bx	lr

0800ab22 <__retarget_lock_release_recursive>:
 800ab22:	4770      	bx	lr

0800ab24 <__register_exitproc>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	4c26      	ldr	r4, [pc, #152]	; (800abc4 <__register_exitproc+0xa0>)
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	6820      	ldr	r0, [r4, #0]
 800ab2e:	4698      	mov	r8, r3
 800ab30:	460f      	mov	r7, r1
 800ab32:	4691      	mov	r9, r2
 800ab34:	f7ff fff4 	bl	800ab20 <__retarget_lock_acquire_recursive>
 800ab38:	4b23      	ldr	r3, [pc, #140]	; (800abc8 <__register_exitproc+0xa4>)
 800ab3a:	681d      	ldr	r5, [r3, #0]
 800ab3c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800ab40:	b918      	cbnz	r0, 800ab4a <__register_exitproc+0x26>
 800ab42:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800ab46:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ab4a:	6843      	ldr	r3, [r0, #4]
 800ab4c:	2b1f      	cmp	r3, #31
 800ab4e:	dd19      	ble.n	800ab84 <__register_exitproc+0x60>
 800ab50:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <__register_exitproc+0xa8>)
 800ab52:	b933      	cbnz	r3, 800ab62 <__register_exitproc+0x3e>
 800ab54:	6820      	ldr	r0, [r4, #0]
 800ab56:	f7ff ffe4 	bl	800ab22 <__retarget_lock_release_recursive>
 800ab5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab62:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ab66:	f3af 8000 	nop.w
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d0f2      	beq.n	800ab54 <__register_exitproc+0x30>
 800ab6e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800ab72:	6003      	str	r3, [r0, #0]
 800ab74:	2200      	movs	r2, #0
 800ab76:	6042      	str	r2, [r0, #4]
 800ab78:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ab7c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800ab80:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800ab84:	6843      	ldr	r3, [r0, #4]
 800ab86:	b19e      	cbz	r6, 800abb0 <__register_exitproc+0x8c>
 800ab88:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800ab92:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800ab96:	409a      	lsls	r2, r3
 800ab98:	4311      	orrs	r1, r2
 800ab9a:	2e02      	cmp	r6, #2
 800ab9c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800aba0:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800aba4:	bf02      	ittt	eq
 800aba6:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800abaa:	430a      	orreq	r2, r1
 800abac:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	3302      	adds	r3, #2
 800abb4:	6042      	str	r2, [r0, #4]
 800abb6:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800abba:	6820      	ldr	r0, [r4, #0]
 800abbc:	f7ff ffb1 	bl	800ab22 <__retarget_lock_release_recursive>
 800abc0:	2000      	movs	r0, #0
 800abc2:	e7cc      	b.n	800ab5e <__register_exitproc+0x3a>
 800abc4:	20000440 	.word	0x20000440
 800abc8:	0800af68 	.word	0x0800af68
 800abcc:	00000000 	.word	0x00000000

0800abd0 <_init>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr

0800abdc <_fini>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr
