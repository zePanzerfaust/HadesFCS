
EKF_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800ca88  0800ca88  0001ca88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d130  0800d130  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800d130  0800d130  0001d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d138  0800d138  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d138  0800d138  0001d138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d13c  0800d13c  0001d13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800d140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a38  20000350  0800d490  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d88  0800d490  00021d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177ca  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000339e  00000000  00000000  00037b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001018  00000000  00000000  0003aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  0003bf00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a17  00000000  00000000  0003cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001021a  00000000  00000000  0005e7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be384  00000000  00000000  0006e9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012cd65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e18  00000000  00000000  0012cde0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca70 	.word	0x0800ca70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800ca70 	.word	0x0800ca70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_Init>:
#include "BMI088.h"

uint8_t BMI088_Init(BMI088IMU *imu, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intAccPinBank, uint16_t intAccPin, GPIO_TypeDef *intGyrPinBank, uint16_t intGyrPin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	807b      	strh	r3, [r7, #2]
	imu->I2Chandle     = I2Chandle;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	601a      	str	r2, [r3, #0]
	imu->intAccPinBank = intAccPinBank;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
	imu->intAccPin     = intAccPin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	811a      	strh	r2, [r3, #8]
	imu->intGyrPinBank = intGyrPinBank;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ecc:	60da      	str	r2, [r3, #12]
	imu->intGyrPin     = intGyrPin;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ed2:	821a      	strh	r2, [r3, #16]
	imu->acc[0] = 0.0f;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
	imu->acc[1] = 0.0f;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
	imu->acc[2] = 0.0f;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
	imu->gyr[0] = 0.0f;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
	imu->gyr[1] = 0.0f;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
	imu->gyr[2] = 0.0f;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
	 * ACCELEROMETER
	 */

	/* Check chip ID */
	uint8_t chipID;
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 0317 	add.w	r3, r7, #23
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2132      	movs	r1, #50	; 0x32
 8000f1c:	f002 fafa 	bl	8003514 <HAL_I2C_Mem_Read>

	if (chipID != 0x1E) {
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b1e      	cmp	r3, #30
 8000f24:	d001      	beq.n	8000f2a <BMI088_Init+0x82>
		return 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e0ca      	b.n	80010c0 <BMI088_Init+0x218>
	} else {
		/* Configure accelerometer LPF bandwidth (Normal, 1010) and ODR (100 Hz, 1000) --> Actual bandwidth = 40 Hz */
		uint8_t accConf = 0xA8;
 8000f2a:	23a8      	movs	r3, #168	; 0xa8
 8000f2c:	77fb      	strb	r3, [r7, #31]
		txBuf[0] = BMI088_ACC_CONF; txBuf[1] = accConf;
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	763b      	strb	r3, [r7, #24]
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f107 0218 	add.w	r2, r7, #24
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	2132      	movs	r1, #50	; 0x32
 8000f46:	f002 f9e7 	bl	8003318 <HAL_I2C_Master_Transmit>

		/* Accelerometer range (+-6G = 0x01) */
		uint8_t accRange = 0x01;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	77bb      	strb	r3, [r7, #30]
		txBuf[0] = BMI088_ACC_RANGE; txBuf[1] = accRange;
 8000f4e:	2341      	movs	r3, #65	; 0x41
 8000f50:	763b      	strb	r3, [r7, #24]
 8000f52:	7fbb      	ldrb	r3, [r7, #30]
 8000f54:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	f107 0218 	add.w	r2, r7, #24
 8000f5e:	2364      	movs	r3, #100	; 0x64
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	2132      	movs	r1, #50	; 0x32
 8000f66:	f002 f9d7 	bl	8003318 <HAL_I2C_Master_Transmit>

		/* Configure INT1 and INT2 pin */
		uint8_t intConf = 0x0A;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	777b      	strb	r3, [r7, #29]
		txBuf[0] = BMI088_INT1_IO_CONF; txBuf[1] = intConf;
 8000f6e:	2353      	movs	r3, #83	; 0x53
 8000f70:	763b      	strb	r3, [r7, #24]
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	f107 0218 	add.w	r2, r7, #24
 8000f7e:	2364      	movs	r3, #100	; 0x64
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	2132      	movs	r1, #50	; 0x32
 8000f86:	f002 f9c7 	bl	8003318 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_INT2_IO_CONF;
 8000f8a:	2354      	movs	r3, #84	; 0x54
 8000f8c:	763b      	strb	r3, [r7, #24]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	f107 0218 	add.w	r2, r7, #24
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2132      	movs	r1, #50	; 0x32
 8000f9e:	f002 f9bb 	bl	8003318 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_INT1_INT2_MAP_DATA; txBuf[1] = 0x44;
 8000fa2:	2358      	movs	r3, #88	; 0x58
 8000fa4:	763b      	strb	r3, [r7, #24]
 8000fa6:	2344      	movs	r3, #68	; 0x44
 8000fa8:	767b      	strb	r3, [r7, #25]

		/* Set accelerometer to active mode */
		txBuf[0] = BMI088_ACC_PWR_CONF; txBuf[1] = 0x00;
 8000faa:	237c      	movs	r3, #124	; 0x7c
 8000fac:	763b      	strb	r3, [r7, #24]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	f002 f9a9 	bl	8003318 <HAL_I2C_Master_Transmit>

		/* Switch accelerometer on */
		txBuf[0] = BMI088_ACC_PWR_CTRL; txBuf[1] = 0x04;
 8000fc6:	237d      	movs	r3, #125	; 0x7d
 8000fc8:	763b      	strb	r3, [r7, #24]
 8000fca:	2304      	movs	r3, #4
 8000fcc:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f107 0218 	add.w	r2, r7, #24
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	2132      	movs	r1, #50	; 0x32
 8000fde:	f002 f99b 	bl	8003318 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f001 fd5e 	bl	8002aa4 <HAL_Delay>
	/*
	 * GYROSCOPE
	 */

	/* Check chip ID */
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 0317 	add.w	r3, r7, #23
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	21d2      	movs	r1, #210	; 0xd2
 8001000:	f002 fa88 	bl	8003514 <HAL_I2C_Mem_Read>

	if (chipID != 0x0F) {
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	d001      	beq.n	800100e <BMI088_Init+0x166>
		return 0;
 800100a:	2300      	movs	r3, #0
 800100c:	e058      	b.n	80010c0 <BMI088_Init+0x218>
	} else {
		/* Gyro range (+- 500deg/s) */
		uint8_t gyrRange = 0x02;
 800100e:	2302      	movs	r3, #2
 8001010:	773b      	strb	r3, [r7, #28]
		txBuf[0] = BMI088_GYR_RANGE; txBuf[1] = gyrRange;
 8001012:	230f      	movs	r3, #15
 8001014:	763b      	strb	r3, [r7, #24]
 8001016:	7f3b      	ldrb	r3, [r7, #28]
 8001018:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f107 0218 	add.w	r2, r7, #24
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	21d2      	movs	r1, #210	; 0xd2
 800102a:	f002 f975 	bl	8003318 <HAL_I2C_Master_Transmit>

		/* Gyro bandwidth/ODR (ODR = 200 Hz --> Filter bandwidth = 47 Hz) */
		uint8_t gyrBandwidth = 0x83;
 800102e:	2383      	movs	r3, #131	; 0x83
 8001030:	76fb      	strb	r3, [r7, #27]
		txBuf[0] = BMI088_GYR_BANDWIDTH; txBuf[1] = gyrBandwidth;
 8001032:	2310      	movs	r3, #16
 8001034:	763b      	strb	r3, [r7, #24]
 8001036:	7efb      	ldrb	r3, [r7, #27]
 8001038:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f107 0218 	add.w	r2, r7, #24
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2302      	movs	r3, #2
 8001048:	21d2      	movs	r1, #210	; 0xd2
 800104a:	f002 f965 	bl	8003318 <HAL_I2C_Master_Transmit>

		/* Gyro power mode */
		txBuf[0] = BMI088_GYR_LPM1; txBuf[1] = 0x00;
 800104e:	2311      	movs	r3, #17
 8001050:	763b      	strb	r3, [r7, #24]
 8001052:	2300      	movs	r3, #0
 8001054:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f107 0218 	add.w	r2, r7, #24
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2302      	movs	r3, #2
 8001064:	21d2      	movs	r1, #210	; 0xd2
 8001066:	f002 f957 	bl	8003318 <HAL_I2C_Master_Transmit>

		/* Enable gyro interrupt and map to pins */
		txBuf[0] = BMI088_GYR_INT_CTRL; txBuf[1] = 0x80;
 800106a:	2315      	movs	r3, #21
 800106c:	763b      	strb	r3, [r7, #24]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f107 0218 	add.w	r2, r7, #24
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2302      	movs	r3, #2
 8001080:	21d2      	movs	r1, #210	; 0xd2
 8001082:	f002 f949 	bl	8003318 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_GYR_INT3_INT4_IO_CONF; txBuf[1] = 0x05;
 8001086:	2316      	movs	r3, #22
 8001088:	763b      	strb	r3, [r7, #24]
 800108a:	2305      	movs	r3, #5
 800108c:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f107 0218 	add.w	r2, r7, #24
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2302      	movs	r3, #2
 800109c:	21d2      	movs	r1, #210	; 0xd2
 800109e:	f002 f93b 	bl	8003318 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_GYR_INT3_INT4_IO_MAP; txBuf[1] = 0x81;
 80010a2:	2318      	movs	r3, #24
 80010a4:	763b      	strb	r3, [r7, #24]
 80010a6:	2381      	movs	r3, #129	; 0x81
 80010a8:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f107 0218 	add.w	r2, r7, #24
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	21d2      	movs	r1, #210	; 0xd2
 80010ba:	f002 f92d 	bl	8003318 <HAL_I2C_Master_Transmit>
	}

	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <BMI088_ReadAcc>:
	uint8_t txBuf[] = {BMI088_GYR_SOFTRESET, 0xB6};
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
	HAL_Delay(1);
}

void BMI088_ReadAcc(BMI088IMU *imu) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2306      	movs	r3, #6
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	2212      	movs	r2, #18
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	f002 fa14 	bl	8003514 <HAL_I2C_Mem_Read>

	int16_t accX = rxBuf[1];
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	82fb      	strh	r3, [r7, #22]
			accX <<= 8;
 80010f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	82fb      	strh	r3, [r7, #22]
			accX |= rxBuf[0];
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	8afb      	ldrh	r3, [r7, #22]
 80010fe:	4313      	orrs	r3, r2
 8001100:	82fb      	strh	r3, [r7, #22]

	int16_t accY = rxBuf[3];
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	82bb      	strh	r3, [r7, #20]
			accY <<= 8;
 8001106:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	82bb      	strh	r3, [r7, #20]
			accY |= rxBuf[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	b21a      	sxth	r2, r3
 8001112:	8abb      	ldrh	r3, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	82bb      	strh	r3, [r7, #20]

	int16_t accZ = rxBuf[5];
 8001118:	7c7b      	ldrb	r3, [r7, #17]
 800111a:	827b      	strh	r3, [r7, #18]
			accZ <<= 8;
 800111c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	827b      	strh	r3, [r7, #18]
			accZ |= rxBuf[4];
 8001124:	7c3b      	ldrb	r3, [r7, #16]
 8001126:	b21a      	sxth	r2, r3
 8001128:	8a7b      	ldrh	r3, [r7, #18]
 800112a:	4313      	orrs	r3, r2
 800112c:	827b      	strh	r3, [r7, #18]

	/* Scale (to m/s^2) and re-map axes */
	imu->acc[0] = -accY * 0.00179626456f;
 800112e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001132:	425b      	negs	r3, r3
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800118c <BMI088_ReadAcc+0xc4>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->acc[1] = -accX * 0.00179626456f;
 800114a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800114e:	425b      	negs	r3, r3
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001158:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800118c <BMI088_ReadAcc+0xc4>
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc[2] = -accZ * 0.00179626456f;
 8001166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800116a:	425b      	negs	r3, r3
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800118c <BMI088_ReadAcc+0xc4>
 8001178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	3aeb70a3 	.word	0x3aeb70a3

08001190 <BMI088_ReadGyr>:

void BMI088_ReadGyr(BMI088IMU *imu) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2306      	movs	r3, #6
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2202      	movs	r2, #2
 80011ae:	21d2      	movs	r1, #210	; 0xd2
 80011b0:	f002 f9b0 	bl	8003514 <HAL_I2C_Mem_Read>

	int16_t gyrX = rxBuf[1];
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	82fb      	strh	r3, [r7, #22]
			gyrX <<= 8;
 80011b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	82fb      	strh	r3, [r7, #22]
			gyrX |= rxBuf[0];
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	8afb      	ldrh	r3, [r7, #22]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	82fb      	strh	r3, [r7, #22]

	int16_t gyrY = rxBuf[3];
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	82bb      	strh	r3, [r7, #20]
			gyrY <<= 8;
 80011ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	82bb      	strh	r3, [r7, #20]
			gyrY |= rxBuf[2];
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	b21a      	sxth	r2, r3
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	82bb      	strh	r3, [r7, #20]

	int16_t gyrZ = rxBuf[5];
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	827b      	strh	r3, [r7, #18]
			gyrZ <<= 8;
 80011e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	827b      	strh	r3, [r7, #18]
			gyrZ |= rxBuf[4];
 80011ec:	7c3b      	ldrb	r3, [r7, #16]
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	8a7b      	ldrh	r3, [r7, #18]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	827b      	strh	r3, [r7, #18]

	/* Scale (to rad/s) and re-map axes */
	imu->gyr[0] = -gyrY * 0.00026632423f;
 80011f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fa:	425b      	negs	r3, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001254 <BMI088_ReadGyr+0xc4>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->gyr[1] = -gyrX * 0.00026632423f;
 8001212:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001216:	425b      	negs	r3, r3
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001254 <BMI088_ReadGyr+0xc4>
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->gyr[2] = -gyrZ * 0.00026632423f;
 800122e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001232:	425b      	negs	r3, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001254 <BMI088_ReadGyr+0xc4>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	398ba16f 	.word	0x398ba16f

08001258 <KalmanRollPitch_Init>:
#include "KalmanRollPitch.h"

void KalmanRollPitch_Init(KalmanRollPitch *kal, float Pinit, float *Q, float *R) {
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	ed87 0a02 	vstr	s0, [r7, #8]
 8001264:	6079      	str	r1, [r7, #4]
 8001266:	603a      	str	r2, [r7, #0]
	kal->phi   = 0.0f;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	kal->theta = 0.0f;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
	kal->P[0] = Pinit; kal->P[1] = 0.0f;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
	kal->P[2] = 0.0f;  kal->P[3] = Pinit;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	615a      	str	r2, [r3, #20]
	kal->Q[0] = Q[0];  kal->Q[1] = Q[1];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	61da      	str	r2, [r3, #28]
	kal->R[0] = R[0];  kal->R[1] = R[1]; kal->R[2] = R[2];
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	621a      	str	r2, [r3, #32]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <KalmanRollPitch_Predict>:

void KalmanRollPitch_Predict(KalmanRollPitch *kal, float *gyr, float T) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Extract measurements */
	float p = gyr[0];
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	64fb      	str	r3, [r7, #76]	; 0x4c
	float q = gyr[1];
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	64bb      	str	r3, [r7, #72]	; 0x48
	float r = gyr[2];
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
	/*
	*  PREDICT
	*/

	/* Compute common trig terms */
	float sp = sinf(kal->phi);   float cp = cosf(kal->phi);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	f00a fd65 	bl	800bdc0 <sinf>
 80012f6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	f00a fd1c 	bl	800bd40 <cosf>
 8001308:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float tt = tanf(kal->theta);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	f00a fd95 	bl	800be44 <tanf>
 800131a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	/* x+ = x- + T * f(x,u) */
	kal->phi   = kal->phi   + T * (p + tt * (q * sp + r * cp));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001328:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800132c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001330:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8001334:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001338:	ee66 7a27 	vmul.f32	s15, s12, s15
 800133c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001340:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001344:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001348:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800134c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001350:	edd7 7a01 	vldr	s15, [r7, #4]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + T * (    q * cp      - r * sp);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ed93 7a01 	vldr	s14, [r3, #4]
 8001368:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800136c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001370:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001374:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8001378:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800137c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001380:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Recompute common trig terms using new state estimates */
	      sp = sinf(kal->phi); 		   cp = cosf(kal->phi);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f00a fd0e 	bl	800bdc0 <sinf>
 80013a4:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	f00a fcc5 	bl	800bd40 <cosf>
 80013b6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float st = sinf(kal->theta); float ct = cosf(kal->theta); tt = st / ct;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f00a fcfc 	bl	800bdc0 <sinf>
 80013c8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	f00a fcb3 	bl	800bd40 <cosf>
 80013da:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 80013de:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80013e2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80013e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ea:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	/* Jacobian of f(x,u) */
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 80013ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80013f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80013fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee37 7a67 	vsub.f32	s14, s14, s15
 800140a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001412:	edc7 7a08 	vstr	s15, [r7, #32]
 8001416:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800141a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001426:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001432:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001436:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				 -(r * cp + q * sp),        0.0f};
 800144e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001452:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800145e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146a:	eef1 7a67 	vneg.f32	s15, s15
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 800146e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Update covariance matrix P+ = P- + T * (A*P- + P-*A' + Q) */
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	ed93 7a06 	vldr	s14, [r3, #24]
 800147e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001482:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a02 	vldr	s15, [r3, #8]
 800148c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edd3 7a03 	vldr	s15, [r3, #12]
 800149e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	edc7 7a04 	vstr	s15, [r7, #16]
 80014c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001510:	edc7 7a05 	vstr	s15, [r7, #20]
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 8001514:	ed97 7a08 	vldr	s14, [r7, #32]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	edd3 7a04 	vldr	s15, [r3, #16]
 800151e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001522:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	edd3 7a02 	vldr	s15, [r3, #8]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	edd3 7a05 	vldr	s15, [r3, #20]
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001546:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001558:	edd7 7a01 	vldr	s15, [r7, #4]
 800155c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001560:	edc7 7a06 	vstr	s15, [r7, #24]
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	ed93 7a07 	vldr	s14, [r3, #28]
 800156a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edd3 7a03 	vldr	s15, [r3, #12]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	edd3 7a04 	vldr	s15, [r3, #16]
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001592:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	edd3 7a05 	vldr	s15, [r3, #20]
 800159c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 80015ac:	edc7 7a07 	vstr	s15, [r7, #28]

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	edc3 7a02 	vstr	s15, [r3, #8]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80015ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	ed93 7a04 	vldr	s14, [r3, #16]
 80015de:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	edc3 7a04 	vstr	s15, [r3, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80015f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001600:	bf00      	nop
 8001602:	3750      	adds	r7, #80	; 0x50
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <KalmanRollPitch_Update>:

void KalmanRollPitch_Update(KalmanRollPitch *kal, float *gyr, float *acc, float Va) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b6      	sub	sp, #216	; 0xd8
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	ed87 0a00 	vstr	s0, [r7]
	/* Extract measurements */
	float p = gyr[0];
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float q = gyr[1];
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float r = gyr[2];
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	float ax = acc[0];
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float ay = acc[1];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float az = acc[2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	const float g = 9.81f;
 8001648:	4bf0      	ldr	r3, [pc, #960]	; (8001a0c <KalmanRollPitch_Update+0x404>)
 800164a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	/* Compute common trig terms */
	float sp = sinf(kal->phi);   float cp = cosf(kal->phi);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	f00a fbb2 	bl	800bdc0 <sinf>
 800165c:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	f00a fb69 	bl	800bd40 <cosf>
 800166e:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
	float st = sinf(kal->theta); float ct = cosf(kal->theta);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	edd3 7a01 	vldr	s15, [r3, #4]
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	f00a fba0 	bl	800bdc0 <sinf>
 8001680:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	edd3 7a01 	vldr	s15, [r3, #4]
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	f00a fb57 	bl	800bd40 <cosf>
 8001692:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac

	/* Output function h(x,u) */
	float h[3] = { q * Va * st               + g * st,
 8001696:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 800169a:	edd7 7a00 	vldr	s15, [r7]
 800169e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80016a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016aa:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80016ae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				   r * Va * ct - p * Va * st - g * ct * sp,
 80016be:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80016c2:	edd7 7a00 	vldr	s15, [r7]
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ca:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80016ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d2:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 80016d6:	edd7 7a00 	vldr	s15, [r7]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ea:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80016ee:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80016f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016f6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001702:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				  -q * Va * ct               - g * ct * cp };
 8001706:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800170a:	eeb1 7a67 	vneg.f32	s14, s15
 800170e:	edd7 7a00 	vldr	s15, [r7]
 8001712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001716:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8001722:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001726:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800172a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001736:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	/* Jacobian of h(x,u) */
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001742:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001746:	edd7 7a00 	vldr	s15, [r7]
 800174a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001756:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800175a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 800176a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800176e:	eeb1 7a67 	vneg.f32	s14, s15
 8001772:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001782:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 8001786:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800178a:	eeb1 7a67 	vneg.f32	s14, s15
 800178e:	edd7 7a00 	vldr	s15, [r7]
 8001792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001796:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800179a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179e:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 80017a2:	edd7 7a00 	vldr	s15, [r7]
 80017a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017aa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80017ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80017ba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80017be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee77 7a27 	vadd.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 80017ce:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				   g * sp * ct, (q * Va + g * cp) * st };
 80017d2:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80017d6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80017da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017de:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 80017e6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				   g * sp * ct, (q * Va + g * cp) * st };
 80017ea:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80017ee:	edd7 7a00 	vldr	s15, [r7]
 80017f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80017fa:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80017fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001806:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 800180e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

	/* Kalman gain K = P * C' / (C * P * C' + R) */
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	ed93 7a05 	vldr	s14, [r3, #20]
 8001818:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800181c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001820:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	edd3 7a08 	vldr	s15, [r3, #32]
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8001836:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800183a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800183e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	edd3 7a04 	vldr	s15, [r3, #16]
 8001848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800184c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001850:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001854:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	edd3 7a05 	vldr	s15, [r3, #20]
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001866:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 800186a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800186e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	edd3 7a04 	vldr	s15, [r3, #16]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001884:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001888:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 800189e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80018a2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018b0:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80018ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 80018c6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80018d0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80018d4:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	edd3 7a02 	vldr	s15, [r3, #8]
 80018de:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018e2:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018f0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80018f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018fc:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001900:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	edd3 7a03 	vldr	s15, [r3, #12]
 800190a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800190e:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	edd3 7a05 	vldr	s15, [r3, #20]
 8001918:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800191c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001928:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 800192c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001930:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edd3 7a02 	vldr	s15, [r3, #8]
 800193a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800193e:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	edd3 7a04 	vldr	s15, [r3, #16]
 8001948:	ee66 7a27 	vmul.f32	s15, s12, s15
 800194c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001954:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001958:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001962:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001966:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001970:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001974:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001980:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001984:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001988:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001992:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001996:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	edd3 7a05 	vldr	s15, [r3, #20]
 80019a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 80019ac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 80019b0:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80019b4:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80019be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019c2:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80019cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80019dc:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019ea:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80019f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80019fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001a04:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8001a08:	e002      	b.n	8001a10 <KalmanRollPitch_Update+0x408>
 8001a0a:	bf00      	nop
 8001a0c:	411cf5c3 	.word	0x411cf5c3
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a16:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001a1a:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a24:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a28:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a32:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a36:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a42:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001a46:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a54:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a62:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001a6e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

	float Gdetinv = 1.0f / (G[0]*G[4]*G[8] - G[0]*G[5]*G[7] - G[1]*G[3]*G[8] + G[1]*G[5]*G[6] + G[2]*G[3]*G[7] - G[2]*G[4]*G[6]);
 8001a72:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a76:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a86:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001a8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a92:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001aa2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001aa6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aaa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ab6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001aba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001abe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ac2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ace:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001ad2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ad6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ada:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001aea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001aee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b06:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001b0a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001b0e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b16:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8001b1a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b26:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8001b32:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001b36:	eeb1 7a67 	vneg.f32	s14, s15
 8001b3a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001b3e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b46:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 8001b4a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b4e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8001b5e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001b62:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001b6e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b7a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b82:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8001b86:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001b8a:	eeb1 7a67 	vneg.f32	s14, s15
 8001b8e:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001b92:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b9a:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 8001b9e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001ba2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ba6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001bae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8001bb2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001bb6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbe:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001bc2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001bd6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8001bda:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001bde:	eeb1 7a67 	vneg.f32	s14, s15
 8001be2:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001be6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bee:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 8001bf2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001bf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bfa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001c02:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8001c06:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001c0a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c12:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001c16:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c22:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001c2a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8001c2e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c32:	eeb1 7a67 	vneg.f32	s14, s15
 8001c36:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001c3a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c42:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c46:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001c4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001c56:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8001c5a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c5e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c66:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001c6a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c76:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001c7e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8001c82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c86:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c94:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001caa:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001cae:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cbc:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cc6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cca:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001cda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001cf4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001cf8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d06:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001d20:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d2e:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d3c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001d4c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001d66:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d6a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d78:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001d92:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001da0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001daa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dae:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dba:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001dbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 8001dd8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ddc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dea:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001df4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e00:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001e04:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e12:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e20:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001e30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8001e46:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 8001e4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e4e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e5c:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e72:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001e76:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e84:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e8e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e92:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001ea2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ea6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	edd3 7a05 	vldr	s15, [r3, #20]
 8001eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8001eb8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 8001ebc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ec0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ece:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ed8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001ee8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ef2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ef6:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f04:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f10:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001f14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f26:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8001f2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	/* Update covariance matrix P++ = (I - K * C) * P+ */
	float Ptmp[4];

	Ptmp[0] = -kal->P[2]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[0]*(C[2]*K[1] + C[4]*K[2] - 1.0f); Ptmp[1] = -kal->P[3]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[1]*(C[2]*K[1] + C[4]*K[2] - 1.0f);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f34:	eeb1 7a67 	vneg.f32	s14, s15
 8001f38:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f44:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001f48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f54:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8001f58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f6e:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001f72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f7a:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8001f7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f82:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f86:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	edc7 7a05 	vstr	s15, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fa4:	eeb1 7a67 	vneg.f32	s14, s15
 8001fa8:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001fac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fb4:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001fb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fc4:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8001fc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fcc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fde:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001fe2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fe6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fea:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8001fee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ff6:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ffa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ffe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200a:	edc7 7a06 	vstr	s15, [r7, #24]
	Ptmp[2] = -kal->P[2]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[0]*(C[2]*K[4] + C[4]*K[5]); Ptmp[3] = -kal->P[3]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[1]*(C[2]*K[4] + C[4]*K[5]);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	edd3 7a04 	vldr	s15, [r3, #16]
 8002014:	eeb1 7a67 	vneg.f32	s14, s15
 8002018:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800201c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002020:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002024:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002028:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800202c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002030:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002034:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8002038:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800203c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	edd3 6a02 	vldr	s13, [r3, #8]
 8002056:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800205a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800205e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002062:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8002066:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800206a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800206e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207a:	edc7 7a07 	vstr	s15, [r7, #28]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	edd3 7a05 	vldr	s15, [r3, #20]
 8002084:	eeb1 7a67 	vneg.f32	s14, s15
 8002088:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800208c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002090:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002094:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002098:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800209c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020a4:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 80020a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80020bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80020c6:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80020ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020d2:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 80020d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020de:	ee76 7a27 	vadd.f32	s15, s12, s15
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	edc7 7a08 	vstr	s15, [r7, #32]

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80020f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	edc3 7a02 	vstr	s15, [r3, #8]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	ed93 7a03 	vldr	s14, [r3, #12]
 8002108:	edd7 7a06 	vldr	s15, [r7, #24]
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	ed93 7a04 	vldr	s14, [r3, #16]
 800211c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	edc3 7a04 	vstr	s15, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002130:	edd7 7a08 	vldr	s15, [r7, #32]
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Update state estimate x++ = x+ + K * (y - h) */
	kal->phi   = kal->phi   + K[0] * (ax - h[0]) + K[1] * (ay - h[1]) + K[2] * (az - h[2]);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002148:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800214c:	ed97 6a32 	vldr	s12, [r7, #200]	; 0xc8
 8002150:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002160:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002164:	ed97 6a31 	vldr	s12, [r7, #196]	; 0xc4
 8002168:	ee76 7a67 	vsub.f32	s15, s12, s15
 800216c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002174:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002178:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800217c:	ed97 6a30 	vldr	s12, [r7, #192]	; 0xc0
 8002180:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + K[3] * (ax - h[0]) + K[4] * (ay - h[1]) + K[5] * (az - h[2]);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	ed93 7a01 	vldr	s14, [r3, #4]
 8002198:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800219c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80021a0:	ed97 6a32 	vldr	s12, [r7, #200]	; 0xc8
 80021a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80021b4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021b8:	ed97 6a31 	vldr	s12, [r7, #196]	; 0xc4
 80021bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80021cc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021d0:	ed97 6a30 	vldr	s12, [r7, #192]	; 0xc0
 80021d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80021e6:	bf00      	nop
 80021e8:	37d8      	adds	r7, #216	; 0xd8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <main>:

BMI088IMU imu;
KalmanRollPitch ekf;

int main(void)
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	b09d      	sub	sp, #116	; 0x74
 80021f4:	af02      	add	r7, sp, #8

  HAL_Init();
 80021f6:	f000 fbe3 	bl	80029c0 <HAL_Init>

  SystemClock_Config();
 80021fa:	f000 f8c7 	bl	800238c <SystemClock_Config>

  MX_GPIO_Init();
 80021fe:	f000 f9b1 	bl	8002564 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002202:	f000 f92d 	bl	8002460 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002206:	f000 f959 	bl	80024bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800220a:	f000 f981 	bl	8002510 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800220e:	f007 f847 	bl	80092a0 <MX_USB_DEVICE_Init>

  if (BMI088_Init(&imu, &hi2c1, GPIOA, INT_ACC_Pin, GPIOA, INT_GYR_Pin) == 0) {
 8002212:	2320      	movs	r3, #32
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <main+0x160>)
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2310      	movs	r3, #16
 800221c:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <main+0x160>)
 800221e:	494d      	ldr	r1, [pc, #308]	; (8002354 <main+0x164>)
 8002220:	484d      	ldr	r0, [pc, #308]	; (8002358 <main+0x168>)
 8002222:	f7fe fe41 	bl	8000ea8 <BMI088_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <main+0x4a>

	  HAL_GPIO_WritePin(GPIOB, LED_A_Pin, GPIO_PIN_SET);
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002232:	484a      	ldr	r0, [pc, #296]	; (800235c <main+0x16c>)
 8002234:	f000 ff04 	bl	8003040 <HAL_GPIO_WritePin>

	  while (1) {
 8002238:	e7fe      	b.n	8002238 <main+0x48>
	  }

  }

  /* Initialise Kalman filter */
  float Q[2] = {0.0052360f, 0.0034907f};
 800223a:	4a49      	ldr	r2, [pc, #292]	; (8002360 <main+0x170>)
 800223c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002244:	e883 0003 	stmia.w	r3, {r0, r1}
  float R[3] = {0.0099270f, 0.0099270f, 0.011788f};
 8002248:	4a46      	ldr	r2, [pc, #280]	; (8002364 <main+0x174>)
 800224a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800224e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002250:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  KalmanRollPitch_Init(&ekf, 0.1f, Q, R);
 8002254:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800225c:	4619      	mov	r1, r3
 800225e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002368 <main+0x178>
 8002262:	4842      	ldr	r0, [pc, #264]	; (800236c <main+0x17c>)
 8002264:	f7fe fff8 	bl	8001258 <KalmanRollPitch_Init>

  /* Timers */
  uint32_t timerACC = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t timerGYR = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t timerCOM = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t timerLED = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	65bb      	str	r3, [r7, #88]	; 0x58
  while (1)
  {

	  /* Accelerometer measurements and Kalman update */

	  if ((HAL_GetTick() - timerACC) >= SAMPLE_TIME_ACC_MS) {
 8002278:	f000 fc08 	bl	8002a8c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b18      	cmp	r3, #24
 8002284:	d90c      	bls.n	80022a0 <main+0xb0>

		  BMI088_ReadAcc(&imu);
 8002286:	4834      	ldr	r0, [pc, #208]	; (8002358 <main+0x168>)
 8002288:	f7fe ff1e 	bl	80010c8 <BMI088_ReadAcc>

		  KalmanRollPitch_Update(&ekf, imu.gyr, imu.acc, 0.0f);
 800228c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002370 <main+0x180>
 8002290:	4a38      	ldr	r2, [pc, #224]	; (8002374 <main+0x184>)
 8002292:	4939      	ldr	r1, [pc, #228]	; (8002378 <main+0x188>)
 8002294:	4835      	ldr	r0, [pc, #212]	; (800236c <main+0x17c>)
 8002296:	f7ff f9b7 	bl	8001608 <KalmanRollPitch_Update>

		  timerACC += SAMPLE_TIME_ACC_MS;
 800229a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800229c:	3319      	adds	r3, #25
 800229e:	667b      	str	r3, [r7, #100]	; 0x64

	  }

	  /* Gyro measurements and Kalman prediction */

	  if ((HAL_GetTick() - timerGYR) >= SAMPLE_TIME_GYR_MS) {
 80022a0:	f000 fbf4 	bl	8002a8c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	d90b      	bls.n	80022c6 <main+0xd6>

		  BMI088_ReadGyr(&imu);
 80022ae:	482a      	ldr	r0, [pc, #168]	; (8002358 <main+0x168>)
 80022b0:	f7fe ff6e 	bl	8001190 <BMI088_ReadGyr>

		  KalmanRollPitch_Predict(&ekf, imu.gyr, 0.001f * SAMPLE_TIME_GYR_MS);
 80022b4:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800237c <main+0x18c>
 80022b8:	492f      	ldr	r1, [pc, #188]	; (8002378 <main+0x188>)
 80022ba:	482c      	ldr	r0, [pc, #176]	; (800236c <main+0x17c>)
 80022bc:	f7ff f804 	bl	80012c8 <KalmanRollPitch_Predict>

		  timerGYR += SAMPLE_TIME_GYR_MS;
 80022c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c2:	330a      	adds	r3, #10
 80022c4:	663b      	str	r3, [r7, #96]	; 0x60

	  }

	  /* COM port stream */

	  if ((HAL_GetTick() - timerCOM) >= SAMPLE_TIME_COM_MS) {
 80022c6:	f000 fbe1 	bl	8002a8c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2bc7      	cmp	r3, #199	; 0xc7
 80022d2:	d92b      	bls.n	800232c <main+0x13c>

		  uint8_t buf[64];

		  sprintf(buf, "%f,%f\r\n", ekf.phi * RAD_TO_DEG, ekf.theta * RAD_TO_DEG);
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <main+0x17c>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002380 <main+0x190>
 80022de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f92f 	bl	8000548 <__aeabi_f2d>
 80022ea:	4605      	mov	r5, r0
 80022ec:	460e      	mov	r6, r1
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <main+0x17c>)
 80022f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002380 <main+0x190>
 80022f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fc:	ee17 0a90 	vmov	r0, s15
 8002300:	f7fe f922 	bl	8000548 <__aeabi_f2d>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	1d38      	adds	r0, r7, #4
 800230a:	e9cd 3400 	strd	r3, r4, [sp]
 800230e:	462a      	mov	r2, r5
 8002310:	4633      	mov	r3, r6
 8002312:	491c      	ldr	r1, [pc, #112]	; (8002384 <main+0x194>)
 8002314:	f008 f9f4 	bl	800a700 <siprintf>

		  HAL_UART_Transmit(&huart3, buf, sizeof(buf), HAL_MAX_DELAY);
 8002318:	1d39      	adds	r1, r7, #4
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	4819      	ldr	r0, [pc, #100]	; (8002388 <main+0x198>)
 8002322:	f003 fc6e 	bl	8005c02 <HAL_UART_Transmit>

		  timerCOM += SAMPLE_TIME_COM_MS;
 8002326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002328:	33c8      	adds	r3, #200	; 0xc8
 800232a:	65fb      	str	r3, [r7, #92]	; 0x5c

	  }

	  /* Status LED */

	  if ((HAL_GetTick() - timerLED) >= SAMPLE_TIME_LED_MS) {
 800232c:	f000 fbae 	bl	8002a8c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800233a:	d39d      	bcc.n	8002278 <main+0x88>

		  HAL_GPIO_TogglePin(GPIOB, LED_B_Pin);
 800233c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <main+0x16c>)
 8002342:	f000 fe96 	bl	8003072 <HAL_GPIO_TogglePin>

		  timerLED += SAMPLE_TIME_LED_MS;
 8002346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002348:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800234c:	65bb      	str	r3, [r7, #88]	; 0x58
	  if ((HAL_GetTick() - timerACC) >= SAMPLE_TIME_ACC_MS) {
 800234e:	e793      	b.n	8002278 <main+0x88>
 8002350:	40020000 	.word	0x40020000
 8002354:	200003e8 	.word	0x200003e8
 8002358:	2000037c 	.word	0x2000037c
 800235c:	40020400 	.word	0x40020400
 8002360:	0800ca90 	.word	0x0800ca90
 8002364:	0800ca98 	.word	0x0800ca98
 8002368:	3dcccccd 	.word	0x3dcccccd
 800236c:	2000047c 	.word	0x2000047c
 8002370:	00000000 	.word	0x00000000
 8002374:	20000390 	.word	0x20000390
 8002378:	2000039c 	.word	0x2000039c
 800237c:	3c23d70b 	.word	0x3c23d70b
 8002380:	42652ee1 	.word	0x42652ee1
 8002384:	0800ca88 	.word	0x0800ca88
 8002388:	200003a8 	.word	0x200003a8

0800238c <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b094      	sub	sp, #80	; 0x50
 8002390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	2230      	movs	r2, #48	; 0x30
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f007 fc94 	bl	8009cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <SystemClock_Config+0xcc>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <SystemClock_Config+0xcc>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	6413      	str	r3, [r2, #64]	; 0x40
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <SystemClock_Config+0xcc>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <SystemClock_Config+0xd0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <SystemClock_Config+0xd0>)
 80023d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <SystemClock_Config+0xd0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f2:	2302      	movs	r3, #2
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023fc:	2319      	movs	r3, #25
 80023fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002400:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002406:	2302      	movs	r3, #2
 8002408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800240a:	2307      	movs	r3, #7
 800240c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240e:	f107 0320 	add.w	r3, r7, #32
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ff6c 	bl	80052f0 <HAL_RCC_OscConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800241e:	f000 f935 	bl	800268c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002422:	230f      	movs	r3, #15
 8002424:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002426:	2302      	movs	r3, #2
 8002428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800242e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002432:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2105      	movs	r1, #5
 8002440:	4618      	mov	r0, r3
 8002442:	f003 f9c5 	bl	80057d0 <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800244c:	f000 f91e 	bl	800268c <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	; 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000

08002460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <MX_I2C1_Init+0x54>)
 8002468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_I2C1_Init+0x50>)
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <MX_I2C1_Init+0x58>)
 800246e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_I2C1_Init+0x50>)
 800247e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_I2C1_Init+0x50>)
 800249e:	f000 fe03 	bl	80030a8 <HAL_I2C_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024a8:	f000 f8f0 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200003e8 	.word	0x200003e8
 80024b4:	40005400 	.word	0x40005400
 80024b8:	000186a0 	.word	0x000186a0

080024bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <MX_USART1_UART_Init+0x50>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024f4:	f003 fb38 	bl	8005b68 <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024fe:	f000 f8c5 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000043c 	.word	0x2000043c
 800250c:	40011000 	.word	0x40011000

08002510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <MX_USART3_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_USART3_UART_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_USART3_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_USART3_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002548:	f003 fb0e 	bl	8005b68 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002552:	f000 f89b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200003a8 	.word	0x200003a8
 8002560:	40004800 	.word	0x40004800

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <MX_GPIO_Init+0x114>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a3d      	ldr	r2, [pc, #244]	; (8002678 <MX_GPIO_Init+0x114>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <MX_GPIO_Init+0x114>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <MX_GPIO_Init+0x114>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a36      	ldr	r2, [pc, #216]	; (8002678 <MX_GPIO_Init+0x114>)
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <MX_GPIO_Init+0x114>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <MX_GPIO_Init+0x114>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a2f      	ldr	r2, [pc, #188]	; (8002678 <MX_GPIO_Init+0x114>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <MX_GPIO_Init+0x114>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <MX_GPIO_Init+0x114>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a28      	ldr	r2, [pc, #160]	; (8002678 <MX_GPIO_Init+0x114>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <MX_GPIO_Init+0x114>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPS_LNA_EN_Pin|GPS_NRST_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80025f0:	4822      	ldr	r0, [pc, #136]	; (800267c <MX_GPIO_Init+0x118>)
 80025f2:	f000 fd25 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80025fc:	4820      	ldr	r0, [pc, #128]	; (8002680 <MX_GPIO_Init+0x11c>)
 80025fe:	f000 fd1f 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_LNA_EN_Pin GPS_NRST_Pin */
  GPIO_InitStruct.Pin = GPS_LNA_EN_Pin|GPS_NRST_Pin;
 8002602:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4818      	ldr	r0, [pc, #96]	; (800267c <MX_GPIO_Init+0x118>)
 800261c:	f000 fb76 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin INT_MAG_Pin BAR_RESET_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin|INT_MAG_Pin|BAR_RESET_Pin;
 8002620:	23f0      	movs	r3, #240	; 0xf0
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <MX_GPIO_Init+0x120>)
 8002626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	4815      	ldr	r0, [pc, #84]	; (8002688 <MX_GPIO_Init+0x124>)
 8002634:	f000 fb6a 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin;
 8002638:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800263c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	480b      	ldr	r0, [pc, #44]	; (8002680 <MX_GPIO_Init+0x11c>)
 8002652:	f000 fb5b 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8002656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_GPIO_Init+0x120>)
 800265e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4619      	mov	r1, r3
 800266a:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_GPIO_Init+0x118>)
 800266c:	f000 fb4e 	bl	8002d0c <HAL_GPIO_Init>

}
 8002670:	bf00      	nop
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	40020800 	.word	0x40020800
 8002680:	40020400 	.word	0x40020400
 8002684:	10110000 	.word	0x10110000
 8002688:	40020000 	.word	0x40020000

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_MspInit+0x4c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_MspInit+0x4c>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_MspInit+0x4c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_MspInit+0x4c>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_I2C_MspInit+0x84>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d12c      	bne.n	8002768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_I2C_MspInit+0x88>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_I2C_MspInit+0x88>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_I2C_MspInit+0x88>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800272a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002730:	2312      	movs	r3, #18
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002734:	2301      	movs	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800273c:	2304      	movs	r3, #4
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	480c      	ldr	r0, [pc, #48]	; (8002778 <HAL_I2C_MspInit+0x8c>)
 8002748:	f000 fae0 	bl	8002d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_I2C_MspInit+0x88>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_I2C_MspInit+0x88>)
 8002756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800275a:	6413      	str	r3, [r2, #64]	; 0x40
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_I2C_MspInit+0x88>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40005400 	.word	0x40005400
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400

0800277c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a32      	ldr	r2, [pc, #200]	; (8002864 <HAL_UART_MspInit+0xe8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12c      	bne.n	80027f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a30      	ldr	r2, [pc, #192]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e6:	2307      	movs	r3, #7
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	481e      	ldr	r0, [pc, #120]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027f2:	f000 fa8b 	bl	8002d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f6:	e031      	b.n	800285c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_UART_MspInit+0xf4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12c      	bne.n	800285c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_UART_MspInit+0xec>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_UART_MspInit+0xec>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_UART_MspInit+0xec>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_UART_MspInit+0xec>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_UART_MspInit+0xec>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_UART_MspInit+0xec>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800283a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800284c:	2307      	movs	r3, #7
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4807      	ldr	r0, [pc, #28]	; (8002874 <HAL_UART_MspInit+0xf8>)
 8002858:	f000 fa58 	bl	8002d0c <HAL_GPIO_Init>
}
 800285c:	bf00      	nop
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40011000 	.word	0x40011000
 8002868:	40023800 	.word	0x40023800
 800286c:	40020400 	.word	0x40020400
 8002870:	40004800 	.word	0x40004800
 8002874:	40020800 	.word	0x40020800

08002878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <HardFault_Handler+0x4>

0800288c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <MemManage_Handler+0x4>

08002892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler+0x4>

0800289e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028cc:	f000 f8ca 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <OTG_FS_IRQHandler+0x10>)
 80028da:	f001 fcd6 	bl	800428a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000197c 	.word	0x2000197c

080028e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_sbrk+0x50>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x16>
		heap_end = &end;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <_sbrk+0x50>)
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <_sbrk+0x54>)
 80028fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <_sbrk+0x50>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <_sbrk+0x50>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	466a      	mov	r2, sp
 800290e:	4293      	cmp	r3, r2
 8002910:	d907      	bls.n	8002922 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002912:	f007 f99f 	bl	8009c54 <__errno>
 8002916:	4602      	mov	r2, r0
 8002918:	230c      	movs	r3, #12
 800291a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	e006      	b.n	8002930 <_sbrk+0x48>
	}

	heap_end += incr;
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <_sbrk+0x50>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <_sbrk+0x50>)
 800292c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000036c 	.word	0x2000036c
 800293c:	20001d88 	.word	0x20001d88

08002940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <SystemInit+0x28>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <SystemInit+0x28>)
 800294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <SystemInit+0x28>)
 8002956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800295a:	609a      	str	r2, [r3, #8]
#endif
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800296c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002970:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002972:	e003      	b.n	800297c <LoopCopyDataInit>

08002974 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002976:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002978:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800297a:	3104      	adds	r1, #4

0800297c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800297c:	480b      	ldr	r0, [pc, #44]	; (80029ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002980:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002982:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002984:	d3f6      	bcc.n	8002974 <CopyDataInit>
  ldr  r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002988:	e002      	b.n	8002990 <LoopFillZerobss>

0800298a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800298a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800298c:	f842 3b04 	str.w	r3, [r2], #4

08002990 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002992:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002994:	d3f9      	bcc.n	800298a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002996:	f7ff ffd3 	bl	8002940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f007 f961 	bl	8009c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299e:	f7ff fc27 	bl	80021f0 <main>
  bx  lr    
 80029a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029a8:	0800d140 	.word	0x0800d140
  ldr  r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029b0:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 80029b4:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80029b8:	20001d88 	.word	0x20001d88

080029bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC_IRQHandler>
	...

080029c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_Init+0x40>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_Init+0x40>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_Init+0x40>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 f94d 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7ff fe52 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f965 	bl	8002cf2 <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 f92d 	bl	8002c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000004 	.word	0x20000004

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x20>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x24>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_IncTick+0x24>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000008 	.word	0x20000008
 8002a88:	200004a8 	.word	0x200004a8

08002a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_GetTick+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	200004a8 	.word	0x200004a8

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_Delay+0x40>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff3e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff31 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e16b      	b.n	8003000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f040 815a 	bne.w	8002ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00b      	beq.n	8002d66 <HAL_GPIO_Init+0x5a>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d5a:	2b11      	cmp	r3, #17
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0xfc>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d123      	bne.n	8002e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3208      	adds	r2, #8
 8002e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	08da      	lsrs	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3208      	adds	r2, #8
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0203 	and.w	r2, r3, #3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80b4 	beq.w	8002ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_GPIO_Init+0x308>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	; (8003014 <HAL_GPIO_Init+0x308>)
 8002e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <HAL_GPIO_Init+0x308>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eae:	4a5a      	ldr	r2, [pc, #360]	; (8003018 <HAL_GPIO_Init+0x30c>)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_GPIO_Init+0x310>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02b      	beq.n	8002f32 <HAL_GPIO_Init+0x226>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_GPIO_Init+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d025      	beq.n	8002f2e <HAL_GPIO_Init+0x222>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_GPIO_Init+0x318>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <HAL_GPIO_Init+0x21e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_GPIO_Init+0x31c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_GPIO_Init+0x21a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4d      	ldr	r2, [pc, #308]	; (800302c <HAL_GPIO_Init+0x320>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0x216>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4c      	ldr	r2, [pc, #304]	; (8003030 <HAL_GPIO_Init+0x324>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_Init+0x212>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4b      	ldr	r2, [pc, #300]	; (8003034 <HAL_GPIO_Init+0x328>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_Init+0x20e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4a      	ldr	r2, [pc, #296]	; (8003038 <HAL_GPIO_Init+0x32c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_Init+0x20a>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e00e      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f16:	2308      	movs	r3, #8
 8002f18:	e00c      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00a      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x228>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4934      	ldr	r1, [pc, #208]	; (8003018 <HAL_GPIO_Init+0x30c>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_GPIO_Init+0x330>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f76:	4a31      	ldr	r2, [pc, #196]	; (800303c <HAL_GPIO_Init+0x330>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_GPIO_Init+0x330>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa0:	4a26      	ldr	r2, [pc, #152]	; (800303c <HAL_GPIO_Init+0x330>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_GPIO_Init+0x330>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fca:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_GPIO_Init+0x330>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_GPIO_Init+0x330>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_GPIO_Init+0x330>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f ae90 	bls.w	8002d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	3724      	adds	r7, #36	; 0x24
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40021c00 	.word	0x40021c00
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	401a      	ands	r2, r3
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	429a      	cmp	r2, r3
 800308a:	d104      	bne.n	8003096 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	041a      	lsls	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003094:	e002      	b.n	800309c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e11f      	b.n	80032fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fb0c 	bl	80026ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800310c:	f002 fd04 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8003110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a7b      	ldr	r2, [pc, #492]	; (8003304 <HAL_I2C_Init+0x25c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d807      	bhi.n	800312c <HAL_I2C_Init+0x84>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a7a      	ldr	r2, [pc, #488]	; (8003308 <HAL_I2C_Init+0x260>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e006      	b.n	800313a <HAL_I2C_Init+0x92>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a77      	ldr	r2, [pc, #476]	; (800330c <HAL_I2C_Init+0x264>)
 8003130:	4293      	cmp	r3, r2
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0db      	b.n	80032fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a72      	ldr	r2, [pc, #456]	; (8003310 <HAL_I2C_Init+0x268>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0c9b      	lsrs	r3, r3, #18
 800314c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a64      	ldr	r2, [pc, #400]	; (8003304 <HAL_I2C_Init+0x25c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d802      	bhi.n	800317c <HAL_I2C_Init+0xd4>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	e009      	b.n	8003190 <HAL_I2C_Init+0xe8>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_I2C_Init+0x26c>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	3301      	adds	r3, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4956      	ldr	r1, [pc, #344]	; (8003304 <HAL_I2C_Init+0x25c>)
 80031ac:	428b      	cmp	r3, r1
 80031ae:	d80d      	bhi.n	80031cc <HAL_I2C_Init+0x124>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e59      	subs	r1, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	bf38      	it	cc
 80031c8:	2304      	movcc	r3, #4
 80031ca:	e04f      	b.n	800326c <HAL_I2C_Init+0x1c4>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <HAL_I2C_Init+0x150>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e012      	b.n	800321e <HAL_I2C_Init+0x176>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x17e>
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_I2C_Init+0x1c4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10e      	bne.n	800324c <HAL_I2C_Init+0x1a4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e58      	subs	r0, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	440b      	add	r3, r1
 800323c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324a:	e00f      	b.n	800326c <HAL_I2C_Init+0x1c4>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	0099      	lsls	r1, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	6809      	ldr	r1, [r1, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6911      	ldr	r1, [r2, #16]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	000186a0 	.word	0x000186a0
 8003308:	001e847f 	.word	0x001e847f
 800330c:	003d08ff 	.word	0x003d08ff
 8003310:	431bde83 	.word	0x431bde83
 8003314:	10624dd3 	.word	0x10624dd3

08003318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	460b      	mov	r3, r1
 8003326:	817b      	strh	r3, [r7, #10]
 8003328:	4613      	mov	r3, r2
 800332a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff fbae 	bl	8002a8c <HAL_GetTick>
 8003330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	f040 80e0 	bne.w	8003500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2319      	movs	r3, #25
 8003346:	2201      	movs	r2, #1
 8003348:	4970      	ldr	r1, [pc, #448]	; (800350c <HAL_I2C_Master_Transmit+0x1f4>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fc70 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
 8003358:	e0d3      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_I2C_Master_Transmit+0x50>
 8003364:	2302      	movs	r3, #2
 8003366:	e0cc      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d007      	beq.n	800338e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2221      	movs	r2, #33	; 0x21
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2210      	movs	r2, #16
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	893a      	ldrh	r2, [r7, #8]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a50      	ldr	r2, [pc, #320]	; (8003510 <HAL_I2C_Master_Transmit+0x1f8>)
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d0:	8979      	ldrh	r1, [r7, #10]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fac2 	bl	8003960 <I2C_MasterRequestWrite>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e08d      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033fc:	e066      	b.n	80034cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fcea 	bl	8003ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06b      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d11b      	bne.n	80034a0 <HAL_I2C_Master_Transmit+0x188>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d017      	beq.n	80034a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fcda 	bl	8003e5e <I2C_WaitOnBTFFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e01a      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d194      	bne.n	80033fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	00100002 	.word	0x00100002
 8003510:	ffff0000 	.word	0xffff0000

08003514 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352e:	f7ff faad 	bl	8002a8c <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	f040 8208 	bne.w	8003952 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2319      	movs	r3, #25
 8003548:	2201      	movs	r2, #1
 800354a:	497b      	ldr	r1, [pc, #492]	; (8003738 <HAL_I2C_Mem_Read+0x224>)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fb6f 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
 800355a:	e1fb      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_I2C_Mem_Read+0x56>
 8003566:	2302      	movs	r3, #2
 8003568:	e1f4      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d007      	beq.n	8003590 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2222      	movs	r2, #34	; 0x22
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a5b      	ldr	r2, [pc, #364]	; (800373c <HAL_I2C_Mem_Read+0x228>)
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d2:	88f8      	ldrh	r0, [r7, #6]
 80035d4:	893a      	ldrh	r2, [r7, #8]
 80035d6:	8979      	ldrh	r1, [r7, #10]
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4603      	mov	r3, r0
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fa3e 	bl	8003a64 <I2C_RequestMemoryRead>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1b0      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d113      	bne.n	8003622 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e184      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b01      	cmp	r3, #1
 8003628:	d11b      	bne.n	8003662 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e164      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	2b02      	cmp	r3, #2
 8003668:	d11b      	bne.n	80036a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003678:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	e144      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036b8:	e138      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	2b03      	cmp	r3, #3
 80036c0:	f200 80f1 	bhi.w	80038a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d123      	bne.n	8003714 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fc05 	bl	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e139      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003712:	e10b      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b02      	cmp	r3, #2
 800371a:	d14e      	bne.n	80037ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	2200      	movs	r2, #0
 8003724:	4906      	ldr	r1, [pc, #24]	; (8003740 <HAL_I2C_Mem_Read+0x22c>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa82 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e10e      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
 8003736:	bf00      	nop
 8003738:	00100002 	.word	0x00100002
 800373c:	ffff0000 	.word	0xffff0000
 8003740:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b8:	e0b8      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	2200      	movs	r2, #0
 80037c2:	4966      	ldr	r1, [pc, #408]	; (800395c <HAL_I2C_Mem_Read+0x448>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fa33 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0bf      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	2200      	movs	r2, #0
 800381e:	494f      	ldr	r1, [pc, #316]	; (800395c <HAL_I2C_Mem_Read+0x448>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa05 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e091      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a4:	e042      	b.n	800392c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fb18 	bl	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e04c      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d118      	bne.n	800392c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	2b00      	cmp	r3, #0
 8003932:	f47f aec2 	bne.w	80036ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	00010004 	.word	0x00010004

08003960 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	460b      	mov	r3, r1
 800396e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d006      	beq.n	800398a <I2C_MasterRequestWrite+0x2a>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d003      	beq.n	800398a <I2C_MasterRequestWrite+0x2a>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003988:	d108      	bne.n	800399c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e00b      	b.n	80039b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	2b12      	cmp	r3, #18
 80039a2:	d107      	bne.n	80039b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f935 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00c      	beq.n	80039e6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e035      	b.n	8003a52 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ee:	d108      	bne.n	8003a02 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fe:	611a      	str	r2, [r3, #16]
 8003a00:	e01b      	b.n	8003a3a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a02:	897b      	ldrh	r3, [r7, #10]
 8003a04:	11db      	asrs	r3, r3, #7
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0306 	and.w	r3, r3, #6
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f063 030f 	orn	r3, r3, #15
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	490f      	ldr	r1, [pc, #60]	; (8003a5c <I2C_MasterRequestWrite+0xfc>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f95c 	bl	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e010      	b.n	8003a52 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a30:	897b      	ldrh	r3, [r7, #10]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <I2C_MasterRequestWrite+0x100>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f94c 	bl	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	00010008 	.word	0x00010008
 8003a60:	00010002 	.word	0x00010002

08003a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	4608      	mov	r0, r1
 8003a6e:	4611      	mov	r1, r2
 8003a70:	461a      	mov	r2, r3
 8003a72:	4603      	mov	r3, r0
 8003a74:	817b      	strh	r3, [r7, #10]
 8003a76:	460b      	mov	r3, r1
 8003a78:	813b      	strh	r3, [r7, #8]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f8c0 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0a9      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ade:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	6a3a      	ldr	r2, [r7, #32]
 8003ae4:	4951      	ldr	r1, [pc, #324]	; (8003c2c <I2C_RequestMemoryRead+0x1c8>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8f9 	bl	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e096      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	6a39      	ldr	r1, [r7, #32]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f963 	bl	8003ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e075      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b3e:	893b      	ldrh	r3, [r7, #8]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
 8003b48:	e021      	b.n	8003b8e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b4a:	893b      	ldrh	r3, [r7, #8]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	6a39      	ldr	r1, [r7, #32]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f93d 	bl	8003ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d107      	bne.n	8003b80 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04f      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b84:	893b      	ldrh	r3, [r7, #8]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	6a39      	ldr	r1, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f922 	bl	8003ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d107      	bne.n	8003bb6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e034      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f82a 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e013      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bfc:	897b      	ldrh	r3, [r7, #10]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	6a3a      	ldr	r2, [r7, #32]
 8003c10:	4906      	ldr	r1, [pc, #24]	; (8003c2c <I2C_RequestMemoryRead+0x1c8>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f863 	bl	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	00010002 	.word	0x00010002

08003c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c40:	e025      	b.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d021      	beq.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe ff1f 	bl	8002a8c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d116      	bne.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e023      	b.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10d      	bne.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	e00c      	b.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d0b6      	beq.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cec:	e051      	b.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfc:	d123      	bne.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0204 	orr.w	r2, r3, #4
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e046      	b.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d021      	beq.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fe9d 	bl	8002a8c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e020      	b.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10c      	bne.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e00b      	b.n	8003dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d18d      	bne.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de8:	e02d      	b.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f8ce 	bl	8003f8c <I2C_IsAcknowledgeFailed>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e02d      	b.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d021      	beq.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fe fe43 	bl	8002a8c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e007      	b.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d1ca      	bne.n	8003dea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e6a:	e02d      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f88d 	bl	8003f8c <I2C_IsAcknowledgeFailed>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e02d      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d021      	beq.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e84:	f7fe fe02 	bl	8002a8c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d116      	bne.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e007      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d1ca      	bne.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eec:	e042      	b.n	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d119      	bne.n	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e029      	b.n	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7fe fdac 	bl	8002a8c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d116      	bne.n	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	d1b5      	bne.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d11b      	bne.n	8003fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f043 0204 	orr.w	r2, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fec:	b08f      	sub	sp, #60	; 0x3c
 8003fee:	af0a      	add	r7, sp, #40	; 0x28
 8003ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e10f      	b.n	800421c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f005 fb20 	bl	800965c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2203      	movs	r2, #3
 8004020:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f002 fb55 	bl	80066ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	687e      	ldr	r6, [r7, #4]
 8004048:	466d      	mov	r5, sp
 800404a:	f106 0410 	add.w	r4, r6, #16
 800404e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405a:	e885 0003 	stmia.w	r5, {r0, r1}
 800405e:	1d33      	adds	r3, r6, #4
 8004060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004062:	6838      	ldr	r0, [r7, #0]
 8004064:	f002 fa2c 	bl	80064c0 <USB_CoreInit>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0d0      	b.n	800421c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f002 fb43 	bl	800670c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	e04a      	b.n	8004122 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	333d      	adds	r3, #61	; 0x3d
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	333c      	adds	r3, #60	; 0x3c
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	b298      	uxth	r0, r3
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3342      	adds	r3, #66	; 0x42
 80040c8:	4602      	mov	r2, r0
 80040ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	333f      	adds	r3, #63	; 0x3f
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3344      	adds	r3, #68	; 0x44
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3348      	adds	r3, #72	; 0x48
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3350      	adds	r3, #80	; 0x50
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	3301      	adds	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d3af      	bcc.n	800408c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	e044      	b.n	80041bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004148:	7bfa      	ldrb	r2, [r7, #15]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	3301      	adds	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d3b5      	bcc.n	8004132 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	687e      	ldr	r6, [r7, #4]
 80041ce:	466d      	mov	r5, sp
 80041d0:	f106 0410 	add.w	r4, r6, #16
 80041d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80041e4:	1d33      	adds	r3, r6, #4
 80041e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e8:	6838      	ldr	r0, [r7, #0]
 80041ea:	f002 fab9 	bl	8006760 <USB_DevInit>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e00d      	b.n	800421c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 faf8 	bl	800780a <USB_DevDisconnect>

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004224 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_Start+0x1c>
 800423c:	2302      	movs	r3, #2
 800423e:	e020      	b.n	8004282 <HAL_PCD_Start+0x5e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	2b01      	cmp	r3, #1
 800424e:	d109      	bne.n	8004264 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004254:	2b01      	cmp	r3, #1
 8004256:	d005      	beq.n	8004264 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f003 fab6 	bl	80077da <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f002 fa28 	bl	80066c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800428a:	b590      	push	{r4, r7, lr}
 800428c:	b08d      	sub	sp, #52	; 0x34
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 fb5d 	bl	8007960 <USB_GetMode>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f040 839d 	bne.w	80049e8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 fac1 	bl	800783a <USB_ReadInterrupts>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8393 	beq.w	80049e6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f003 fab8 	bl	800783a <USB_ReadInterrupts>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d107      	bne.n	80042e4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f002 0202 	and.w	r2, r2, #2
 80042e2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 faa6 	bl	800783a <USB_ReadInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d161      	bne.n	80043bc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0210 	bic.w	r2, r2, #16
 8004306:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	0c5b      	lsrs	r3, r3, #17
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2b02      	cmp	r3, #2
 8004332:	d124      	bne.n	800437e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d035      	beq.n	80043ac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800434a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6a38      	ldr	r0, [r7, #32]
 8004354:	f003 f91e 	bl	8007594 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004364:	441a      	add	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004376:	441a      	add	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	619a      	str	r2, [r3, #24]
 800437c:	e016      	b.n	80043ac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	0c5b      	lsrs	r3, r3, #17
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	2b06      	cmp	r3, #6
 8004388:	d110      	bne.n	80043ac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004390:	2208      	movs	r2, #8
 8004392:	4619      	mov	r1, r3
 8004394:	6a38      	ldr	r0, [r7, #32]
 8004396:	f003 f8fd 	bl	8007594 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043a6:	441a      	add	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0210 	orr.w	r2, r2, #16
 80043ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 fa3a 	bl	800783a <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043d0:	d16e      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 fa40 	bl	8007860 <USB_ReadDevAllOutEpInterrupt>
 80043e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80043e2:	e062      	b.n	80044aa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d057      	beq.n	800449e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f003 fa65 	bl	80078c8 <USB_ReadDevOutEPInterrupt>
 80043fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00c      	beq.n	8004424 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	461a      	mov	r2, r3
 8004418:	2301      	movs	r3, #1
 800441a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800441c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fdb0 	bl	8004f84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	2308      	movs	r3, #8
 800443e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 feaa 	bl	800519c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	461a      	mov	r2, r3
 8004460:	2310      	movs	r3, #16
 8004462:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	461a      	mov	r2, r3
 800447c:	2320      	movs	r3, #32
 800447e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800449c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	3301      	adds	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d199      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f003 f9c0 	bl	800783a <USB_ReadInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044c4:	f040 80c0 	bne.w	8004648 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f003 f9e1 	bl	8007894 <USB_ReadDevAllInEpInterrupt>
 80044d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80044d8:	e0b2      	b.n	8004640 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80a7 	beq.w	8004634 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f003 fa07 	bl	8007904 <USB_ReadDevInEPInterrupt>
 80044f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d057      	beq.n	80045b2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	2201      	movs	r2, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43db      	mvns	r3, r3
 800451c:	69f9      	ldr	r1, [r7, #28]
 800451e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004522:	4013      	ands	r3, r2
 8004524:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004532:	461a      	mov	r2, r3
 8004534:	2301      	movs	r3, #1
 8004536:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d132      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3348      	adds	r3, #72	; 0x48
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4403      	add	r3, r0
 8004560:	3344      	adds	r3, #68	; 0x44
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4419      	add	r1, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4403      	add	r3, r0
 8004574:	3348      	adds	r3, #72	; 0x48
 8004576:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x31c>
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	3350      	adds	r3, #80	; 0x50
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d108      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800459e:	461a      	mov	r2, r3
 80045a0:	2101      	movs	r1, #1
 80045a2:	f003 fa0f 	bl	80079c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f005 f8d6 	bl	800975e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	461a      	mov	r2, r3
 80045ca:	2308      	movs	r3, #8
 80045cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	461a      	mov	r2, r3
 80045e6:	2310      	movs	r3, #16
 80045e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	2302      	movs	r3, #2
 8004620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800462c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fc1b 	bl	8004e6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	3301      	adds	r3, #1
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	f47f af49 	bne.w	80044da <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f003 f8f4 	bl	800783a <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800465c:	d122      	bne.n	80046a4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004684:	2100      	movs	r1, #0
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fe26 	bl	80052d8 <HAL_PCDEx_LPM_Callback>
 800468c:	e002      	b.n	8004694 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f005 f8dc 	bl	800984c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80046a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f003 f8c6 	bl	800783a <USB_ReadInterrupts>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b8:	d112      	bne.n	80046e0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f005 f898 	bl	8009800 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f003 f8a8 	bl	800783a <USB_ReadInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	f040 80c7 	bne.w	8004886 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2110      	movs	r1, #16
 8004712:	4618      	mov	r0, r3
 8004714:	f002 f988 	bl	8006a28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471c:	e056      	b.n	80047cc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	461a      	mov	r2, r3
 800472c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004730:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004750:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004770:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	461a      	mov	r2, r3
 8004780:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004784:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	3301      	adds	r3, #1
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3a3      	bcc.n	800471e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004802:	f043 030b 	orr.w	r3, r3, #11
 8004806:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004818:	f043 030b 	orr.w	r3, r3, #11
 800481c:	6453      	str	r3, [r2, #68]	; 0x44
 800481e:	e015      	b.n	800484c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004832:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004836:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004846:	f043 030b 	orr.w	r3, r3, #11
 800484a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800485e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004870:	461a      	mov	r2, r3
 8004872:	f003 f8a7 	bl	80079c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f002 ffd5 	bl	800783a <USB_ReadInterrupts>
 8004890:	4603      	mov	r3, r0
 8004892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	d124      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f003 f86b 	bl	800797c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 f91d 	bl	8006aea <USB_GetDevSpeed>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681c      	ldr	r4, [r3, #0]
 80048bc:	f001 f920 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 80048c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	4620      	mov	r0, r4
 80048cc:	f001 fe5a 	bl	8006584 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f004 ff6c 	bl	80097ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f002 ffa5 	bl	800783a <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d10a      	bne.n	8004910 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f004 ff49 	bl	8009792 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f002 0208 	and.w	r2, r2, #8
 800490e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f002 ff90 	bl	800783a <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004924:	d10f      	bne.n	8004946 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	b2db      	uxtb	r3, r3
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f004 ffab 	bl	800988c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f002 ff75 	bl	800783a <USB_ReadInterrupts>
 8004950:	4603      	mov	r3, r0
 8004952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495a:	d10f      	bne.n	800497c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f004 ff7e 	bl	8009868 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800497a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f002 ff5a 	bl	800783a <USB_ReadInterrupts>
 8004986:	4603      	mov	r3, r0
 8004988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d10a      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f004 ff8c 	bl	80098b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80049a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f002 ff44 	bl	800783a <USB_ReadInterrupts>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d115      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f004 ff7c 	bl	80098cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	e000      	b.n	80049e8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80049e6:	bf00      	nop
    }
  }
}
 80049e8:	3734      	adds	r7, #52	; 0x34
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}

080049ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_SetAddress+0x1a>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e013      	b.n	8004a30 <HAL_PCD_SetAddress+0x42>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f002 feb4 	bl	800778e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	70fb      	strb	r3, [r7, #3]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	803b      	strh	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da0f      	bge.n	8004a7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	3338      	adds	r3, #56	; 0x38
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	3304      	adds	r3, #4
 8004a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	705a      	strb	r2, [r3, #1]
 8004a7c:	e00f      	b.n	8004a9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004aaa:	883a      	ldrh	r2, [r7, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	78ba      	ldrb	r2, [r7, #2]
 8004ab4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ac8:	78bb      	ldrb	r3, [r7, #2]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d102      	bne.n	8004ad4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_PCD_EP_Open+0xaa>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e00e      	b.n	8004b00 <HAL_PCD_EP_Open+0xc8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f002 f81f 	bl	8006b34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004afe:	7afb      	ldrb	r3, [r7, #11]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da0f      	bge.n	8004b3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f003 020f 	and.w	r2, r3, #15
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3338      	adds	r3, #56	; 0x38
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	3304      	adds	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	705a      	strb	r2, [r3, #1]
 8004b3a:	e00f      	b.n	8004b5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	3304      	adds	r3, #4
 8004b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_PCD_EP_Close+0x6e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e00e      	b.n	8004b94 <HAL_PCD_EP_Close+0x8c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 f85d 	bl	8006c44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	f002 fb38 	bl	8007284 <USB_EP0StartXfer>
 8004c14:	e008      	b.n	8004c28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	6979      	ldr	r1, [r7, #20]
 8004c24:	f002 f8ea 	bl	8006dfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c54:	681b      	ldr	r3, [r3, #0]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c72:	7afb      	ldrb	r3, [r7, #11]
 8004c74:	f003 020f 	and.w	r2, r3, #15
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	3338      	adds	r3, #56	; 0x38
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	3304      	adds	r3, #4
 8004c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d102      	bne.n	8004cbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	f002 fad6 	bl	8007284 <USB_EP0StartXfer>
 8004cd8:	e008      	b.n	8004cec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	f002 f888 	bl	8006dfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d901      	bls.n	8004d14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e050      	b.n	8004db6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	da0f      	bge.n	8004d3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f003 020f 	and.w	r2, r3, #15
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	3338      	adds	r3, #56	; 0x38
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	3304      	adds	r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	705a      	strb	r2, [r3, #1]
 8004d3a:	e00d      	b.n	8004d58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3304      	adds	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_PCD_EP_SetStall+0x82>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e01e      	b.n	8004db6 <HAL_PCD_EP_SetStall+0xc0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fc2d 	bl	80075e6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	b2d9      	uxtb	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004da6:	461a      	mov	r2, r3
 8004da8:	f002 fe0c 	bl	80079c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d901      	bls.n	8004ddc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e042      	b.n	8004e62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da0f      	bge.n	8004e04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3338      	adds	r3, #56	; 0x38
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	705a      	strb	r2, [r3, #1]
 8004e02:	e00f      	b.n	8004e24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 020f 	and.w	r2, r3, #15
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_EP_ClrStall+0x86>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e00e      	b.n	8004e62 <HAL_PCD_EP_ClrStall+0xa4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 fc35 	bl	80076c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08a      	sub	sp, #40	; 0x28
 8004e6e:	af02      	add	r7, sp, #8
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	3338      	adds	r3, #56	; 0x38
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3304      	adds	r3, #4
 8004e90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d901      	bls.n	8004ea2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06c      	b.n	8004f7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d902      	bls.n	8004ebe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3303      	adds	r3, #3
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec6:	e02b      	b.n	8004f20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d902      	bls.n	8004ee4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3303      	adds	r3, #3
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68d9      	ldr	r1, [r3, #12]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f002 fb11 	bl	800752a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	441a      	add	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d809      	bhi.n	8004f4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d203      	bcs.n	8004f4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1be      	bne.n	8004ec8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d811      	bhi.n	8004f7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	6939      	ldr	r1, [r7, #16]
 8004f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f76:	4013      	ands	r3, r2
 8004f78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	333c      	adds	r3, #60	; 0x3c
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 80a0 	bne.w	80050fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d015      	beq.n	8004ff2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a72      	ldr	r2, [pc, #456]	; (8005194 <PCD_EP_OutXfrComplete_int+0x210>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	f240 80dd 	bls.w	800518a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80d7 	beq.w	800518a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	6093      	str	r3, [r2, #8]
 8004ff0:	e0cb      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	2320      	movs	r3, #32
 800500c:	6093      	str	r3, [r2, #8]
 800500e:	e0bc      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 80b7 	bne.w	800518a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a5d      	ldr	r2, [pc, #372]	; (8005194 <PCD_EP_OutXfrComplete_int+0x210>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d90f      	bls.n	8005044 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	461a      	mov	r2, r3
 800503c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005040:	6093      	str	r3, [r2, #8]
 8005042:	e0a2      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005056:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	0159      	lsls	r1, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	440b      	add	r3, r1
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800506a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4403      	add	r3, r0
 800507a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800507e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4403      	add	r3, r0
 80050a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4419      	add	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d114      	bne.n	80050ee <PCD_EP_OutXfrComplete_int+0x16a>
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050e6:	461a      	mov	r2, r3
 80050e8:	2101      	movs	r1, #1
 80050ea:	f002 fc6b 	bl	80079c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f004 fb17 	bl	8009728 <HAL_PCD_DataOutStageCallback>
 80050fa:	e046      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a26      	ldr	r2, [pc, #152]	; (8005198 <PCD_EP_OutXfrComplete_int+0x214>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d124      	bne.n	800514e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	461a      	mov	r2, r3
 800511c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005120:	6093      	str	r3, [r2, #8]
 8005122:	e032      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	2320      	movs	r3, #32
 800513e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f004 faee 	bl	8009728 <HAL_PCD_DataOutStageCallback>
 800514c:	e01d      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d114      	bne.n	800517e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005176:	461a      	mov	r2, r3
 8005178:	2100      	movs	r1, #0
 800517a:	f002 fc23 	bl	80079c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f004 facf 	bl	8009728 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	4f54300a 	.word	0x4f54300a
 8005198:	4f54310a 	.word	0x4f54310a

0800519c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	333c      	adds	r3, #60	; 0x3c
 80051b4:	3304      	adds	r3, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <PCD_EP_OutSetupPacket_int+0x88>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d90e      	bls.n	80051f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	461a      	mov	r2, r3
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f004 fa87 	bl	8009704 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <PCD_EP_OutSetupPacket_int+0x88>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d90c      	bls.n	8005218 <PCD_EP_OutSetupPacket_int+0x7c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d108      	bne.n	8005218 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005210:	461a      	mov	r2, r3
 8005212:	2101      	movs	r1, #1
 8005214:	f002 fbd6 	bl	80079c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	4f54300a 	.word	0x4f54300a

08005228 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
 8005234:	4613      	mov	r3, r2
 8005236:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005246:	883b      	ldrh	r3, [r7, #0]
 8005248:	0419      	lsls	r1, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	430a      	orrs	r2, r1
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
 8005254:	e028      	b.n	80052a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e00d      	b.n	8005286 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3340      	adds	r3, #64	; 0x40
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	3301      	adds	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	3b01      	subs	r3, #1
 800528c:	429a      	cmp	r2, r3
 800528e:	d3ec      	bcc.n	800526a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005290:	883b      	ldrh	r3, [r7, #0]
 8005292:	0418      	lsls	r0, r3, #16
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	3b01      	subs	r3, #1
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	4302      	orrs	r2, r0
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e25b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d075      	beq.n	80053fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800530e:	4ba3      	ldr	r3, [pc, #652]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00c      	beq.n	8005334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531a:	4ba0      	ldr	r3, [pc, #640]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005322:	2b08      	cmp	r3, #8
 8005324:	d112      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005326:	4b9d      	ldr	r3, [pc, #628]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005332:	d10b      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x108>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d157      	bne.n	80053f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e236      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d106      	bne.n	8005364 <HAL_RCC_OscConfig+0x74>
 8005356:	4b91      	ldr	r3, [pc, #580]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a90      	ldr	r2, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e01d      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x98>
 800536e:	4b8b      	ldr	r3, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a8a      	ldr	r2, [pc, #552]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a87      	ldr	r2, [pc, #540]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005388:	4b84      	ldr	r3, [pc, #528]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd fb70 	bl	8002a8c <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd fb6c 	bl	8002a8c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1fb      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0xc0>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fd fb5c 	bl	8002a8c <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fb58 	bl	8002a8c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1e7      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0xe8>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d063      	beq.n	80054ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b62      	ldr	r3, [pc, #392]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	4b5c      	ldr	r3, [pc, #368]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1bb      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b56      	ldr	r3, [pc, #344]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4952      	ldr	r1, [pc, #328]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	e03a      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005460:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd fb11 	bl	8002a8c <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f7fd fb0d 	bl	8002a8c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e19c      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005480:	4b46      	ldr	r3, [pc, #280]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4940      	ldr	r1, [pc, #256]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd faf0 	bl	8002a8c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b0:	f7fd faec 	bl	8002a8c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e17b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d030      	beq.n	800553c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fd fad0 	bl	8002a8c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fd facc 	bl	8002a8c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e15b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x200>
 800550e:	e015      	b.n	800553c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005516:	f7fd fab9 	bl	8002a8c <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fd fab5 	bl	8002a8c <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e144      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a0 	beq.w	800568a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6413      	str	r3, [r2, #64]	; 0x40
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d121      	bne.n	80055ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005592:	f7fd fa7b 	bl	8002a8c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	e011      	b.n	80055be <HAL_RCC_OscConfig+0x2ce>
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470000 	.word	0x42470000
 80055a4:	42470e80 	.word	0x42470e80
 80055a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ac:	f7fd fa6e 	bl	8002a8c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0fd      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <HAL_RCC_OscConfig+0x4d4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d106      	bne.n	80055e0 <HAL_RCC_OscConfig+0x2f0>
 80055d2:	4b7d      	ldr	r3, [pc, #500]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a7c      	ldr	r2, [pc, #496]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
 80055de:	e01c      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d10c      	bne.n	8005602 <HAL_RCC_OscConfig+0x312>
 80055e8:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a76      	ldr	r2, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a73      	ldr	r2, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005600:	e00b      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 8005602:	4b71      	ldr	r3, [pc, #452]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a70      	ldr	r2, [pc, #448]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	4b6e      	ldr	r3, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a6d      	ldr	r2, [pc, #436]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fd fa33 	bl	8002a8c <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fd fa2f 	bl	8002a8c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e0bc      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCC_OscConfig+0x33a>
 800564c:	e014      	b.n	8005678 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564e:	f7fd fa1d 	bl	8002a8c <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fa19 	bl	8002a8c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0a6      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ee      	bne.n	8005656 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567e:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8092 	beq.w	80057b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d05c      	beq.n	800575a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d141      	bne.n	800572c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	4b48      	ldr	r3, [pc, #288]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fd f9ed 	bl	8002a8c <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b6:	f7fd f9e9 	bl	8002a8c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e078      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c8:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	019b      	lsls	r3, r3, #6
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	3b01      	subs	r3, #1
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	4933      	ldr	r1, [pc, #204]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fd f9c2 	bl	8002a8c <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd f9be 	bl	8002a8c <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e04d      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x41c>
 800572a:	e045      	b.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fd f9ab 	bl	8002a8c <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573a:	f7fd f9a7 	bl	8002a8c <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e036      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x44a>
 8005758:	e02e      	b.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e029      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d11c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d115      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005794:	4293      	cmp	r3, r2
 8005796:	d10d      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40007000 	.word	0x40007000
 80057c8:	40023800 	.word	0x40023800
 80057cc:	42470060 	.word	0x42470060

080057d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0cc      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057e4:	4b68      	ldr	r3, [pc, #416]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d90c      	bls.n	800580c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b65      	ldr	r3, [pc, #404]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0b8      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005824:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a58      	ldr	r2, [pc, #352]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800582e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800583c:	4b53      	ldr	r3, [pc, #332]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a52      	ldr	r2, [pc, #328]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005848:	4b50      	ldr	r3, [pc, #320]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	494d      	ldr	r1, [pc, #308]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d044      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	4b47      	ldr	r3, [pc, #284]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d119      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e07f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d003      	beq.n	800588e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	4b3f      	ldr	r3, [pc, #252]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e06f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e067      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4934      	ldr	r1, [pc, #208]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c0:	f7fd f8e4 	bl	8002a8c <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	e00a      	b.n	80058de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c8:	f7fd f8e0 	bl	8002a8c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e04f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058de:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 020c 	and.w	r2, r3, #12
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d1eb      	bne.n	80058c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058f0:	4b25      	ldr	r3, [pc, #148]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d20c      	bcs.n	8005918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e032      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4916      	ldr	r1, [pc, #88]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005956:	f000 f821 	bl	800599c <HAL_RCC_GetSysClockFreq>
 800595a:	4601      	mov	r1, r0
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <HAL_RCC_ClockConfig+0x1c0>)
 8005968:	5cd3      	ldrb	r3, [r2, r3]
 800596a:	fa21 f303 	lsr.w	r3, r1, r3
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd f844 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40023c00 	.word	0x40023c00
 800598c:	40023800 	.word	0x40023800
 8005990:	0800caec 	.word	0x0800caec
 8005994:	20000000 	.word	0x20000000
 8005998:	20000004 	.word	0x20000004

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b2:	4b50      	ldr	r3, [pc, #320]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d007      	beq.n	80059ce <HAL_RCC_GetSysClockFreq+0x32>
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d008      	beq.n	80059d4 <HAL_RCC_GetSysClockFreq+0x38>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 808d 	bne.w	8005ae2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b4b      	ldr	r3, [pc, #300]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059ca:	60bb      	str	r3, [r7, #8]
       break;
 80059cc:	e08c      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ce:	4b4b      	ldr	r3, [pc, #300]	; (8005afc <HAL_RCC_GetSysClockFreq+0x160>)
 80059d0:	60bb      	str	r3, [r7, #8]
      break;
 80059d2:	e089      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d4:	4b47      	ldr	r3, [pc, #284]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059de:	4b45      	ldr	r3, [pc, #276]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d023      	beq.n	8005a32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ea:	4b42      	ldr	r3, [pc, #264]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	ea03 0501 	and.w	r5, r3, r1
 8005a00:	ea04 0602 	and.w	r6, r4, r2
 8005a04:	4a3d      	ldr	r2, [pc, #244]	; (8005afc <HAL_RCC_GetSysClockFreq+0x160>)
 8005a06:	fb02 f106 	mul.w	r1, r2, r6
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	fb02 f205 	mul.w	r2, r2, r5
 8005a10:	440a      	add	r2, r1
 8005a12:	493a      	ldr	r1, [pc, #232]	; (8005afc <HAL_RCC_GetSysClockFreq+0x160>)
 8005a14:	fba5 0101 	umull	r0, r1, r5, r1
 8005a18:	1853      	adds	r3, r2, r1
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	461a      	mov	r2, r3
 8005a24:	4623      	mov	r3, r4
 8005a26:	f7fb f8bf 	bl	8000ba8 <__aeabi_uldivmod>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e049      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a32:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	ea03 0501 	and.w	r5, r3, r1
 8005a48:	ea04 0602 	and.w	r6, r4, r2
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4632      	mov	r2, r6
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	0154      	lsls	r4, r2, #5
 8005a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a5e:	014b      	lsls	r3, r1, #5
 8005a60:	4619      	mov	r1, r3
 8005a62:	4622      	mov	r2, r4
 8005a64:	1b49      	subs	r1, r1, r5
 8005a66:	eb62 0206 	sbc.w	r2, r2, r6
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	0194      	lsls	r4, r2, #6
 8005a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a78:	018b      	lsls	r3, r1, #6
 8005a7a:	1a5b      	subs	r3, r3, r1
 8005a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	00e2      	lsls	r2, r4, #3
 8005a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a8e:	00d9      	lsls	r1, r3, #3
 8005a90:	460b      	mov	r3, r1
 8005a92:	4614      	mov	r4, r2
 8005a94:	195b      	adds	r3, r3, r5
 8005a96:	eb44 0406 	adc.w	r4, r4, r6
 8005a9a:	f04f 0100 	mov.w	r1, #0
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	02a2      	lsls	r2, r4, #10
 8005aa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005aa8:	0299      	lsls	r1, r3, #10
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f04f 0400 	mov.w	r4, #0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	f7fb f874 	bl	8000ba8 <__aeabi_uldivmod>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	60bb      	str	r3, [r7, #8]
      break;
 8005ae0:	e002      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ae4:	60bb      	str	r3, [r7, #8]
      break;
 8005ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	017d7840 	.word	0x017d7840

08005b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000000 	.word	0x20000000

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4601      	mov	r1, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4a03      	ldr	r2, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5cd3      	ldrb	r3, [r2, r3]
 8005b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800cafc 	.word	0x0800cafc

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b44:	f7ff ffdc 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b48:	4601      	mov	r1, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b56:	5cd3      	ldrb	r3, [r2, r3]
 8005b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	0800cafc 	.word	0x0800cafc

08005b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e03f      	b.n	8005bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fdf4 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f90b 	bl	8005dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b088      	sub	sp, #32
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	f040 8083 	bne.w	8005d2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Transmit+0x2e>
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e07b      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Transmit+0x40>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e074      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2221      	movs	r2, #33	; 0x21
 8005c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c58:	f7fc ff18 	bl	8002a8c <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c72:	e042      	b.n	8005cfa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d122      	bne.n	8005cd2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2200      	movs	r2, #0
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f84c 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e042      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	e017      	b.n	8005cfa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	e013      	b.n	8005cfa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2180      	movs	r1, #128	; 0x80
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f829 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e01f      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	60ba      	str	r2, [r7, #8]
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1b7      	bne.n	8005c74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f810 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e006      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d44:	e02c      	b.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d028      	beq.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d54:	f7fc fe9a 	bl	8002a8c <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d21d      	bcs.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e00f      	b.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d0c3      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e0a:	f023 030c 	bic.w	r3, r3, #12
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	430b      	orrs	r3, r1
 8005e16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e36:	f040 818b 	bne.w	8006150 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4ac1      	ldr	r2, [pc, #772]	; (8006144 <UART_SetConfig+0x37c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d005      	beq.n	8005e50 <UART_SetConfig+0x88>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4abf      	ldr	r2, [pc, #764]	; (8006148 <UART_SetConfig+0x380>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	f040 80bd 	bne.w	8005fca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e50:	f7ff fe76 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8005e54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	461d      	mov	r5, r3
 8005e5a:	f04f 0600 	mov.w	r6, #0
 8005e5e:	46a8      	mov	r8, r5
 8005e60:	46b1      	mov	r9, r6
 8005e62:	eb18 0308 	adds.w	r3, r8, r8
 8005e66:	eb49 0409 	adc.w	r4, r9, r9
 8005e6a:	4698      	mov	r8, r3
 8005e6c:	46a1      	mov	r9, r4
 8005e6e:	eb18 0805 	adds.w	r8, r8, r5
 8005e72:	eb49 0906 	adc.w	r9, r9, r6
 8005e76:	f04f 0100 	mov.w	r1, #0
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e8a:	4688      	mov	r8, r1
 8005e8c:	4691      	mov	r9, r2
 8005e8e:	eb18 0005 	adds.w	r0, r8, r5
 8005e92:	eb49 0106 	adc.w	r1, r9, r6
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	f04f 0600 	mov.w	r6, #0
 8005ea0:	196b      	adds	r3, r5, r5
 8005ea2:	eb46 0406 	adc.w	r4, r6, r6
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	f7fa fe7d 	bl	8000ba8 <__aeabi_uldivmod>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4ba5      	ldr	r3, [pc, #660]	; (800614c <UART_SetConfig+0x384>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	461d      	mov	r5, r3
 8005ec4:	f04f 0600 	mov.w	r6, #0
 8005ec8:	46a9      	mov	r9, r5
 8005eca:	46b2      	mov	sl, r6
 8005ecc:	eb19 0309 	adds.w	r3, r9, r9
 8005ed0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	46a2      	mov	sl, r4
 8005ed8:	eb19 0905 	adds.w	r9, r9, r5
 8005edc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ee0:	f04f 0100 	mov.w	r1, #0
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef4:	4689      	mov	r9, r1
 8005ef6:	4692      	mov	sl, r2
 8005ef8:	eb19 0005 	adds.w	r0, r9, r5
 8005efc:	eb4a 0106 	adc.w	r1, sl, r6
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	461d      	mov	r5, r3
 8005f06:	f04f 0600 	mov.w	r6, #0
 8005f0a:	196b      	adds	r3, r5, r5
 8005f0c:	eb46 0406 	adc.w	r4, r6, r6
 8005f10:	461a      	mov	r2, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	f7fa fe48 	bl	8000ba8 <__aeabi_uldivmod>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b8b      	ldr	r3, [pc, #556]	; (800614c <UART_SetConfig+0x384>)
 8005f20:	fba3 1302 	umull	r1, r3, r3, r2
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	2164      	movs	r1, #100	; 0x64
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	3332      	adds	r3, #50	; 0x32
 8005f32:	4a86      	ldr	r2, [pc, #536]	; (800614c <UART_SetConfig+0x384>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f40:	4498      	add	r8, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	461d      	mov	r5, r3
 8005f46:	f04f 0600 	mov.w	r6, #0
 8005f4a:	46a9      	mov	r9, r5
 8005f4c:	46b2      	mov	sl, r6
 8005f4e:	eb19 0309 	adds.w	r3, r9, r9
 8005f52:	eb4a 040a 	adc.w	r4, sl, sl
 8005f56:	4699      	mov	r9, r3
 8005f58:	46a2      	mov	sl, r4
 8005f5a:	eb19 0905 	adds.w	r9, r9, r5
 8005f5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f62:	f04f 0100 	mov.w	r1, #0
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f76:	4689      	mov	r9, r1
 8005f78:	4692      	mov	sl, r2
 8005f7a:	eb19 0005 	adds.w	r0, r9, r5
 8005f7e:	eb4a 0106 	adc.w	r1, sl, r6
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	461d      	mov	r5, r3
 8005f88:	f04f 0600 	mov.w	r6, #0
 8005f8c:	196b      	adds	r3, r5, r5
 8005f8e:	eb46 0406 	adc.w	r4, r6, r6
 8005f92:	461a      	mov	r2, r3
 8005f94:	4623      	mov	r3, r4
 8005f96:	f7fa fe07 	bl	8000ba8 <__aeabi_uldivmod>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4b6a      	ldr	r3, [pc, #424]	; (800614c <UART_SetConfig+0x384>)
 8005fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2164      	movs	r1, #100	; 0x64
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	3332      	adds	r3, #50	; 0x32
 8005fb4:	4a65      	ldr	r2, [pc, #404]	; (800614c <UART_SetConfig+0x384>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f003 0207 	and.w	r2, r3, #7
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4442      	add	r2, r8
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	e26f      	b.n	80064aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fca:	f7ff fda5 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8005fce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	f04f 0600 	mov.w	r6, #0
 8005fd8:	46a8      	mov	r8, r5
 8005fda:	46b1      	mov	r9, r6
 8005fdc:	eb18 0308 	adds.w	r3, r8, r8
 8005fe0:	eb49 0409 	adc.w	r4, r9, r9
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	46a1      	mov	r9, r4
 8005fe8:	eb18 0805 	adds.w	r8, r8, r5
 8005fec:	eb49 0906 	adc.w	r9, r9, r6
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ffc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006000:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006004:	4688      	mov	r8, r1
 8006006:	4691      	mov	r9, r2
 8006008:	eb18 0005 	adds.w	r0, r8, r5
 800600c:	eb49 0106 	adc.w	r1, r9, r6
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	461d      	mov	r5, r3
 8006016:	f04f 0600 	mov.w	r6, #0
 800601a:	196b      	adds	r3, r5, r5
 800601c:	eb46 0406 	adc.w	r4, r6, r6
 8006020:	461a      	mov	r2, r3
 8006022:	4623      	mov	r3, r4
 8006024:	f7fa fdc0 	bl	8000ba8 <__aeabi_uldivmod>
 8006028:	4603      	mov	r3, r0
 800602a:	460c      	mov	r4, r1
 800602c:	461a      	mov	r2, r3
 800602e:	4b47      	ldr	r3, [pc, #284]	; (800614c <UART_SetConfig+0x384>)
 8006030:	fba3 2302 	umull	r2, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	461d      	mov	r5, r3
 800603e:	f04f 0600 	mov.w	r6, #0
 8006042:	46a9      	mov	r9, r5
 8006044:	46b2      	mov	sl, r6
 8006046:	eb19 0309 	adds.w	r3, r9, r9
 800604a:	eb4a 040a 	adc.w	r4, sl, sl
 800604e:	4699      	mov	r9, r3
 8006050:	46a2      	mov	sl, r4
 8006052:	eb19 0905 	adds.w	r9, r9, r5
 8006056:	eb4a 0a06 	adc.w	sl, sl, r6
 800605a:	f04f 0100 	mov.w	r1, #0
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800606a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800606e:	4689      	mov	r9, r1
 8006070:	4692      	mov	sl, r2
 8006072:	eb19 0005 	adds.w	r0, r9, r5
 8006076:	eb4a 0106 	adc.w	r1, sl, r6
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	461d      	mov	r5, r3
 8006080:	f04f 0600 	mov.w	r6, #0
 8006084:	196b      	adds	r3, r5, r5
 8006086:	eb46 0406 	adc.w	r4, r6, r6
 800608a:	461a      	mov	r2, r3
 800608c:	4623      	mov	r3, r4
 800608e:	f7fa fd8b 	bl	8000ba8 <__aeabi_uldivmod>
 8006092:	4603      	mov	r3, r0
 8006094:	460c      	mov	r4, r1
 8006096:	461a      	mov	r2, r3
 8006098:	4b2c      	ldr	r3, [pc, #176]	; (800614c <UART_SetConfig+0x384>)
 800609a:	fba3 1302 	umull	r1, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	2164      	movs	r1, #100	; 0x64
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	3332      	adds	r3, #50	; 0x32
 80060ac:	4a27      	ldr	r2, [pc, #156]	; (800614c <UART_SetConfig+0x384>)
 80060ae:	fba2 2303 	umull	r2, r3, r2, r3
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060ba:	4498      	add	r8, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	461d      	mov	r5, r3
 80060c0:	f04f 0600 	mov.w	r6, #0
 80060c4:	46a9      	mov	r9, r5
 80060c6:	46b2      	mov	sl, r6
 80060c8:	eb19 0309 	adds.w	r3, r9, r9
 80060cc:	eb4a 040a 	adc.w	r4, sl, sl
 80060d0:	4699      	mov	r9, r3
 80060d2:	46a2      	mov	sl, r4
 80060d4:	eb19 0905 	adds.w	r9, r9, r5
 80060d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f0:	4689      	mov	r9, r1
 80060f2:	4692      	mov	sl, r2
 80060f4:	eb19 0005 	adds.w	r0, r9, r5
 80060f8:	eb4a 0106 	adc.w	r1, sl, r6
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	461d      	mov	r5, r3
 8006102:	f04f 0600 	mov.w	r6, #0
 8006106:	196b      	adds	r3, r5, r5
 8006108:	eb46 0406 	adc.w	r4, r6, r6
 800610c:	461a      	mov	r2, r3
 800610e:	4623      	mov	r3, r4
 8006110:	f7fa fd4a 	bl	8000ba8 <__aeabi_uldivmod>
 8006114:	4603      	mov	r3, r0
 8006116:	460c      	mov	r4, r1
 8006118:	461a      	mov	r2, r3
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <UART_SetConfig+0x384>)
 800611c:	fba3 1302 	umull	r1, r3, r3, r2
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	2164      	movs	r1, #100	; 0x64
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	3332      	adds	r3, #50	; 0x32
 800612e:	4a07      	ldr	r2, [pc, #28]	; (800614c <UART_SetConfig+0x384>)
 8006130:	fba2 2303 	umull	r2, r3, r2, r3
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	f003 0207 	and.w	r2, r3, #7
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4442      	add	r2, r8
 8006140:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006142:	e1b2      	b.n	80064aa <UART_SetConfig+0x6e2>
 8006144:	40011000 	.word	0x40011000
 8006148:	40011400 	.word	0x40011400
 800614c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4ad7      	ldr	r2, [pc, #860]	; (80064b4 <UART_SetConfig+0x6ec>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d005      	beq.n	8006166 <UART_SetConfig+0x39e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4ad6      	ldr	r2, [pc, #856]	; (80064b8 <UART_SetConfig+0x6f0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	f040 80d1 	bne.w	8006308 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006166:	f7ff fceb 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 800616a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	469a      	mov	sl, r3
 8006170:	f04f 0b00 	mov.w	fp, #0
 8006174:	46d0      	mov	r8, sl
 8006176:	46d9      	mov	r9, fp
 8006178:	eb18 0308 	adds.w	r3, r8, r8
 800617c:	eb49 0409 	adc.w	r4, r9, r9
 8006180:	4698      	mov	r8, r3
 8006182:	46a1      	mov	r9, r4
 8006184:	eb18 080a 	adds.w	r8, r8, sl
 8006188:	eb49 090b 	adc.w	r9, r9, fp
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006198:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800619c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061a0:	4688      	mov	r8, r1
 80061a2:	4691      	mov	r9, r2
 80061a4:	eb1a 0508 	adds.w	r5, sl, r8
 80061a8:	eb4b 0609 	adc.w	r6, fp, r9
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4619      	mov	r1, r3
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	f04f 0400 	mov.w	r4, #0
 80061be:	0094      	lsls	r4, r2, #2
 80061c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061c4:	008b      	lsls	r3, r1, #2
 80061c6:	461a      	mov	r2, r3
 80061c8:	4623      	mov	r3, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	4631      	mov	r1, r6
 80061ce:	f7fa fceb 	bl	8000ba8 <__aeabi_uldivmod>
 80061d2:	4603      	mov	r3, r0
 80061d4:	460c      	mov	r4, r1
 80061d6:	461a      	mov	r2, r3
 80061d8:	4bb8      	ldr	r3, [pc, #736]	; (80064bc <UART_SetConfig+0x6f4>)
 80061da:	fba3 2302 	umull	r2, r3, r3, r2
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	469b      	mov	fp, r3
 80061e8:	f04f 0c00 	mov.w	ip, #0
 80061ec:	46d9      	mov	r9, fp
 80061ee:	46e2      	mov	sl, ip
 80061f0:	eb19 0309 	adds.w	r3, r9, r9
 80061f4:	eb4a 040a 	adc.w	r4, sl, sl
 80061f8:	4699      	mov	r9, r3
 80061fa:	46a2      	mov	sl, r4
 80061fc:	eb19 090b 	adds.w	r9, r9, fp
 8006200:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006204:	f04f 0100 	mov.w	r1, #0
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006218:	4689      	mov	r9, r1
 800621a:	4692      	mov	sl, r2
 800621c:	eb1b 0509 	adds.w	r5, fp, r9
 8006220:	eb4c 060a 	adc.w	r6, ip, sl
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	f04f 0400 	mov.w	r4, #0
 8006236:	0094      	lsls	r4, r2, #2
 8006238:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800623c:	008b      	lsls	r3, r1, #2
 800623e:	461a      	mov	r2, r3
 8006240:	4623      	mov	r3, r4
 8006242:	4628      	mov	r0, r5
 8006244:	4631      	mov	r1, r6
 8006246:	f7fa fcaf 	bl	8000ba8 <__aeabi_uldivmod>
 800624a:	4603      	mov	r3, r0
 800624c:	460c      	mov	r4, r1
 800624e:	461a      	mov	r2, r3
 8006250:	4b9a      	ldr	r3, [pc, #616]	; (80064bc <UART_SetConfig+0x6f4>)
 8006252:	fba3 1302 	umull	r1, r3, r3, r2
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	2164      	movs	r1, #100	; 0x64
 800625a:	fb01 f303 	mul.w	r3, r1, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	3332      	adds	r3, #50	; 0x32
 8006264:	4a95      	ldr	r2, [pc, #596]	; (80064bc <UART_SetConfig+0x6f4>)
 8006266:	fba2 2303 	umull	r2, r3, r2, r3
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006270:	4498      	add	r8, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	469b      	mov	fp, r3
 8006276:	f04f 0c00 	mov.w	ip, #0
 800627a:	46d9      	mov	r9, fp
 800627c:	46e2      	mov	sl, ip
 800627e:	eb19 0309 	adds.w	r3, r9, r9
 8006282:	eb4a 040a 	adc.w	r4, sl, sl
 8006286:	4699      	mov	r9, r3
 8006288:	46a2      	mov	sl, r4
 800628a:	eb19 090b 	adds.w	r9, r9, fp
 800628e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006292:	f04f 0100 	mov.w	r1, #0
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800629e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062a6:	4689      	mov	r9, r1
 80062a8:	4692      	mov	sl, r2
 80062aa:	eb1b 0509 	adds.w	r5, fp, r9
 80062ae:	eb4c 060a 	adc.w	r6, ip, sl
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4619      	mov	r1, r3
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	f04f 0400 	mov.w	r4, #0
 80062c4:	0094      	lsls	r4, r2, #2
 80062c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062ca:	008b      	lsls	r3, r1, #2
 80062cc:	461a      	mov	r2, r3
 80062ce:	4623      	mov	r3, r4
 80062d0:	4628      	mov	r0, r5
 80062d2:	4631      	mov	r1, r6
 80062d4:	f7fa fc68 	bl	8000ba8 <__aeabi_uldivmod>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	461a      	mov	r2, r3
 80062de:	4b77      	ldr	r3, [pc, #476]	; (80064bc <UART_SetConfig+0x6f4>)
 80062e0:	fba3 1302 	umull	r1, r3, r3, r2
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	2164      	movs	r1, #100	; 0x64
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	3332      	adds	r3, #50	; 0x32
 80062f2:	4a72      	ldr	r2, [pc, #456]	; (80064bc <UART_SetConfig+0x6f4>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	f003 020f 	and.w	r2, r3, #15
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4442      	add	r2, r8
 8006304:	609a      	str	r2, [r3, #8]
 8006306:	e0d0      	b.n	80064aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006308:	f7ff fc06 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 800630c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	469a      	mov	sl, r3
 8006312:	f04f 0b00 	mov.w	fp, #0
 8006316:	46d0      	mov	r8, sl
 8006318:	46d9      	mov	r9, fp
 800631a:	eb18 0308 	adds.w	r3, r8, r8
 800631e:	eb49 0409 	adc.w	r4, r9, r9
 8006322:	4698      	mov	r8, r3
 8006324:	46a1      	mov	r9, r4
 8006326:	eb18 080a 	adds.w	r8, r8, sl
 800632a:	eb49 090b 	adc.w	r9, r9, fp
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800633a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800633e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006342:	4688      	mov	r8, r1
 8006344:	4691      	mov	r9, r2
 8006346:	eb1a 0508 	adds.w	r5, sl, r8
 800634a:	eb4b 0609 	adc.w	r6, fp, r9
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4619      	mov	r1, r3
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	f04f 0400 	mov.w	r4, #0
 8006360:	0094      	lsls	r4, r2, #2
 8006362:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006366:	008b      	lsls	r3, r1, #2
 8006368:	461a      	mov	r2, r3
 800636a:	4623      	mov	r3, r4
 800636c:	4628      	mov	r0, r5
 800636e:	4631      	mov	r1, r6
 8006370:	f7fa fc1a 	bl	8000ba8 <__aeabi_uldivmod>
 8006374:	4603      	mov	r3, r0
 8006376:	460c      	mov	r4, r1
 8006378:	461a      	mov	r2, r3
 800637a:	4b50      	ldr	r3, [pc, #320]	; (80064bc <UART_SetConfig+0x6f4>)
 800637c:	fba3 2302 	umull	r2, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	469b      	mov	fp, r3
 800638a:	f04f 0c00 	mov.w	ip, #0
 800638e:	46d9      	mov	r9, fp
 8006390:	46e2      	mov	sl, ip
 8006392:	eb19 0309 	adds.w	r3, r9, r9
 8006396:	eb4a 040a 	adc.w	r4, sl, sl
 800639a:	4699      	mov	r9, r3
 800639c:	46a2      	mov	sl, r4
 800639e:	eb19 090b 	adds.w	r9, r9, fp
 80063a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063a6:	f04f 0100 	mov.w	r1, #0
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063ba:	4689      	mov	r9, r1
 80063bc:	4692      	mov	sl, r2
 80063be:	eb1b 0509 	adds.w	r5, fp, r9
 80063c2:	eb4c 060a 	adc.w	r6, ip, sl
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4619      	mov	r1, r3
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	f04f 0400 	mov.w	r4, #0
 80063d8:	0094      	lsls	r4, r2, #2
 80063da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063de:	008b      	lsls	r3, r1, #2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	4631      	mov	r1, r6
 80063e8:	f7fa fbde 	bl	8000ba8 <__aeabi_uldivmod>
 80063ec:	4603      	mov	r3, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b32      	ldr	r3, [pc, #200]	; (80064bc <UART_SetConfig+0x6f4>)
 80063f4:	fba3 1302 	umull	r1, r3, r3, r2
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	2164      	movs	r1, #100	; 0x64
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	3332      	adds	r3, #50	; 0x32
 8006406:	4a2d      	ldr	r2, [pc, #180]	; (80064bc <UART_SetConfig+0x6f4>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006412:	4498      	add	r8, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	469b      	mov	fp, r3
 8006418:	f04f 0c00 	mov.w	ip, #0
 800641c:	46d9      	mov	r9, fp
 800641e:	46e2      	mov	sl, ip
 8006420:	eb19 0309 	adds.w	r3, r9, r9
 8006424:	eb4a 040a 	adc.w	r4, sl, sl
 8006428:	4699      	mov	r9, r3
 800642a:	46a2      	mov	sl, r4
 800642c:	eb19 090b 	adds.w	r9, r9, fp
 8006430:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006440:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006444:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006448:	4689      	mov	r9, r1
 800644a:	4692      	mov	sl, r2
 800644c:	eb1b 0509 	adds.w	r5, fp, r9
 8006450:	eb4c 060a 	adc.w	r6, ip, sl
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4619      	mov	r1, r3
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	f04f 0400 	mov.w	r4, #0
 8006466:	0094      	lsls	r4, r2, #2
 8006468:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800646c:	008b      	lsls	r3, r1, #2
 800646e:	461a      	mov	r2, r3
 8006470:	4623      	mov	r3, r4
 8006472:	4628      	mov	r0, r5
 8006474:	4631      	mov	r1, r6
 8006476:	f7fa fb97 	bl	8000ba8 <__aeabi_uldivmod>
 800647a:	4603      	mov	r3, r0
 800647c:	460c      	mov	r4, r1
 800647e:	461a      	mov	r2, r3
 8006480:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <UART_SetConfig+0x6f4>)
 8006482:	fba3 1302 	umull	r1, r3, r3, r2
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2164      	movs	r1, #100	; 0x64
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	3332      	adds	r3, #50	; 0x32
 8006494:	4a09      	ldr	r2, [pc, #36]	; (80064bc <UART_SetConfig+0x6f4>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4442      	add	r2, r8
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	e7ff      	b.n	80064aa <UART_SetConfig+0x6e2>
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b4:	40011000 	.word	0x40011000
 80064b8:	40011400 	.word	0x40011400
 80064bc:	51eb851f 	.word	0x51eb851f

080064c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c0:	b084      	sub	sp, #16
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	f107 001c 	add.w	r0, r7, #28
 80064ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d122      	bne.n	800651e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006502:	2b01      	cmp	r3, #1
 8006504:	d105      	bne.n	8006512 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fab4 	bl	8007a80 <USB_CoreReset>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e01a      	b.n	8006554 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 faa8 	bl	8007a80 <USB_CoreReset>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
 8006546:	e005      	b.n	8006554 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10b      	bne.n	8006572 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f043 0206 	orr.w	r2, r3, #6
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800657e:	b004      	add	sp, #16
 8006580:	4770      	bx	lr
	...

08006584 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d165      	bne.n	8006664 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a41      	ldr	r2, [pc, #260]	; (80066a0 <USB_SetTurnaroundTime+0x11c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d906      	bls.n	80065ae <USB_SetTurnaroundTime+0x2a>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a40      	ldr	r2, [pc, #256]	; (80066a4 <USB_SetTurnaroundTime+0x120>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d802      	bhi.n	80065ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065a8:	230f      	movs	r3, #15
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e062      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4a3c      	ldr	r2, [pc, #240]	; (80066a4 <USB_SetTurnaroundTime+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d906      	bls.n	80065c4 <USB_SetTurnaroundTime+0x40>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a3b      	ldr	r2, [pc, #236]	; (80066a8 <USB_SetTurnaroundTime+0x124>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d802      	bhi.n	80065c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065be:	230e      	movs	r3, #14
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e057      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <USB_SetTurnaroundTime+0x124>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d906      	bls.n	80065da <USB_SetTurnaroundTime+0x56>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a37      	ldr	r2, [pc, #220]	; (80066ac <USB_SetTurnaroundTime+0x128>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d802      	bhi.n	80065da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80065d4:	230d      	movs	r3, #13
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e04c      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4a33      	ldr	r2, [pc, #204]	; (80066ac <USB_SetTurnaroundTime+0x128>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d906      	bls.n	80065f0 <USB_SetTurnaroundTime+0x6c>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <USB_SetTurnaroundTime+0x12c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d802      	bhi.n	80065f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065ea:	230c      	movs	r3, #12
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e041      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4a2f      	ldr	r2, [pc, #188]	; (80066b0 <USB_SetTurnaroundTime+0x12c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d906      	bls.n	8006606 <USB_SetTurnaroundTime+0x82>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a2e      	ldr	r2, [pc, #184]	; (80066b4 <USB_SetTurnaroundTime+0x130>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d802      	bhi.n	8006606 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006600:	230b      	movs	r3, #11
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e036      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <USB_SetTurnaroundTime+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d906      	bls.n	800661c <USB_SetTurnaroundTime+0x98>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4a29      	ldr	r2, [pc, #164]	; (80066b8 <USB_SetTurnaroundTime+0x134>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d802      	bhi.n	800661c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006616:	230a      	movs	r3, #10
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e02b      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <USB_SetTurnaroundTime+0x134>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d906      	bls.n	8006632 <USB_SetTurnaroundTime+0xae>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4a25      	ldr	r2, [pc, #148]	; (80066bc <USB_SetTurnaroundTime+0x138>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d802      	bhi.n	8006632 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800662c:	2309      	movs	r3, #9
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e020      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4a21      	ldr	r2, [pc, #132]	; (80066bc <USB_SetTurnaroundTime+0x138>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d906      	bls.n	8006648 <USB_SetTurnaroundTime+0xc4>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <USB_SetTurnaroundTime+0x13c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d802      	bhi.n	8006648 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006642:	2308      	movs	r3, #8
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e015      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <USB_SetTurnaroundTime+0x13c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d906      	bls.n	800665e <USB_SetTurnaroundTime+0xda>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <USB_SetTurnaroundTime+0x140>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d802      	bhi.n	800665e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006658:	2307      	movs	r3, #7
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e00a      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800665e:	2306      	movs	r3, #6
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e007      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800666a:	2309      	movs	r3, #9
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e001      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006670:	2309      	movs	r3, #9
 8006672:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800668c:	431a      	orrs	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	00d8acbf 	.word	0x00d8acbf
 80066a4:	00e4e1bf 	.word	0x00e4e1bf
 80066a8:	00f423ff 	.word	0x00f423ff
 80066ac:	0106737f 	.word	0x0106737f
 80066b0:	011a499f 	.word	0x011a499f
 80066b4:	01312cff 	.word	0x01312cff
 80066b8:	014ca43f 	.word	0x014ca43f
 80066bc:	016e35ff 	.word	0x016e35ff
 80066c0:	01a6ab1f 	.word	0x01a6ab1f
 80066c4:	01e847ff 	.word	0x01e847ff

080066c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f043 0201 	orr.w	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f023 0201 	bic.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d106      	bne.n	8006738 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e00b      	b.n	8006750 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	e001      	b.n	8006750 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e003      	b.n	8006758 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006750:	2032      	movs	r0, #50	; 0x32
 8006752:	f7fc f9a7 	bl	8002aa4 <HAL_Delay>

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006760:	b084      	sub	sp, #16
 8006762:	b580      	push	{r7, lr}
 8006764:	b086      	sub	sp, #24
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800676e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	e009      	b.n	8006794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3340      	adds	r3, #64	; 0x40
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	2200      	movs	r2, #0
 800678c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3301      	adds	r3, #1
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b0e      	cmp	r3, #14
 8006798:	d9f2      	bls.n	8006780 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11c      	bne.n	80067da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
 80067d8:	e00b      	b.n	80067f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067f8:	461a      	mov	r2, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	4619      	mov	r1, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680c:	461a      	mov	r2, r3
 800680e:	680b      	ldr	r3, [r1, #0]
 8006810:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	2b01      	cmp	r3, #1
 8006816:	d10c      	bne.n	8006832 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800681e:	2100      	movs	r1, #0
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f949 	bl	8006ab8 <USB_SetDevSpeed>
 8006826:	e008      	b.n	800683a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006828:	2101      	movs	r1, #1
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f944 	bl	8006ab8 <USB_SetDevSpeed>
 8006830:	e003      	b.n	800683a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006832:	2103      	movs	r1, #3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f93f 	bl	8006ab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800683a:	2110      	movs	r1, #16
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8f3 	bl	8006a28 <USB_FlushTxFifo>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f911 	bl	8006a74 <USB_FlushRxFifo>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	461a      	mov	r2, r3
 8006864:	2300      	movs	r3, #0
 8006866:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	461a      	mov	r2, r3
 8006870:	2300      	movs	r3, #0
 8006872:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	461a      	mov	r2, r3
 800687c:	2300      	movs	r3, #0
 800687e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	e043      	b.n	800690e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800689c:	d118      	bne.n	80068d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	461a      	mov	r2, r3
 80068b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e013      	b.n	80068e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	461a      	mov	r2, r3
 80068c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	e008      	b.n	80068e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	461a      	mov	r2, r3
 80068f0:	2300      	movs	r3, #0
 80068f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	461a      	mov	r2, r3
 8006902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3301      	adds	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	429a      	cmp	r2, r3
 8006914:	d3b7      	bcc.n	8006886 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	e043      	b.n	80069a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006932:	d118      	bne.n	8006966 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	461a      	mov	r2, r3
 8006948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e013      	b.n	8006978 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	e008      	b.n	8006978 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	461a      	mov	r2, r3
 8006974:	2300      	movs	r3, #0
 8006976:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	461a      	mov	r2, r3
 8006998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800699c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3301      	adds	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d3b7      	bcc.n	800691c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 0210 	orr.w	r2, r3, #16
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <USB_DevInit+0x2c4>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f043 0208 	orr.w	r2, r3, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d107      	bne.n	8006a14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a0c:	f043 0304 	orr.w	r3, r3, #4
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a20:	b004      	add	sp, #16
 8006a22:	4770      	bx	lr
 8006a24:	803c3800 	.word	0x803c3800

08006a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	019b      	lsls	r3, r3, #6
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <USB_FlushTxFifo+0x48>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d901      	bls.n	8006a54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e006      	b.n	8006a62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d0f0      	beq.n	8006a42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	00030d40 	.word	0x00030d40

08006a74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2210      	movs	r2, #16
 8006a84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <USB_FlushRxFifo+0x40>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e006      	b.n	8006aa6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d0f0      	beq.n	8006a86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	00030d40 	.word	0x00030d40

08006ab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0306 	and.w	r3, r3, #6
 8006b02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
 8006b0e:	e00a      	b.n	8006b26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d002      	beq.n	8006b1c <USB_GetDevSpeed+0x32>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d102      	bne.n	8006b22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	75fb      	strb	r3, [r7, #23]
 8006b20:	e001      	b.n	8006b26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b22:	230f      	movs	r3, #15
 8006b24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d13a      	bne.n	8006bc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	2101      	movs	r1, #1
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	68f9      	ldr	r1, [r7, #12]
 8006b6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d155      	bne.n	8006c34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	78db      	ldrb	r3, [r3, #3]
 8006ba2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	059b      	lsls	r3, r3, #22
 8006baa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bac:	4313      	orrs	r3, r2
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	e036      	b.n	8006c34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d11a      	bne.n	8006c34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d161      	bne.n	8006d24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c76:	d11f      	bne.n	8006cb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd8:	4013      	ands	r3, r2
 8006cda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	2101      	movs	r1, #1
 8006cee:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	0159      	lsls	r1, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4b35      	ldr	r3, [pc, #212]	; (8006df4 <USB_DeactivateEndpoint+0x1b0>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	600b      	str	r3, [r1, #0]
 8006d22:	e060      	b.n	8006de6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3a:	d11f      	bne.n	8006d7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	43db      	mvns	r3, r3
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da6:	69da      	ldr	r2, [r3, #28]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f303 	lsl.w	r3, r1, r3
 8006db6:	041b      	lsls	r3, r3, #16
 8006db8:	43db      	mvns	r3, r3
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0159      	lsls	r1, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	4619      	mov	r1, r3
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <USB_DeactivateEndpoint+0x1b4>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	ec337800 	.word	0xec337800
 8006df8:	eff37800 	.word	0xeff37800

08006dfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	f040 815c 	bne.w	80070d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d132      	bne.n	8006e8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e84:	0cdb      	lsrs	r3, r3, #19
 8006e86:	04db      	lsls	r3, r3, #19
 8006e88:	6113      	str	r3, [r2, #16]
 8006e8a:	e074      	b.n	8006f76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea6:	0cdb      	lsrs	r3, r3, #19
 8006ea8:	04db      	lsls	r3, r3, #19
 8006eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006eca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6959      	ldr	r1, [r3, #20]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	440b      	add	r3, r1
 8006ee8:	1e59      	subs	r1, r3, #1
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ef2:	04d9      	lsls	r1, r3, #19
 8006ef4:	4b9d      	ldr	r3, [pc, #628]	; (800716c <USB_EPStartXfer+0x370>)
 8006ef6:	400b      	ands	r3, r1
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	0148      	lsls	r0, r1, #5
 8006efc:	69f9      	ldr	r1, [r7, #28]
 8006efe:	4401      	add	r1, r0
 8006f00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f04:	4313      	orrs	r3, r2
 8006f06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1e:	69b9      	ldr	r1, [r7, #24]
 8006f20:	0148      	lsls	r0, r1, #5
 8006f22:	69f9      	ldr	r1, [r7, #28]
 8006f24:	4401      	add	r1, r0
 8006f26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	78db      	ldrb	r3, [r3, #3]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d11f      	bne.n	8006f76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d14b      	bne.n	8007014 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	461a      	mov	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	78db      	ldrb	r3, [r3, #3]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d128      	bne.n	8006ff2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d110      	bne.n	8006fd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	e00f      	b.n	8006ff2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e12f      	b.n	8007274 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007032:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	78db      	ldrb	r3, [r3, #3]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d015      	beq.n	8007068 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8117 	beq.w	8007274 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	2101      	movs	r1, #1
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007062:	4313      	orrs	r3, r2
 8007064:	634b      	str	r3, [r1, #52]	; 0x34
 8007066:	e105      	b.n	8007274 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007074:	2b00      	cmp	r3, #0
 8007076:	d110      	bne.n	800709a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e00f      	b.n	80070ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	68d9      	ldr	r1, [r3, #12]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	b298      	uxth	r0, r3
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4603      	mov	r3, r0
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fa2b 	bl	800752a <USB_WritePacket>
 80070d4:	e0ce      	b.n	8007274 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f0:	0cdb      	lsrs	r3, r3, #19
 80070f2:	04db      	lsls	r3, r3, #19
 80070f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007118:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d126      	bne.n	8007170 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	0148      	lsls	r0, r1, #5
 800713c:	69f9      	ldr	r1, [r7, #28]
 800713e:	4401      	add	r1, r0
 8007140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007144:	4313      	orrs	r3, r2
 8007146:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007166:	6113      	str	r3, [r2, #16]
 8007168:	e036      	b.n	80071d8 <USB_EPStartXfer+0x3dc>
 800716a:	bf00      	nop
 800716c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4413      	add	r3, r2
 800717a:	1e5a      	subs	r2, r3, #1
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	fbb2 f3f3 	udiv	r3, r2, r3
 8007184:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	8afb      	ldrh	r3, [r7, #22]
 8007196:	04d9      	lsls	r1, r3, #19
 8007198:	4b39      	ldr	r3, [pc, #228]	; (8007280 <USB_EPStartXfer+0x484>)
 800719a:	400b      	ands	r3, r1
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	0148      	lsls	r0, r1, #5
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	4401      	add	r1, r0
 80071a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071a8:	4313      	orrs	r3, r2
 80071aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	8af9      	ldrh	r1, [r7, #22]
 80071c0:	fb01 f303 	mul.w	r3, r1, r3
 80071c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c8:	69b9      	ldr	r1, [r7, #24]
 80071ca:	0148      	lsls	r0, r1, #5
 80071cc:	69f9      	ldr	r1, [r7, #28]
 80071ce:	4401      	add	r1, r0
 80071d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071d4:	4313      	orrs	r3, r2
 80071d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d10d      	bne.n	80071fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	68d9      	ldr	r1, [r3, #12]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f6:	460a      	mov	r2, r1
 80071f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	78db      	ldrb	r3, [r3, #3]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d128      	bne.n	8007254 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d110      	bne.n	8007234 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e00f      	b.n	8007254 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007252:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800726e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	1ff80000 	.word	0x1ff80000

08007284 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	f040 80cd 	bne.w	8007440 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d132      	bne.n	8007314 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730c:	0cdb      	lsrs	r3, r3, #19
 800730e:	04db      	lsls	r3, r3, #19
 8007310:	6113      	str	r3, [r2, #16]
 8007312:	e04e      	b.n	80073b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	0cdb      	lsrs	r3, r3, #19
 8007330:	04db      	lsls	r3, r3, #19
 8007332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007352:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007356:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	695a      	ldr	r2, [r3, #20]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d903      	bls.n	800736c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073a2:	6939      	ldr	r1, [r7, #16]
 80073a4:	0148      	lsls	r0, r1, #5
 80073a6:	6979      	ldr	r1, [r7, #20]
 80073a8:	4401      	add	r1, r0
 80073aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073ae:	4313      	orrs	r3, r2
 80073b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d11e      	bne.n	80073f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	e092      	b.n	800751c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007410:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007414:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d07e      	beq.n	800751c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	2101      	movs	r1, #1
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	6979      	ldr	r1, [r7, #20]
 8007436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743a:	4313      	orrs	r3, r2
 800743c:	634b      	str	r3, [r1, #52]	; 0x34
 800743e:	e06d      	b.n	800751c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	440a      	add	r2, r1
 8007456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745a:	0cdb      	lsrs	r3, r3, #19
 800745c:	04db      	lsls	r3, r3, #19
 800745e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800747e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007482:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ca:	6939      	ldr	r1, [r7, #16]
 80074cc:	0148      	lsls	r0, r1, #5
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	4401      	add	r1, r0
 80074d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074d6:	4313      	orrs	r3, r2
 80074d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10d      	bne.n	80074fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	460a      	mov	r2, r1
 80074fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	440a      	add	r2, r1
 8007512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800751a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800752a:	b480      	push	{r7}
 800752c:	b089      	sub	sp, #36	; 0x24
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	4611      	mov	r1, r2
 8007536:	461a      	mov	r2, r3
 8007538:	460b      	mov	r3, r1
 800753a:	71fb      	strb	r3, [r7, #7]
 800753c:	4613      	mov	r3, r2
 800753e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007548:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11a      	bne.n	8007586 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007550:	88bb      	ldrh	r3, [r7, #4]
 8007552:	3303      	adds	r3, #3
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	e00f      	b.n	800757e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	031a      	lsls	r2, r3, #12
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	4413      	add	r3, r2
 8007566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756a:	461a      	mov	r2, r3
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3304      	adds	r3, #4
 8007576:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	3301      	adds	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3eb      	bcc.n	800755e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3724      	adds	r7, #36	; 0x24
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	; 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80075aa:	88fb      	ldrh	r3, [r7, #6]
 80075ac:	3303      	adds	r3, #3
 80075ae:	089b      	lsrs	r3, r3, #2
 80075b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e00b      	b.n	80075d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	3304      	adds	r3, #4
 80075c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3301      	adds	r3, #1
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d3ef      	bcc.n	80075b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80075d8:	69fb      	ldr	r3, [r7, #28]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3724      	adds	r7, #36	; 0x24
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d12c      	bne.n	800765c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	db12      	blt.n	800763a <USB_EPSetStall+0x54>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00f      	beq.n	800763a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007638:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e02b      	b.n	80076b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	db12      	blt.n	8007694 <USB_EPSetStall+0xae>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00f      	beq.n	8007694 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007692:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d128      	bne.n	8007730 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	78db      	ldrb	r3, [r3, #3]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d003      	beq.n	800770e <USB_EPClearStall+0x4c>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	78db      	ldrb	r3, [r3, #3]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d138      	bne.n	8007780 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e027      	b.n	8007780 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800774e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	78db      	ldrb	r3, [r3, #3]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d003      	beq.n	8007760 <USB_EPClearStall+0x9e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	78db      	ldrb	r3, [r3, #3]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d10f      	bne.n	8007780 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800777e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c8:	4313      	orrs	r3, r2
 80077ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f4:	f023 0302 	bic.w	r3, r3, #2
 80077f8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80077fa:	2003      	movs	r0, #3
 80077fc:	f7fb f952 	bl	8002aa4 <HAL_Delay>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007824:	f043 0302 	orr.w	r3, r3, #2
 8007828:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800782a:	2003      	movs	r0, #3
 800782c:	f7fb f93a 	bl	8002aa4 <HAL_Delay>

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4013      	ands	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4013      	ands	r3, r2
 8007882:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	0c1b      	lsrs	r3, r3, #16
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4013      	ands	r3, r2
 80078b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	b29b      	uxth	r3, r3
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	4013      	ands	r3, r2
 80078f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078f6:	68bb      	ldr	r3, [r7, #8]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
 8007934:	01db      	lsls	r3, r3, #7
 8007936:	b2db      	uxtb	r3, r3
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4013      	ands	r3, r2
 8007950:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007952:	68bb      	ldr	r3, [r7, #8]
}
 8007954:	4618      	mov	r0, r3
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	f003 0301 	and.w	r3, r3, #1
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007996:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	460b      	mov	r3, r1
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	333c      	adds	r3, #60	; 0x3c
 80079da:	3304      	adds	r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4a26      	ldr	r2, [pc, #152]	; (8007a7c <USB_EP0_OutStart+0xb8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d90a      	bls.n	80079fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f8:	d101      	bne.n	80079fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e037      	b.n	8007a6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	461a      	mov	r2, r3
 8007a06:	2300      	movs	r3, #0
 8007a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2c:	f043 0318 	orr.w	r3, r3, #24
 8007a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d10f      	bne.n	8007a6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	4f54300a 	.word	0x4f54300a

08007a80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a13      	ldr	r2, [pc, #76]	; (8007ae4 <USB_CoreReset+0x64>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e01b      	b.n	8007ad6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	daf2      	bge.n	8007a8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f043 0201 	orr.w	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <USB_CoreReset+0x64>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d901      	bls.n	8007ac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e006      	b.n	8007ad6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d0f0      	beq.n	8007ab6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	00030d40 	.word	0x00030d40

08007ae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007af4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007af8:	f002 f8d6 	bl	8009ca8 <malloc>
 8007afc:	4603      	mov	r3, r0
 8007afe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e066      	b.n	8007be0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7c1b      	ldrb	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d119      	bne.n	8007b56 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b26:	2202      	movs	r2, #2
 8007b28:	2181      	movs	r1, #129	; 0x81
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 ff43 	bl	80099b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 ff39 	bl	80099b6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b54:	e016      	b.n	8007b84 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b56:	2340      	movs	r3, #64	; 0x40
 8007b58:	2202      	movs	r2, #2
 8007b5a:	2181      	movs	r1, #129	; 0x81
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 ff2a 	bl	80099b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b68:	2340      	movs	r3, #64	; 0x40
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 ff21 	bl	80099b6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2210      	movs	r2, #16
 8007b80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b84:	2308      	movs	r3, #8
 8007b86:	2203      	movs	r2, #3
 8007b88:	2182      	movs	r1, #130	; 0x82
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 ff13 	bl	80099b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7c1b      	ldrb	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d109      	bne.n	8007bce <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 ffe4 	bl	8009b94 <USBD_LL_PrepareReceive>
 8007bcc:	e007      	b.n	8007bde <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 ffdb 	bl	8009b94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bf8:	2181      	movs	r1, #129	; 0x81
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f001 ff01 	bl	8009a02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c06:	2101      	movs	r1, #1
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fefa 	bl	8009a02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c16:	2182      	movs	r1, #130	; 0x82
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fef2 	bl	8009a02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00e      	beq.n	8007c56 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 f835 	bl	8009cb8 <free>
    pdev->pClassData = NULL;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d03a      	beq.n	8007d00 <USBD_CDC_Setup+0xa0>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	f040 8097 	bne.w	8007dbe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	88db      	ldrh	r3, [r3, #6]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d029      	beq.n	8007cec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	b25b      	sxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da11      	bge.n	8007cc6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007cae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	88d2      	ldrh	r2, [r2, #6]
 8007cb4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007cb6:	6939      	ldr	r1, [r7, #16]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fa6d 	bl	800919e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007cc4:	e082      	b.n	8007dcc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	785a      	ldrb	r2, [r3, #1]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	88db      	ldrh	r3, [r3, #6]
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007cdc:	6939      	ldr	r1, [r7, #16]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88db      	ldrh	r3, [r3, #6]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fa86 	bl	80091f6 <USBD_CtlPrepareRx>
    break;
 8007cea:	e06f      	b.n	8007dcc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	7850      	ldrb	r0, [r2, #1]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	4798      	blx	r3
    break;
 8007cfe:	e065      	b.n	8007dcc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	2b0b      	cmp	r3, #11
 8007d06:	d84f      	bhi.n	8007da8 <USBD_CDC_Setup+0x148>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBD_CDC_Setup+0xb0>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d41 	.word	0x08007d41
 8007d14:	08007db7 	.word	0x08007db7
 8007d18:	08007da9 	.word	0x08007da9
 8007d1c:	08007da9 	.word	0x08007da9
 8007d20:	08007da9 	.word	0x08007da9
 8007d24:	08007da9 	.word	0x08007da9
 8007d28:	08007da9 	.word	0x08007da9
 8007d2c:	08007da9 	.word	0x08007da9
 8007d30:	08007da9 	.word	0x08007da9
 8007d34:	08007da9 	.word	0x08007da9
 8007d38:	08007d69 	.word	0x08007d69
 8007d3c:	08007d91 	.word	0x08007d91
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d107      	bne.n	8007d5a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d4a:	f107 030c 	add.w	r3, r7, #12
 8007d4e:	2202      	movs	r2, #2
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fa23 	bl	800919e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007d58:	e030      	b.n	8007dbc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f9ad 	bl	80090bc <USBD_CtlError>
        ret = USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	75fb      	strb	r3, [r7, #23]
      break;
 8007d66:	e029      	b.n	8007dbc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d107      	bne.n	8007d82 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d72:	f107 030f 	add.w	r3, r7, #15
 8007d76:	2201      	movs	r2, #1
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 fa0f 	bl	800919e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007d80:	e01c      	b.n	8007dbc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f999 	bl	80090bc <USBD_CtlError>
        ret = USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8e:	e015      	b.n	8007dbc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d00f      	beq.n	8007dba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f98d 	bl	80090bc <USBD_CtlError>
        ret = USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007da6:	e008      	b.n	8007dba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 f986 	bl	80090bc <USBD_CtlError>
      ret = USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	75fb      	strb	r3, [r7, #23]
      break;
 8007db4:	e002      	b.n	8007dbc <USBD_CDC_Setup+0x15c>
      break;
 8007db6:	bf00      	nop
 8007db8:	e008      	b.n	8007dcc <USBD_CDC_Setup+0x16c>
      break;
 8007dba:	bf00      	nop
    }
    break;
 8007dbc:	e006      	b.n	8007dcc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f97b 	bl	80090bc <USBD_CtlError>
    ret = USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	75fb      	strb	r3, [r7, #23]
    break;
 8007dca:	bf00      	nop
  }

  return (uint8_t)ret;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop

08007dd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e049      	b.n	8007e8e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	440b      	add	r3, r1
 8007e10:	3318      	adds	r3, #24
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d029      	beq.n	8007e6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	440b      	add	r3, r1
 8007e26:	3318      	adds	r3, #24
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	78f9      	ldrb	r1, [r7, #3]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	1a5b      	subs	r3, r3, r1
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4403      	add	r3, r0
 8007e38:	3344      	adds	r3, #68	; 0x44
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e40:	fb03 f301 	mul.w	r3, r3, r1
 8007e44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d110      	bne.n	8007e6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	3318      	adds	r3, #24
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e5e:	78f9      	ldrb	r1, [r7, #3]
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fe74 	bl	8009b52 <USBD_LL_Transmit>
 8007e6a:	e00f      	b.n	8007e8c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e88:	78fa      	ldrb	r2, [r7, #3]
 8007e8a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e015      	b.n	8007ee4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fe8a 	bl	8009bd6 <USBD_LL_GetRxDataSize>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007efa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d015      	beq.n	8007f32 <USBD_CDC_EP0_RxReady+0x46>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f0c:	2bff      	cmp	r3, #255	; 0xff
 8007f0e:	d010      	beq.n	8007f32 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f26:	b292      	uxth	r2, r2
 8007f28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	22ff      	movs	r2, #255	; 0xff
 8007f2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2243      	movs	r2, #67	; 0x43
 8007f48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f4a:	4b03      	ldr	r3, [pc, #12]	; (8007f58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20000094 	.word	0x20000094

08007f5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2243      	movs	r2, #67	; 0x43
 8007f68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	20000050 	.word	0x20000050

08007f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2243      	movs	r2, #67	; 0x43
 8007f88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f8a:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	200000d8 	.word	0x200000d8

08007f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e004      	b.n	8007fda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b087      	sub	sp, #28
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008028:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e016      	b.n	800808c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7c1b      	ldrb	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800806c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008070:	2101      	movs	r1, #1
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fd8e 	bl	8009b94 <USBD_LL_PrepareReceive>
 8008078:	e007      	b.n	800808a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008080:	2340      	movs	r3, #64	; 0x40
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fd85 	bl	8009b94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e025      	b.n	80080f8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	79fa      	ldrb	r2, [r7, #7]
 80080ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f001 fbfb 	bl	80098e8 <USBD_LL_Init>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	e010      	b.n	800813a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	f107 020e 	add.w	r2, r7, #14
 800812c:	4610      	mov	r0, r2
 800812e:	4798      	blx	r3
 8008130:	4602      	mov	r2, r0
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 fc18 	bl	8009980 <USBD_LL_Start>
 8008150:	4603      	mov	r3, r0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	4611      	mov	r1, r2
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
  }

  return USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 ff2c 	bl	8009048 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800820c:	f003 031f 	and.w	r3, r3, #31
 8008210:	2b01      	cmp	r3, #1
 8008212:	d00e      	beq.n	8008232 <USBD_LL_SetupStage+0x5a>
 8008214:	2b01      	cmp	r3, #1
 8008216:	d302      	bcc.n	800821e <USBD_LL_SetupStage+0x46>
 8008218:	2b02      	cmp	r3, #2
 800821a:	d014      	beq.n	8008246 <USBD_LL_SetupStage+0x6e>
 800821c:	e01d      	b.n	800825a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa18 	bl	800865c <USBD_StdDevReq>
 800822c:	4603      	mov	r3, r0
 800822e:	73fb      	strb	r3, [r7, #15]
      break;
 8008230:	e020      	b.n	8008274 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa7c 	bl	8008738 <USBD_StdItfReq>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
      break;
 8008244:	e016      	b.n	8008274 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fab8 	bl	80087c4 <USBD_StdEPReq>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
      break;
 8008258:	e00c      	b.n	8008274 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 fbe9 	bl	8009a40 <USBD_LL_StallEP>
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	bf00      	nop
  }

  return ret;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	460b      	mov	r3, r1
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d137      	bne.n	8008302 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008298:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d14a      	bne.n	800833a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d913      	bls.n	80082d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	1ad2      	subs	r2, r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	4293      	cmp	r3, r2
 80082c8:	bf28      	it	cs
 80082ca:	4613      	movcs	r3, r2
 80082cc:	461a      	mov	r2, r3
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 ffad 	bl	8009230 <USBD_CtlContinueRx>
 80082d6:	e030      	b.n	800833a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d105      	bne.n	80082fa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 ffa9 	bl	8009252 <USBD_CtlSendStatus>
 8008300:	e01b      	b.n	800833a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d013      	beq.n	8008336 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008314:	2b03      	cmp	r3, #3
 8008316:	d10e      	bne.n	8008336 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	7afa      	ldrb	r2, [r7, #11]
 8008322:	4611      	mov	r1, r2
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	4798      	blx	r3
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	e002      	b.n	800833c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	e000      	b.n	800833c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	460b      	mov	r3, r1
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d16a      	bne.n	800842e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3314      	adds	r3, #20
 800835c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008364:	2b02      	cmp	r3, #2
 8008366:	d155      	bne.n	8008414 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	429a      	cmp	r2, r3
 8008372:	d914      	bls.n	800839e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	461a      	mov	r2, r3
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 ff22 	bl	80091d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008390:	2300      	movs	r3, #0
 8008392:	2200      	movs	r2, #0
 8008394:	2100      	movs	r1, #0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f001 fbfc 	bl	8009b94 <USBD_LL_PrepareReceive>
 800839c:	e03a      	b.n	8008414 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d11c      	bne.n	80083e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d316      	bcc.n	80083e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d20f      	bcs.n	80083e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 ff03 	bl	80091d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d6:	2300      	movs	r3, #0
 80083d8:	2200      	movs	r2, #0
 80083da:	2100      	movs	r1, #0
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f001 fbd9 	bl	8009b94 <USBD_LL_PrepareReceive>
 80083e2:	e017      	b.n	8008414 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d105      	bne.n	8008406 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f001 fb19 	bl	8009a40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 ff32 	bl	8009278 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800841a:	2b01      	cmp	r3, #1
 800841c:	d123      	bne.n	8008466 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fe9b 	bl	800815a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800842c:	e01b      	b.n	8008466 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d013      	beq.n	8008462 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008440:	2b03      	cmp	r3, #3
 8008442:	d10e      	bne.n	8008462 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	7afa      	ldrb	r2, [r7, #11]
 800844e:	4611      	mov	r1, r2
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	4798      	blx	r3
 8008454:	4603      	mov	r3, r0
 8008456:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	e002      	b.n	8008468 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008462:	2303      	movs	r3, #3
 8008464:	e000      	b.n	8008468 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6852      	ldr	r2, [r2, #4]
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	4611      	mov	r1, r2
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084b4:	2340      	movs	r3, #64	; 0x40
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fa7b 	bl	80099b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2240      	movs	r2, #64	; 0x40
 80084cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	2200      	movs	r2, #0
 80084d4:	2180      	movs	r1, #128	; 0x80
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fa6d 	bl	80099b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2240      	movs	r2, #64	; 0x40
 80084e6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2204      	movs	r2, #4
 800852a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	2b04      	cmp	r3, #4
 800854c:	d105      	bne.n	800855a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008576:	2b03      	cmp	r3, #3
 8008578:	d10b      	bne.n	8008592 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d009      	beq.n	8008614 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6852      	ldr	r2, [r2, #4]
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	4611      	mov	r1, r2
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
  }

  return USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800861e:	b480      	push	{r7}
 8008620:	b087      	sub	sp, #28
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3301      	adds	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800863c:	8a3b      	ldrh	r3, [r7, #16]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	b21a      	sxth	r2, r3
 8008642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008646:	4313      	orrs	r3, r2
 8008648:	b21b      	sxth	r3, r3
 800864a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800864c:	89fb      	ldrh	r3, [r7, #14]
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008672:	2b20      	cmp	r3, #32
 8008674:	d004      	beq.n	8008680 <USBD_StdDevReq+0x24>
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d002      	beq.n	8008680 <USBD_StdDevReq+0x24>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <USBD_StdDevReq+0x38>
 800867e:	e050      	b.n	8008722 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
    break;
 8008692:	e04b      	b.n	800872c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	785b      	ldrb	r3, [r3, #1]
 8008698:	2b09      	cmp	r3, #9
 800869a:	d83c      	bhi.n	8008716 <USBD_StdDevReq+0xba>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <USBD_StdDevReq+0x48>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086f9 	.word	0x080086f9
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	08008717 	.word	0x08008717
 80086b0:	08008703 	.word	0x08008703
 80086b4:	08008717 	.word	0x08008717
 80086b8:	080086d7 	.word	0x080086d7
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	08008717 	.word	0x08008717
 80086c4:	080086ef 	.word	0x080086ef
 80086c8:	080086e1 	.word	0x080086e1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f9ce 	bl	8008a70 <USBD_GetDescriptor>
      break;
 80086d4:	e024      	b.n	8008720 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fb33 	bl	8008d44 <USBD_SetAddress>
      break;
 80086de:	e01f      	b.n	8008720 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fb70 	bl	8008dc8 <USBD_SetConfig>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]
      break;
 80086ec:	e018      	b.n	8008720 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc0d 	bl	8008f10 <USBD_GetConfig>
      break;
 80086f6:	e013      	b.n	8008720 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fc3c 	bl	8008f78 <USBD_GetStatus>
      break;
 8008700:	e00e      	b.n	8008720 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fc6a 	bl	8008fde <USBD_SetFeature>
      break;
 800870a:	e009      	b.n	8008720 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fc79 	bl	8009006 <USBD_ClrFeature>
      break;
 8008714:	e004      	b.n	8008720 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fccf 	bl	80090bc <USBD_CtlError>
      break;
 800871e:	bf00      	nop
    }
    break;
 8008720:	e004      	b.n	800872c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fcc9 	bl	80090bc <USBD_CtlError>
    break;
 800872a:	bf00      	nop
  }

  return ret;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop

08008738 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800874e:	2b20      	cmp	r3, #32
 8008750:	d003      	beq.n	800875a <USBD_StdItfReq+0x22>
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	d001      	beq.n	800875a <USBD_StdItfReq+0x22>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d12a      	bne.n	80087b0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008760:	3b01      	subs	r3, #1
 8008762:	2b02      	cmp	r3, #2
 8008764:	d81d      	bhi.n	80087a2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	889b      	ldrh	r3, [r3, #4]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b01      	cmp	r3, #1
 800876e:	d813      	bhi.n	8008798 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	88db      	ldrh	r3, [r3, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d110      	bne.n	80087ac <USBD_StdItfReq+0x74>
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10d      	bne.n	80087ac <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fd5e 	bl	8009252 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008796:	e009      	b.n	80087ac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc8e 	bl	80090bc <USBD_CtlError>
      break;
 80087a0:	e004      	b.n	80087ac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fc89 	bl	80090bc <USBD_CtlError>
      break;
 80087aa:	e000      	b.n	80087ae <USBD_StdItfReq+0x76>
      break;
 80087ac:	bf00      	nop
    }
    break;
 80087ae:	e004      	b.n	80087ba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fc82 	bl	80090bc <USBD_CtlError>
    break;
 80087b8:	bf00      	nop
  }

  return ret;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	889b      	ldrh	r3, [r3, #4]
 80087d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d004      	beq.n	80087ee <USBD_StdEPReq+0x2a>
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d002      	beq.n	80087ee <USBD_StdEPReq+0x2a>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <USBD_StdEPReq+0x3e>
 80087ec:	e135      	b.n	8008a5a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008800:	e130      	b.n	8008a64 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d03e      	beq.n	8008888 <USBD_StdEPReq+0xc4>
 800880a:	2b03      	cmp	r3, #3
 800880c:	d002      	beq.n	8008814 <USBD_StdEPReq+0x50>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d077      	beq.n	8008902 <USBD_StdEPReq+0x13e>
 8008812:	e11c      	b.n	8008a4e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	2b02      	cmp	r3, #2
 800881c:	d002      	beq.n	8008824 <USBD_StdEPReq+0x60>
 800881e:	2b03      	cmp	r3, #3
 8008820:	d015      	beq.n	800884e <USBD_StdEPReq+0x8a>
 8008822:	e02b      	b.n	800887c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00c      	beq.n	8008844 <USBD_StdEPReq+0x80>
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d009      	beq.n	8008844 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 f903 	bl	8009a40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800883a:	2180      	movs	r1, #128	; 0x80
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 f8ff 	bl	8009a40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008842:	e020      	b.n	8008886 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fc38 	bl	80090bc <USBD_CtlError>
        break;
 800884c:	e01b      	b.n	8008886 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10e      	bne.n	8008874 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_StdEPReq+0xb0>
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b80      	cmp	r3, #128	; 0x80
 8008860:	d008      	beq.n	8008874 <USBD_StdEPReq+0xb0>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d104      	bne.n	8008874 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 f8e6 	bl	8009a40 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fcec 	bl	8009252 <USBD_CtlSendStatus>

        break;
 800887a:	e004      	b.n	8008886 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fc1c 	bl	80090bc <USBD_CtlError>
        break;
 8008884:	bf00      	nop
      }
      break;
 8008886:	e0e7      	b.n	8008a58 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888e:	2b02      	cmp	r3, #2
 8008890:	d002      	beq.n	8008898 <USBD_StdEPReq+0xd4>
 8008892:	2b03      	cmp	r3, #3
 8008894:	d015      	beq.n	80088c2 <USBD_StdEPReq+0xfe>
 8008896:	e02d      	b.n	80088f4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <USBD_StdEPReq+0xf4>
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b80      	cmp	r3, #128	; 0x80
 80088a2:	d009      	beq.n	80088b8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f8c9 	bl	8009a40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ae:	2180      	movs	r1, #128	; 0x80
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 f8c5 	bl	8009a40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80088b6:	e023      	b.n	8008900 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fbfe 	bl	80090bc <USBD_CtlError>
        break;
 80088c0:	e01e      	b.n	8008900 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d119      	bne.n	80088fe <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 f8d0 	bl	8009a7e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fcb7 	bl	8009252 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	4798      	blx	r3
        }
        break;
 80088f2:	e004      	b.n	80088fe <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fbe0 	bl	80090bc <USBD_CtlError>
        break;
 80088fc:	e000      	b.n	8008900 <USBD_StdEPReq+0x13c>
        break;
 80088fe:	bf00      	nop
      }
      break;
 8008900:	e0aa      	b.n	8008a58 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	2b02      	cmp	r3, #2
 800890a:	d002      	beq.n	8008912 <USBD_StdEPReq+0x14e>
 800890c:	2b03      	cmp	r3, #3
 800890e:	d032      	beq.n	8008976 <USBD_StdEPReq+0x1b2>
 8008910:	e097      	b.n	8008a42 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <USBD_StdEPReq+0x164>
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d004      	beq.n	8008928 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fbcb 	bl	80090bc <USBD_CtlError>
          break;
 8008926:	e091      	b.n	8008a4c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800892c:	2b00      	cmp	r3, #0
 800892e:	da0b      	bge.n	8008948 <USBD_StdEPReq+0x184>
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	3310      	adds	r3, #16
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	4413      	add	r3, r2
 8008944:	3304      	adds	r3, #4
 8008946:	e00b      	b.n	8008960 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800894e:	4613      	mov	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4413      	add	r3, r2
 800895e:	3304      	adds	r3, #4
 8008960:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2202      	movs	r2, #2
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fc15 	bl	800919e <USBD_CtlSendData>
        break;
 8008974:	e06a      	b.n	8008a4c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897a:	2b00      	cmp	r3, #0
 800897c:	da11      	bge.n	80089a2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3324      	adds	r3, #36	; 0x24
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d117      	bne.n	80089c8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fb8e 	bl	80090bc <USBD_CtlError>
            break;
 80089a0:	e054      	b.n	8008a4c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	f003 020f 	and.w	r2, r3, #15
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fb7b 	bl	80090bc <USBD_CtlError>
            break;
 80089c6:	e041      	b.n	8008a4c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da0b      	bge.n	80089e8 <USBD_StdEPReq+0x224>
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	3310      	adds	r3, #16
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	3304      	adds	r3, #4
 80089e6:	e00b      	b.n	8008a00 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <USBD_StdEPReq+0x24a>
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	2b80      	cmp	r3, #128	; 0x80
 8008a0c:	d103      	bne.n	8008a16 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	e00e      	b.n	8008a34 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 f84e 	bl	8009abc <USBD_LL_IsStallEP>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	e002      	b.n	8008a34 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2202      	movs	r2, #2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fbaf 	bl	800919e <USBD_CtlSendData>
          break;
 8008a40:	e004      	b.n	8008a4c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fb39 	bl	80090bc <USBD_CtlError>
        break;
 8008a4a:	bf00      	nop
      }
      break;
 8008a4c:	e004      	b.n	8008a58 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fb33 	bl	80090bc <USBD_CtlError>
      break;
 8008a56:	bf00      	nop
    }
    break;
 8008a58:	e004      	b.n	8008a64 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fb2d 	bl	80090bc <USBD_CtlError>
    break;
 8008a62:	bf00      	nop
  }

  return ret;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b06      	cmp	r3, #6
 8008a92:	f200 8128 	bhi.w	8008ce6 <USBD_GetDescriptor+0x276>
 8008a96:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <USBD_GetDescriptor+0x2c>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ad1 	.word	0x08008ad1
 8008aa4:	08008b11 	.word	0x08008b11
 8008aa8:	08008ce7 	.word	0x08008ce7
 8008aac:	08008ce7 	.word	0x08008ce7
 8008ab0:	08008c87 	.word	0x08008c87
 8008ab4:	08008cb3 	.word	0x08008cb3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	7c12      	ldrb	r2, [r2, #16]
 8008ac4:	f107 0108 	add.w	r1, r7, #8
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
 8008acc:	60f8      	str	r0, [r7, #12]
    break;
 8008ace:	e112      	b.n	8008cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	7c1b      	ldrb	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10d      	bne.n	8008af4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae0:	f107 0208 	add.w	r2, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	2202      	movs	r2, #2
 8008af0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008af2:	e100      	b.n	8008cf6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	f107 0208 	add.w	r2, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	701a      	strb	r2, [r3, #0]
    break;
 8008b0e:	e0f2      	b.n	8008cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	885b      	ldrh	r3, [r3, #2]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	f200 80ac 	bhi.w	8008c74 <USBD_GetDescriptor+0x204>
 8008b1c:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <USBD_GetDescriptor+0xb4>)
 8008b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b22:	bf00      	nop
 8008b24:	08008b3d 	.word	0x08008b3d
 8008b28:	08008b71 	.word	0x08008b71
 8008b2c:	08008ba5 	.word	0x08008ba5
 8008b30:	08008bd9 	.word	0x08008bd9
 8008b34:	08008c0d 	.word	0x08008c0d
 8008b38:	08008c41 	.word	0x08008c41
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7c12      	ldrb	r2, [r2, #16]
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b5e:	e091      	b.n	8008c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 faaa 	bl	80090bc <USBD_CtlError>
        err++;
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b6e:	e089      	b.n	8008c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b92:	e077      	b.n	8008c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa90 	bl	80090bc <USBD_CtlError>
        err++;
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ba2:	e06f      	b.n	8008c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7c12      	ldrb	r2, [r2, #16]
 8008bbc:	f107 0108 	add.w	r1, r7, #8
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bc6:	e05d      	b.n	8008c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa76 	bl	80090bc <USBD_CtlError>
        err++;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8008bd6:	e055      	b.n	8008c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7c12      	ldrb	r2, [r2, #16]
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bfa:	e043      	b.n	8008c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa5c 	bl	80090bc <USBD_CtlError>
        err++;
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	3301      	adds	r3, #1
 8008c08:	72fb      	strb	r3, [r7, #11]
      break;
 8008c0a:	e03b      	b.n	8008c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00b      	beq.n	8008c30 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7c12      	ldrb	r2, [r2, #16]
 8008c24:	f107 0108 	add.w	r1, r7, #8
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
 8008c2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c2e:	e029      	b.n	8008c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa42 	bl	80090bc <USBD_CtlError>
        err++;
 8008c38:	7afb      	ldrb	r3, [r7, #11]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c3e:	e021      	b.n	8008c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	7c12      	ldrb	r2, [r2, #16]
 8008c58:	f107 0108 	add.w	r1, r7, #8
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4798      	blx	r3
 8008c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c62:	e00f      	b.n	8008c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa28 	bl	80090bc <USBD_CtlError>
        err++;
 8008c6c:	7afb      	ldrb	r3, [r7, #11]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	72fb      	strb	r3, [r7, #11]
      break;
 8008c72:	e007      	b.n	8008c84 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa20 	bl	80090bc <USBD_CtlError>
      err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008c82:	bf00      	nop
    }
    break;
 8008c84:	e037      	b.n	8008cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	7c1b      	ldrb	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d109      	bne.n	8008ca2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c96:	f107 0208 	add.w	r2, r7, #8
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4798      	blx	r3
 8008c9e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ca0:	e029      	b.n	8008cf6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa09 	bl	80090bc <USBD_CtlError>
      err++;
 8008caa:	7afb      	ldrb	r3, [r7, #11]
 8008cac:	3301      	adds	r3, #1
 8008cae:	72fb      	strb	r3, [r7, #11]
    break;
 8008cb0:	e021      	b.n	8008cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7c1b      	ldrb	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10d      	bne.n	8008cd6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	f107 0208 	add.w	r2, r7, #8
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4798      	blx	r3
 8008cca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	2207      	movs	r2, #7
 8008cd2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008cd4:	e00f      	b.n	8008cf6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f9ef 	bl	80090bc <USBD_CtlError>
      err++;
 8008cde:	7afb      	ldrb	r3, [r7, #11]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ce4:	e007      	b.n	8008cf6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f9e7 	bl	80090bc <USBD_CtlError>
    err++;
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	72fb      	strb	r3, [r7, #11]
    break;
 8008cf4:	bf00      	nop
  }

  if (err != 0U)
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d11e      	bne.n	8008d3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	88db      	ldrh	r3, [r3, #6]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d016      	beq.n	8008d32 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00e      	beq.n	8008d28 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88da      	ldrh	r2, [r3, #6]
 8008d0e:	893b      	ldrh	r3, [r7, #8]
 8008d10:	4293      	cmp	r3, r2
 8008d12:	bf28      	it	cs
 8008d14:	4613      	movcs	r3, r2
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d1a:	893b      	ldrh	r3, [r7, #8]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	68f9      	ldr	r1, [r7, #12]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fa3c 	bl	800919e <USBD_CtlSendData>
 8008d26:	e009      	b.n	8008d3c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9c6 	bl	80090bc <USBD_CtlError>
 8008d30:	e004      	b.n	8008d3c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa8d 	bl	8009252 <USBD_CtlSendStatus>
 8008d38:	e000      	b.n	8008d3c <USBD_GetDescriptor+0x2cc>
    return;
 8008d3a:	bf00      	nop
    }
  }
}
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop

08008d44 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	889b      	ldrh	r3, [r3, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d130      	bne.n	8008db8 <USBD_SetAddress+0x74>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	88db      	ldrh	r3, [r3, #6]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d12c      	bne.n	8008db8 <USBD_SetAddress+0x74>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	885b      	ldrh	r3, [r3, #2]
 8008d62:	2b7f      	cmp	r3, #127	; 0x7f
 8008d64:	d828      	bhi.n	8008db8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d104      	bne.n	8008d86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f99c 	bl	80090bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d84:	e01c      	b.n	8008dc0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7bfa      	ldrb	r2, [r7, #15]
 8008d8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 febe 	bl	8009b14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa5a 	bl	8009252 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dac:	e008      	b.n	8008dc0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db6:	e003      	b.n	8008dc0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f97e 	bl	80090bc <USBD_CtlError>
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	885b      	ldrh	r3, [r3, #2]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	4b4b      	ldr	r3, [pc, #300]	; (8008f0c <USBD_SetConfig+0x144>)
 8008dde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008de0:	4b4a      	ldr	r3, [pc, #296]	; (8008f0c <USBD_SetConfig+0x144>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d905      	bls.n	8008df4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f966 	bl	80090bc <USBD_CtlError>
    return USBD_FAIL;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e087      	b.n	8008f04 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d002      	beq.n	8008e04 <USBD_SetConfig+0x3c>
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d025      	beq.n	8008e4e <USBD_SetConfig+0x86>
 8008e02:	e071      	b.n	8008ee8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008e04:	4b41      	ldr	r3, [pc, #260]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01c      	beq.n	8008e46 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008e0c:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e16:	4b3d      	ldr	r3, [pc, #244]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff f9a7 	bl	8008170 <USBD_SetClassConfig>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f944 	bl	80090bc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e34:	e065      	b.n	8008f02 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa0b 	bl	8009252 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e44:	e05d      	b.n	8008f02 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa03 	bl	8009252 <USBD_CtlSendStatus>
    break;
 8008e4c:	e059      	b.n	8008f02 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008e4e:	4b2f      	ldr	r3, [pc, #188]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d112      	bne.n	8008e7c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008e5e:	4b2b      	ldr	r3, [pc, #172]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e68:	4b28      	ldr	r3, [pc, #160]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff f99a 	bl	80081a8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f9ec 	bl	8009252 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e7a:	e042      	b.n	8008f02 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008e7c:	4b23      	ldr	r3, [pc, #140]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d02a      	beq.n	8008ee0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff f988 	bl	80081a8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008e98:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <USBD_SetConfig+0x144>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	; (8008f0c <USBD_SetConfig+0x144>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff f961 	bl	8008170 <USBD_SetClassConfig>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00f      	beq.n	8008ed8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f8fe 	bl	80090bc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7ff f96d 	bl	80081a8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ed6:	e014      	b.n	8008f02 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f9ba 	bl	8009252 <USBD_CtlSendStatus>
    break;
 8008ede:	e010      	b.n	8008f02 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f9b6 	bl	8009252 <USBD_CtlSendStatus>
    break;
 8008ee6:	e00c      	b.n	8008f02 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f8e6 	bl	80090bc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <USBD_SetConfig+0x144>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff f956 	bl	80081a8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008efc:	2303      	movs	r3, #3
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	bf00      	nop
  }

  return ret;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000370 	.word	0x20000370

08008f10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d004      	beq.n	8008f2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f8c9 	bl	80090bc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008f2a:	e021      	b.n	8008f70 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	db17      	blt.n	8008f66 <USBD_GetConfig+0x56>
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	dd02      	ble.n	8008f40 <USBD_GetConfig+0x30>
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d00b      	beq.n	8008f56 <USBD_GetConfig+0x46>
 8008f3e:	e012      	b.n	8008f66 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3308      	adds	r3, #8
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f925 	bl	800919e <USBD_CtlSendData>
      break;
 8008f54:	e00c      	b.n	8008f70 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f91d 	bl	800919e <USBD_CtlSendData>
      break;
 8008f64:	e004      	b.n	8008f70 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f8a7 	bl	80090bc <USBD_CtlError>
      break;
 8008f6e:	bf00      	nop
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d81e      	bhi.n	8008fcc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	88db      	ldrh	r3, [r3, #6]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d004      	beq.n	8008fa0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f88f 	bl	80090bc <USBD_CtlError>
      break;
 8008f9e:	e01a      	b.n	8008fd6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f043 0202 	orr.w	r2, r3, #2
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8ea 	bl	800919e <USBD_CtlSendData>
    break;
 8008fca:	e004      	b.n	8008fd6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f874 	bl	80090bc <USBD_CtlError>
    break;
 8008fd4:	bf00      	nop
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d106      	bne.n	8008ffe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f92a 	bl	8009252 <USBD_CtlSendStatus>
  }
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009016:	3b01      	subs	r3, #1
 8009018:	2b02      	cmp	r3, #2
 800901a:	d80b      	bhi.n	8009034 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	885b      	ldrh	r3, [r3, #2]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10c      	bne.n	800903e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f910 	bl	8009252 <USBD_CtlSendStatus>
      }
      break;
 8009032:	e004      	b.n	800903e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f840 	bl	80090bc <USBD_CtlError>
      break;
 800903c:	e000      	b.n	8009040 <USBD_ClrFeature+0x3a>
      break;
 800903e:	bf00      	nop
  }
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3301      	adds	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fad3 	bl	800861e <SWAPBYTE>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3301      	adds	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3301      	adds	r3, #1
 800908a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fac6 	bl	800861e <SWAPBYTE>
 8009092:	4603      	mov	r3, r0
 8009094:	461a      	mov	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3301      	adds	r3, #1
 800909e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3301      	adds	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f7ff fab9 	bl	800861e <SWAPBYTE>
 80090ac:	4603      	mov	r3, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	80da      	strh	r2, [r3, #6]
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090c6:	2180      	movs	r1, #128	; 0x80
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fcb9 	bl	8009a40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fcb5 	bl	8009a40 <USBD_LL_StallEP>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d036      	beq.n	8009162 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090f8:	6938      	ldr	r0, [r7, #16]
 80090fa:	f000 f836 	bl	800916a <USBD_GetLen>
 80090fe:	4603      	mov	r3, r0
 8009100:	3301      	adds	r3, #1
 8009102:	b29b      	uxth	r3, r3
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800910c:	7dfb      	ldrb	r3, [r7, #23]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4413      	add	r3, r2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	701a      	strb	r2, [r3, #0]
  idx++;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	3301      	adds	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	4413      	add	r3, r2
 8009124:	2203      	movs	r2, #3
 8009126:	701a      	strb	r2, [r3, #0]
  idx++;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	3301      	adds	r3, #1
 800912c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800912e:	e013      	b.n	8009158 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4413      	add	r3, r2
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	7812      	ldrb	r2, [r2, #0]
 800913a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3301      	adds	r3, #1
 8009140:	613b      	str	r3, [r7, #16]
    idx++;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	3301      	adds	r3, #1
 8009146:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	4413      	add	r3, r2
 800914e:	2200      	movs	r2, #0
 8009150:	701a      	strb	r2, [r3, #0]
    idx++;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	3301      	adds	r3, #1
 8009156:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e7      	bne.n	8009130 <USBD_GetString+0x52>
 8009160:	e000      	b.n	8009164 <USBD_GetString+0x86>
    return;
 8009162:	bf00      	nop
  }
}
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800917a:	e005      	b.n	8009188 <USBD_GetLen+0x1e>
  {
    len++;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	3301      	adds	r3, #1
 8009180:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3301      	adds	r3, #1
 8009186:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f5      	bne.n	800917c <USBD_GetLen+0x12>
  }

  return len;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2202      	movs	r2, #2
 80091ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	2100      	movs	r1, #0
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 fcc4 	bl	8009b52 <USBD_LL_Transmit>

  return USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	2100      	movs	r1, #0
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 fcb3 	bl	8009b52 <USBD_LL_Transmit>

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	60b9      	str	r1, [r7, #8]
 8009200:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2203      	movs	r2, #3
 8009206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	2100      	movs	r1, #0
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 fcb7 	bl	8009b94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	2100      	movs	r1, #0
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fca6 	bl	8009b94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2204      	movs	r2, #4
 800925e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fc72 	bl	8009b52 <USBD_LL_Transmit>

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2205      	movs	r2, #5
 8009284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009288:	2300      	movs	r3, #0
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fc80 	bl	8009b94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092a4:	2200      	movs	r2, #0
 80092a6:	4912      	ldr	r1, [pc, #72]	; (80092f0 <MX_USB_DEVICE_Init+0x50>)
 80092a8:	4812      	ldr	r0, [pc, #72]	; (80092f4 <MX_USB_DEVICE_Init+0x54>)
 80092aa:	f7fe fef3 	bl	8008094 <USBD_Init>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80092b4:	f7f9 f9ea 	bl	800268c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092b8:	490f      	ldr	r1, [pc, #60]	; (80092f8 <MX_USB_DEVICE_Init+0x58>)
 80092ba:	480e      	ldr	r0, [pc, #56]	; (80092f4 <MX_USB_DEVICE_Init+0x54>)
 80092bc:	f7fe ff20 	bl	8008100 <USBD_RegisterClass>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092c6:	f7f9 f9e1 	bl	800268c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092ca:	490c      	ldr	r1, [pc, #48]	; (80092fc <MX_USB_DEVICE_Init+0x5c>)
 80092cc:	4809      	ldr	r0, [pc, #36]	; (80092f4 <MX_USB_DEVICE_Init+0x54>)
 80092ce:	f7fe fe75 	bl	8007fbc <USBD_CDC_RegisterInterface>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092d8:	f7f9 f9d8 	bl	800268c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092dc:	4805      	ldr	r0, [pc, #20]	; (80092f4 <MX_USB_DEVICE_Init+0x54>)
 80092de:	f7fe ff30 	bl	8008142 <USBD_Start>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092e8:	f7f9 f9d0 	bl	800268c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092ec:	bf00      	nop
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000130 	.word	0x20000130
 80092f4:	200004ac 	.word	0x200004ac
 80092f8:	20000018 	.word	0x20000018
 80092fc:	2000011c 	.word	0x2000011c

08009300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009304:	2200      	movs	r2, #0
 8009306:	4905      	ldr	r1, [pc, #20]	; (800931c <CDC_Init_FS+0x1c>)
 8009308:	4805      	ldr	r0, [pc, #20]	; (8009320 <CDC_Init_FS+0x20>)
 800930a:	f7fe fe6c 	bl	8007fe6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800930e:	4905      	ldr	r1, [pc, #20]	; (8009324 <CDC_Init_FS+0x24>)
 8009310:	4803      	ldr	r0, [pc, #12]	; (8009320 <CDC_Init_FS+0x20>)
 8009312:	f7fe fe81 	bl	8008018 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009318:	4618      	mov	r0, r3
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000f7c 	.word	0x20000f7c
 8009320:	200004ac 	.word	0x200004ac
 8009324:	2000077c 	.word	0x2000077c

08009328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800932c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800932e:	4618      	mov	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
 8009344:	4613      	mov	r3, r2
 8009346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b23      	cmp	r3, #35	; 0x23
 800934c:	d84a      	bhi.n	80093e4 <CDC_Control_FS+0xac>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <CDC_Control_FS+0x1c>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	080093e5 	.word	0x080093e5
 8009358:	080093e5 	.word	0x080093e5
 800935c:	080093e5 	.word	0x080093e5
 8009360:	080093e5 	.word	0x080093e5
 8009364:	080093e5 	.word	0x080093e5
 8009368:	080093e5 	.word	0x080093e5
 800936c:	080093e5 	.word	0x080093e5
 8009370:	080093e5 	.word	0x080093e5
 8009374:	080093e5 	.word	0x080093e5
 8009378:	080093e5 	.word	0x080093e5
 800937c:	080093e5 	.word	0x080093e5
 8009380:	080093e5 	.word	0x080093e5
 8009384:	080093e5 	.word	0x080093e5
 8009388:	080093e5 	.word	0x080093e5
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093e5 	.word	0x080093e5
 8009394:	080093e5 	.word	0x080093e5
 8009398:	080093e5 	.word	0x080093e5
 800939c:	080093e5 	.word	0x080093e5
 80093a0:	080093e5 	.word	0x080093e5
 80093a4:	080093e5 	.word	0x080093e5
 80093a8:	080093e5 	.word	0x080093e5
 80093ac:	080093e5 	.word	0x080093e5
 80093b0:	080093e5 	.word	0x080093e5
 80093b4:	080093e5 	.word	0x080093e5
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	080093e5 	.word	0x080093e5
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093e5 	.word	0x080093e5
 80093c8:	080093e5 	.word	0x080093e5
 80093cc:	080093e5 	.word	0x080093e5
 80093d0:	080093e5 	.word	0x080093e5
 80093d4:	080093e5 	.word	0x080093e5
 80093d8:	080093e5 	.word	0x080093e5
 80093dc:	080093e5 	.word	0x080093e5
 80093e0:	080093e5 	.word	0x080093e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093e4:	bf00      	nop
  }

  return (USBD_OK);
 80093e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <CDC_Receive_FS+0x24>)
 8009402:	f7fe fe09 	bl	8008018 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009406:	4804      	ldr	r0, [pc, #16]	; (8009418 <CDC_Receive_FS+0x24>)
 8009408:	f7fe fe1a 	bl	8008040 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800940c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200004ac 	.word	0x200004ac

0800941c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800942e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009432:	4618      	mov	r0, r3
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2212      	movs	r2, #18
 8009450:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009452:	4b03      	ldr	r3, [pc, #12]	; (8009460 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	2000014c 	.word	0x2000014c

08009464 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2204      	movs	r2, #4
 8009474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009476:	4b03      	ldr	r3, [pc, #12]	; (8009484 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	20000160 	.word	0x20000160

08009488 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d105      	bne.n	80094a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	4907      	ldr	r1, [pc, #28]	; (80094bc <USBD_FS_ProductStrDescriptor+0x34>)
 800949e:	4808      	ldr	r0, [pc, #32]	; (80094c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80094a0:	f7ff fe1d 	bl	80090de <USBD_GetString>
 80094a4:	e004      	b.n	80094b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4904      	ldr	r1, [pc, #16]	; (80094bc <USBD_FS_ProductStrDescriptor+0x34>)
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80094ac:	f7ff fe17 	bl	80090de <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	2000177c 	.word	0x2000177c
 80094c0:	0800caa4 	.word	0x0800caa4

080094c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	4904      	ldr	r1, [pc, #16]	; (80094e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094d4:	4804      	ldr	r0, [pc, #16]	; (80094e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094d6:	f7ff fe02 	bl	80090de <USBD_GetString>
  return USBD_StrDesc;
 80094da:	4b02      	ldr	r3, [pc, #8]	; (80094e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	2000177c 	.word	0x2000177c
 80094e8:	0800cabc 	.word	0x0800cabc

080094ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	221a      	movs	r2, #26
 80094fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094fe:	f000 f843 	bl	8009588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009502:	4b02      	ldr	r3, [pc, #8]	; (800950c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000164 	.word	0x20000164

08009510 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4907      	ldr	r1, [pc, #28]	; (8009544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009526:	4808      	ldr	r0, [pc, #32]	; (8009548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009528:	f7ff fdd9 	bl	80090de <USBD_GetString>
 800952c:	e004      	b.n	8009538 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4904      	ldr	r1, [pc, #16]	; (8009544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009532:	4805      	ldr	r0, [pc, #20]	; (8009548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009534:	f7ff fdd3 	bl	80090de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009538:	4b02      	ldr	r3, [pc, #8]	; (8009544 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	2000177c 	.word	0x2000177c
 8009548:	0800cad0 	.word	0x0800cad0

0800954c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4907      	ldr	r1, [pc, #28]	; (8009580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009562:	4808      	ldr	r0, [pc, #32]	; (8009584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009564:	f7ff fdbb 	bl	80090de <USBD_GetString>
 8009568:	e004      	b.n	8009574 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4904      	ldr	r1, [pc, #16]	; (8009580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800956e:	4805      	ldr	r0, [pc, #20]	; (8009584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009570:	f7ff fdb5 	bl	80090de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	2000177c 	.word	0x2000177c
 8009584:	0800cadc 	.word	0x0800cadc

08009588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <Get_SerialNum+0x44>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <Get_SerialNum+0x48>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800959a:	4b0e      	ldr	r3, [pc, #56]	; (80095d4 <Get_SerialNum+0x4c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d009      	beq.n	80095c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ae:	2208      	movs	r2, #8
 80095b0:	4909      	ldr	r1, [pc, #36]	; (80095d8 <Get_SerialNum+0x50>)
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f814 	bl	80095e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095b8:	2204      	movs	r2, #4
 80095ba:	4908      	ldr	r1, [pc, #32]	; (80095dc <Get_SerialNum+0x54>)
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f000 f80f 	bl	80095e0 <IntToUnicode>
  }
}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	1fff7a10 	.word	0x1fff7a10
 80095d0:	1fff7a14 	.word	0x1fff7a14
 80095d4:	1fff7a18 	.word	0x1fff7a18
 80095d8:	20000166 	.word	0x20000166
 80095dc:	20000176 	.word	0x20000176

080095e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
 80095f6:	e027      	b.n	8009648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	2b09      	cmp	r3, #9
 80095fe:	d80b      	bhi.n	8009618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	0f1b      	lsrs	r3, r3, #28
 8009604:	b2da      	uxtb	r2, r3
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	4619      	mov	r1, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	440b      	add	r3, r1
 8009610:	3230      	adds	r2, #48	; 0x30
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e00a      	b.n	800962e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	0f1b      	lsrs	r3, r3, #28
 800961c:	b2da      	uxtb	r2, r3
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4619      	mov	r1, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	440b      	add	r3, r1
 8009628:	3237      	adds	r2, #55	; 0x37
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	3301      	adds	r3, #1
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	3301      	adds	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
 8009648:	7dfa      	ldrb	r2, [r7, #23]
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	429a      	cmp	r2, r3
 800964e:	d3d3      	bcc.n	80095f8 <IntToUnicode+0x18>
  }
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	; 0x28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009664:	f107 0314 	add.w	r3, r7, #20
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	609a      	str	r2, [r3, #8]
 8009670:	60da      	str	r2, [r3, #12]
 8009672:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800967c:	d13a      	bne.n	80096f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	4b1e      	ldr	r3, [pc, #120]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 8009684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009686:	4a1d      	ldr	r2, [pc, #116]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 8009688:	f043 0301 	orr.w	r3, r3, #1
 800968c:	6313      	str	r3, [r2, #48]	; 0x30
 800968e:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800969a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800969e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a0:	2302      	movs	r3, #2
 80096a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096a8:	2303      	movs	r3, #3
 80096aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096ac:	230a      	movs	r3, #10
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b0:	f107 0314 	add.w	r3, r7, #20
 80096b4:	4619      	mov	r1, r3
 80096b6:	4812      	ldr	r0, [pc, #72]	; (8009700 <HAL_PCD_MspInit+0xa4>)
 80096b8:	f7f9 fb28 	bl	8002d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 80096be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c0:	4a0e      	ldr	r2, [pc, #56]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 80096c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c6:	6353      	str	r3, [r2, #52]	; 0x34
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 80096ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 80096d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096d6:	6453      	str	r3, [r2, #68]	; 0x44
 80096d8:	4b08      	ldr	r3, [pc, #32]	; (80096fc <HAL_PCD_MspInit+0xa0>)
 80096da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096e4:	2200      	movs	r2, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	2043      	movs	r0, #67	; 0x43
 80096ea:	f7f9 fad8 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096ee:	2043      	movs	r0, #67	; 0x43
 80096f0:	f7f9 faf1 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096f4:	bf00      	nop
 80096f6:	3728      	adds	r7, #40	; 0x28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	40023800 	.word	0x40023800
 8009700:	40020000 	.word	0x40020000

08009704 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe fd5c 	bl	80081d8 <USBD_LL_SetupStage>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	1a9b      	subs	r3, r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	4619      	mov	r1, r3
 8009752:	f7fe fd94 	bl	800827e <USBD_LL_DataOutStage>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	460b      	mov	r3, r1
 8009768:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4613      	mov	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	3348      	adds	r3, #72	; 0x48
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	4619      	mov	r1, r3
 8009786:	f7fe fddd 	bl	8008344 <USBD_LL_DataInStage>
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fee1 	bl	8008568 <USBD_LL_SOF>
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097b6:	2301      	movs	r3, #1
 80097b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d102      	bne.n	80097c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
 80097c6:	e008      	b.n	80097da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d102      	bne.n	80097d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
 80097d4:	e001      	b.n	80097da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80097d6:	f7f8 ff59 	bl	800268c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097e0:	7bfa      	ldrb	r2, [r7, #15]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe fe84 	bl	80084f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fe3d 	bl	8008470 <USBD_LL_Reset>
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fe7f 	bl	8008512 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009826:	f043 0301 	orr.w	r3, r3, #1
 800982a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009834:	4b04      	ldr	r3, [pc, #16]	; (8009848 <HAL_PCD_SuspendCallback+0x48>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	4a03      	ldr	r2, [pc, #12]	; (8009848 <HAL_PCD_SuspendCallback+0x48>)
 800983a:	f043 0306 	orr.w	r3, r3, #6
 800983e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed00 	.word	0xe000ed00

0800984c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fe6e 	bl	800853c <USBD_LL_Resume>
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fe99 	bl	80085b6 <USBD_LL_IsoOUTIncomplete>
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800989e:	78fa      	ldrb	r2, [r7, #3]
 80098a0:	4611      	mov	r1, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fe7a 	bl	800859c <USBD_LL_IsoINIncomplete>
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fe86 	bl	80085d0 <USBD_LL_DevConnected>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fe83 	bl	80085e6 <USBD_LL_DevDisconnected>
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d13c      	bne.n	8009972 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <USBD_LL_Init+0x94>)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a1e      	ldr	r2, [pc, #120]	; (800997c <USBD_LL_Init+0x94>)
 8009904:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009908:	4b1c      	ldr	r3, [pc, #112]	; (800997c <USBD_LL_Init+0x94>)
 800990a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800990e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009910:	4b1a      	ldr	r3, [pc, #104]	; (800997c <USBD_LL_Init+0x94>)
 8009912:	2204      	movs	r2, #4
 8009914:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009916:	4b19      	ldr	r3, [pc, #100]	; (800997c <USBD_LL_Init+0x94>)
 8009918:	2202      	movs	r2, #2
 800991a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800991c:	4b17      	ldr	r3, [pc, #92]	; (800997c <USBD_LL_Init+0x94>)
 800991e:	2200      	movs	r2, #0
 8009920:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009922:	4b16      	ldr	r3, [pc, #88]	; (800997c <USBD_LL_Init+0x94>)
 8009924:	2202      	movs	r2, #2
 8009926:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009928:	4b14      	ldr	r3, [pc, #80]	; (800997c <USBD_LL_Init+0x94>)
 800992a:	2200      	movs	r2, #0
 800992c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <USBD_LL_Init+0x94>)
 8009930:	2200      	movs	r2, #0
 8009932:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009934:	4b11      	ldr	r3, [pc, #68]	; (800997c <USBD_LL_Init+0x94>)
 8009936:	2200      	movs	r2, #0
 8009938:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800993a:	4b10      	ldr	r3, [pc, #64]	; (800997c <USBD_LL_Init+0x94>)
 800993c:	2200      	movs	r2, #0
 800993e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009940:	4b0e      	ldr	r3, [pc, #56]	; (800997c <USBD_LL_Init+0x94>)
 8009942:	2200      	movs	r2, #0
 8009944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009946:	480d      	ldr	r0, [pc, #52]	; (800997c <USBD_LL_Init+0x94>)
 8009948:	f7fa fb4f 	bl	8003fea <HAL_PCD_Init>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009952:	f7f8 fe9b 	bl	800268c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009956:	2180      	movs	r1, #128	; 0x80
 8009958:	4808      	ldr	r0, [pc, #32]	; (800997c <USBD_LL_Init+0x94>)
 800995a:	f7fb fcac 	bl	80052b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800995e:	2240      	movs	r2, #64	; 0x40
 8009960:	2100      	movs	r1, #0
 8009962:	4806      	ldr	r0, [pc, #24]	; (800997c <USBD_LL_Init+0x94>)
 8009964:	f7fb fc60 	bl	8005228 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009968:	2280      	movs	r2, #128	; 0x80
 800996a:	2101      	movs	r1, #1
 800996c:	4803      	ldr	r0, [pc, #12]	; (800997c <USBD_LL_Init+0x94>)
 800996e:	f7fb fc5b 	bl	8005228 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2000197c 	.word	0x2000197c

08009980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009996:	4618      	mov	r0, r3
 8009998:	f7fa fc44 	bl	8004224 <HAL_PCD_Start>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f92a 	bl	8009bfc <USBD_Get_USB_Status>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	461a      	mov	r2, r3
 80099c4:	4603      	mov	r3, r0
 80099c6:	70fb      	strb	r3, [r7, #3]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70bb      	strb	r3, [r7, #2]
 80099cc:	4613      	mov	r3, r2
 80099ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099de:	78bb      	ldrb	r3, [r7, #2]
 80099e0:	883a      	ldrh	r2, [r7, #0]
 80099e2:	78f9      	ldrb	r1, [r7, #3]
 80099e4:	f7fb f828 	bl	8004a38 <HAL_PCD_EP_Open>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f904 	bl	8009bfc <USBD_Get_USB_Status>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fb f871 	bl	8004b08 <HAL_PCD_EP_Close>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f8e5 	bl	8009bfc <USBD_Get_USB_Status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a5a:	78fa      	ldrb	r2, [r7, #3]
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fb f949 	bl	8004cf6 <HAL_PCD_EP_SetStall>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f8c6 	bl	8009bfc <USBD_Get_USB_Status>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fb f98e 	bl	8004dbe <HAL_PCD_EP_ClrStall>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 f8a7 	bl	8009bfc <USBD_Get_USB_Status>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ace:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da0b      	bge.n	8009af0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ade:	68f9      	ldr	r1, [r7, #12]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	1a9b      	subs	r3, r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	333e      	adds	r3, #62	; 0x3e
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	e00b      	b.n	8009b08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009af6:	68f9      	ldr	r1, [r7, #12]
 8009af8:	4613      	mov	r3, r2
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b2e:	78fa      	ldrb	r2, [r7, #3]
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fa ff5b 	bl	80049ee <HAL_PCD_SetAddress>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f85c 	bl	8009bfc <USBD_Get_USB_Status>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b70:	7af9      	ldrb	r1, [r7, #11]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	f7fb f874 	bl	8004c62 <HAL_PCD_EP_Transmit>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f83b 	bl	8009bfc <USBD_Get_USB_Status>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009b8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	607a      	str	r2, [r7, #4]
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bb2:	7af9      	ldrb	r1, [r7, #11]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	f7fa fff0 	bl	8004b9c <HAL_PCD_EP_Receive>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f81a 	bl	8009bfc <USBD_Get_USB_Status>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009bcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009be8:	78fa      	ldrb	r2, [r7, #3]
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fb f820 	bl	8004c32 <HAL_PCD_EP_GetRxCount>
 8009bf2:	4603      	mov	r3, r0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d817      	bhi.n	8009c40 <USBD_Get_USB_Status+0x44>
 8009c10:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <USBD_Get_USB_Status+0x1c>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009c29 	.word	0x08009c29
 8009c1c:	08009c2f 	.word	0x08009c2f
 8009c20:	08009c35 	.word	0x08009c35
 8009c24:	08009c3b 	.word	0x08009c3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2c:	e00b      	b.n	8009c46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	73fb      	strb	r3, [r7, #15]
    break;
 8009c32:	e008      	b.n	8009c46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	e005      	b.n	8009c46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3e:	e002      	b.n	8009c46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	73fb      	strb	r3, [r7, #15]
    break;
 8009c44:	bf00      	nop
  }
  return usb_status;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <__errno>:
 8009c54:	4b01      	ldr	r3, [pc, #4]	; (8009c5c <__errno+0x8>)
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000180 	.word	0x20000180

08009c60 <__libc_init_array>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	4e0d      	ldr	r6, [pc, #52]	; (8009c98 <__libc_init_array+0x38>)
 8009c64:	4c0d      	ldr	r4, [pc, #52]	; (8009c9c <__libc_init_array+0x3c>)
 8009c66:	1ba4      	subs	r4, r4, r6
 8009c68:	10a4      	asrs	r4, r4, #2
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	42a5      	cmp	r5, r4
 8009c6e:	d109      	bne.n	8009c84 <__libc_init_array+0x24>
 8009c70:	4e0b      	ldr	r6, [pc, #44]	; (8009ca0 <__libc_init_array+0x40>)
 8009c72:	4c0c      	ldr	r4, [pc, #48]	; (8009ca4 <__libc_init_array+0x44>)
 8009c74:	f002 fefc 	bl	800ca70 <_init>
 8009c78:	1ba4      	subs	r4, r4, r6
 8009c7a:	10a4      	asrs	r4, r4, #2
 8009c7c:	2500      	movs	r5, #0
 8009c7e:	42a5      	cmp	r5, r4
 8009c80:	d105      	bne.n	8009c8e <__libc_init_array+0x2e>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c88:	4798      	blx	r3
 8009c8a:	3501      	adds	r5, #1
 8009c8c:	e7ee      	b.n	8009c6c <__libc_init_array+0xc>
 8009c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c92:	4798      	blx	r3
 8009c94:	3501      	adds	r5, #1
 8009c96:	e7f2      	b.n	8009c7e <__libc_init_array+0x1e>
 8009c98:	0800d138 	.word	0x0800d138
 8009c9c:	0800d138 	.word	0x0800d138
 8009ca0:	0800d138 	.word	0x0800d138
 8009ca4:	0800d13c 	.word	0x0800d13c

08009ca8 <malloc>:
 8009ca8:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <malloc+0xc>)
 8009caa:	4601      	mov	r1, r0
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	f000 b861 	b.w	8009d74 <_malloc_r>
 8009cb2:	bf00      	nop
 8009cb4:	20000180 	.word	0x20000180

08009cb8 <free>:
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <free+0xc>)
 8009cba:	4601      	mov	r1, r0
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f000 b80b 	b.w	8009cd8 <_free_r>
 8009cc2:	bf00      	nop
 8009cc4:	20000180 	.word	0x20000180

08009cc8 <memset>:
 8009cc8:	4402      	add	r2, r0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d100      	bne.n	8009cd2 <memset+0xa>
 8009cd0:	4770      	bx	lr
 8009cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd6:	e7f9      	b.n	8009ccc <memset+0x4>

08009cd8 <_free_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4605      	mov	r5, r0
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	d045      	beq.n	8009d6c <_free_r+0x94>
 8009ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ce4:	1f0c      	subs	r4, r1, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bfb8      	it	lt
 8009cea:	18e4      	addlt	r4, r4, r3
 8009cec:	f001 fb97 	bl	800b41e <__malloc_lock>
 8009cf0:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <_free_r+0x98>)
 8009cf2:	6813      	ldr	r3, [r2, #0]
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	b933      	cbnz	r3, 8009d06 <_free_r+0x2e>
 8009cf8:	6063      	str	r3, [r4, #4]
 8009cfa:	6014      	str	r4, [r2, #0]
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d02:	f001 bb8d 	b.w	800b420 <__malloc_unlock>
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	d90c      	bls.n	8009d24 <_free_r+0x4c>
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	1862      	adds	r2, r4, r1
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	bf04      	itt	eq
 8009d12:	681a      	ldreq	r2, [r3, #0]
 8009d14:	685b      	ldreq	r3, [r3, #4]
 8009d16:	6063      	str	r3, [r4, #4]
 8009d18:	bf04      	itt	eq
 8009d1a:	1852      	addeq	r2, r2, r1
 8009d1c:	6022      	streq	r2, [r4, #0]
 8009d1e:	6004      	str	r4, [r0, #0]
 8009d20:	e7ec      	b.n	8009cfc <_free_r+0x24>
 8009d22:	4613      	mov	r3, r2
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	b10a      	cbz	r2, 8009d2c <_free_r+0x54>
 8009d28:	42a2      	cmp	r2, r4
 8009d2a:	d9fa      	bls.n	8009d22 <_free_r+0x4a>
 8009d2c:	6819      	ldr	r1, [r3, #0]
 8009d2e:	1858      	adds	r0, r3, r1
 8009d30:	42a0      	cmp	r0, r4
 8009d32:	d10b      	bne.n	8009d4c <_free_r+0x74>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	4401      	add	r1, r0
 8009d38:	1858      	adds	r0, r3, r1
 8009d3a:	4282      	cmp	r2, r0
 8009d3c:	6019      	str	r1, [r3, #0]
 8009d3e:	d1dd      	bne.n	8009cfc <_free_r+0x24>
 8009d40:	6810      	ldr	r0, [r2, #0]
 8009d42:	6852      	ldr	r2, [r2, #4]
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	4401      	add	r1, r0
 8009d48:	6019      	str	r1, [r3, #0]
 8009d4a:	e7d7      	b.n	8009cfc <_free_r+0x24>
 8009d4c:	d902      	bls.n	8009d54 <_free_r+0x7c>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	602b      	str	r3, [r5, #0]
 8009d52:	e7d3      	b.n	8009cfc <_free_r+0x24>
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	1821      	adds	r1, r4, r0
 8009d58:	428a      	cmp	r2, r1
 8009d5a:	bf04      	itt	eq
 8009d5c:	6811      	ldreq	r1, [r2, #0]
 8009d5e:	6852      	ldreq	r2, [r2, #4]
 8009d60:	6062      	str	r2, [r4, #4]
 8009d62:	bf04      	itt	eq
 8009d64:	1809      	addeq	r1, r1, r0
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	605c      	str	r4, [r3, #4]
 8009d6a:	e7c7      	b.n	8009cfc <_free_r+0x24>
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000374 	.word	0x20000374

08009d74 <_malloc_r>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	1ccd      	adds	r5, r1, #3
 8009d78:	f025 0503 	bic.w	r5, r5, #3
 8009d7c:	3508      	adds	r5, #8
 8009d7e:	2d0c      	cmp	r5, #12
 8009d80:	bf38      	it	cc
 8009d82:	250c      	movcc	r5, #12
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	4606      	mov	r6, r0
 8009d88:	db01      	blt.n	8009d8e <_malloc_r+0x1a>
 8009d8a:	42a9      	cmp	r1, r5
 8009d8c:	d903      	bls.n	8009d96 <_malloc_r+0x22>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	2000      	movs	r0, #0
 8009d94:	bd70      	pop	{r4, r5, r6, pc}
 8009d96:	f001 fb42 	bl	800b41e <__malloc_lock>
 8009d9a:	4a21      	ldr	r2, [pc, #132]	; (8009e20 <_malloc_r+0xac>)
 8009d9c:	6814      	ldr	r4, [r2, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	b991      	cbnz	r1, 8009dc8 <_malloc_r+0x54>
 8009da2:	4c20      	ldr	r4, [pc, #128]	; (8009e24 <_malloc_r+0xb0>)
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	b91b      	cbnz	r3, 8009db0 <_malloc_r+0x3c>
 8009da8:	4630      	mov	r0, r6
 8009daa:	f000 fc99 	bl	800a6e0 <_sbrk_r>
 8009dae:	6020      	str	r0, [r4, #0]
 8009db0:	4629      	mov	r1, r5
 8009db2:	4630      	mov	r0, r6
 8009db4:	f000 fc94 	bl	800a6e0 <_sbrk_r>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d124      	bne.n	8009e06 <_malloc_r+0x92>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	6033      	str	r3, [r6, #0]
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f001 fb2d 	bl	800b420 <__malloc_unlock>
 8009dc6:	e7e4      	b.n	8009d92 <_malloc_r+0x1e>
 8009dc8:	680b      	ldr	r3, [r1, #0]
 8009dca:	1b5b      	subs	r3, r3, r5
 8009dcc:	d418      	bmi.n	8009e00 <_malloc_r+0x8c>
 8009dce:	2b0b      	cmp	r3, #11
 8009dd0:	d90f      	bls.n	8009df2 <_malloc_r+0x7e>
 8009dd2:	600b      	str	r3, [r1, #0]
 8009dd4:	50cd      	str	r5, [r1, r3]
 8009dd6:	18cc      	adds	r4, r1, r3
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f001 fb21 	bl	800b420 <__malloc_unlock>
 8009dde:	f104 000b 	add.w	r0, r4, #11
 8009de2:	1d23      	adds	r3, r4, #4
 8009de4:	f020 0007 	bic.w	r0, r0, #7
 8009de8:	1ac3      	subs	r3, r0, r3
 8009dea:	d0d3      	beq.n	8009d94 <_malloc_r+0x20>
 8009dec:	425a      	negs	r2, r3
 8009dee:	50e2      	str	r2, [r4, r3]
 8009df0:	e7d0      	b.n	8009d94 <_malloc_r+0x20>
 8009df2:	428c      	cmp	r4, r1
 8009df4:	684b      	ldr	r3, [r1, #4]
 8009df6:	bf16      	itet	ne
 8009df8:	6063      	strne	r3, [r4, #4]
 8009dfa:	6013      	streq	r3, [r2, #0]
 8009dfc:	460c      	movne	r4, r1
 8009dfe:	e7eb      	b.n	8009dd8 <_malloc_r+0x64>
 8009e00:	460c      	mov	r4, r1
 8009e02:	6849      	ldr	r1, [r1, #4]
 8009e04:	e7cc      	b.n	8009da0 <_malloc_r+0x2c>
 8009e06:	1cc4      	adds	r4, r0, #3
 8009e08:	f024 0403 	bic.w	r4, r4, #3
 8009e0c:	42a0      	cmp	r0, r4
 8009e0e:	d005      	beq.n	8009e1c <_malloc_r+0xa8>
 8009e10:	1a21      	subs	r1, r4, r0
 8009e12:	4630      	mov	r0, r6
 8009e14:	f000 fc64 	bl	800a6e0 <_sbrk_r>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d0cf      	beq.n	8009dbc <_malloc_r+0x48>
 8009e1c:	6025      	str	r5, [r4, #0]
 8009e1e:	e7db      	b.n	8009dd8 <_malloc_r+0x64>
 8009e20:	20000374 	.word	0x20000374
 8009e24:	20000378 	.word	0x20000378

08009e28 <__cvt>:
 8009e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	ec55 4b10 	vmov	r4, r5, d0
 8009e30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009e32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	460e      	mov	r6, r1
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	bfb8      	it	lt
 8009e40:	4622      	movlt	r2, r4
 8009e42:	462b      	mov	r3, r5
 8009e44:	f027 0720 	bic.w	r7, r7, #32
 8009e48:	bfbb      	ittet	lt
 8009e4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e4e:	461d      	movlt	r5, r3
 8009e50:	2300      	movge	r3, #0
 8009e52:	232d      	movlt	r3, #45	; 0x2d
 8009e54:	bfb8      	it	lt
 8009e56:	4614      	movlt	r4, r2
 8009e58:	2f46      	cmp	r7, #70	; 0x46
 8009e5a:	700b      	strb	r3, [r1, #0]
 8009e5c:	d004      	beq.n	8009e68 <__cvt+0x40>
 8009e5e:	2f45      	cmp	r7, #69	; 0x45
 8009e60:	d100      	bne.n	8009e64 <__cvt+0x3c>
 8009e62:	3601      	adds	r6, #1
 8009e64:	2102      	movs	r1, #2
 8009e66:	e000      	b.n	8009e6a <__cvt+0x42>
 8009e68:	2103      	movs	r1, #3
 8009e6a:	ab03      	add	r3, sp, #12
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	ab02      	add	r3, sp, #8
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	4632      	mov	r2, r6
 8009e74:	4653      	mov	r3, sl
 8009e76:	ec45 4b10 	vmov	d0, r4, r5
 8009e7a:	f000 fced 	bl	800a858 <_dtoa_r>
 8009e7e:	2f47      	cmp	r7, #71	; 0x47
 8009e80:	4680      	mov	r8, r0
 8009e82:	d102      	bne.n	8009e8a <__cvt+0x62>
 8009e84:	f019 0f01 	tst.w	r9, #1
 8009e88:	d026      	beq.n	8009ed8 <__cvt+0xb0>
 8009e8a:	2f46      	cmp	r7, #70	; 0x46
 8009e8c:	eb08 0906 	add.w	r9, r8, r6
 8009e90:	d111      	bne.n	8009eb6 <__cvt+0x8e>
 8009e92:	f898 3000 	ldrb.w	r3, [r8]
 8009e96:	2b30      	cmp	r3, #48	; 0x30
 8009e98:	d10a      	bne.n	8009eb0 <__cvt+0x88>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea6:	b918      	cbnz	r0, 8009eb0 <__cvt+0x88>
 8009ea8:	f1c6 0601 	rsb	r6, r6, #1
 8009eac:	f8ca 6000 	str.w	r6, [sl]
 8009eb0:	f8da 3000 	ldr.w	r3, [sl]
 8009eb4:	4499      	add	r9, r3
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4620      	mov	r0, r4
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	f7f6 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ec2:	b938      	cbnz	r0, 8009ed4 <__cvt+0xac>
 8009ec4:	2230      	movs	r2, #48	; 0x30
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	454b      	cmp	r3, r9
 8009eca:	d205      	bcs.n	8009ed8 <__cvt+0xb0>
 8009ecc:	1c59      	adds	r1, r3, #1
 8009ece:	9103      	str	r1, [sp, #12]
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e7f8      	b.n	8009ec6 <__cvt+0x9e>
 8009ed4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ed8:	9b03      	ldr	r3, [sp, #12]
 8009eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009edc:	eba3 0308 	sub.w	r3, r3, r8
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	b004      	add	sp, #16
 8009ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009eea <__exponent>:
 8009eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eec:	2900      	cmp	r1, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	bfba      	itte	lt
 8009ef2:	4249      	neglt	r1, r1
 8009ef4:	232d      	movlt	r3, #45	; 0x2d
 8009ef6:	232b      	movge	r3, #43	; 0x2b
 8009ef8:	2909      	cmp	r1, #9
 8009efa:	f804 2b02 	strb.w	r2, [r4], #2
 8009efe:	7043      	strb	r3, [r0, #1]
 8009f00:	dd20      	ble.n	8009f44 <__exponent+0x5a>
 8009f02:	f10d 0307 	add.w	r3, sp, #7
 8009f06:	461f      	mov	r7, r3
 8009f08:	260a      	movs	r6, #10
 8009f0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f0e:	fb06 1115 	mls	r1, r6, r5, r1
 8009f12:	3130      	adds	r1, #48	; 0x30
 8009f14:	2d09      	cmp	r5, #9
 8009f16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f1a:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f1e:	4629      	mov	r1, r5
 8009f20:	dc09      	bgt.n	8009f36 <__exponent+0x4c>
 8009f22:	3130      	adds	r1, #48	; 0x30
 8009f24:	3b02      	subs	r3, #2
 8009f26:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f2a:	42bb      	cmp	r3, r7
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	d304      	bcc.n	8009f3a <__exponent+0x50>
 8009f30:	1a10      	subs	r0, r2, r0
 8009f32:	b003      	add	sp, #12
 8009f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f36:	4613      	mov	r3, r2
 8009f38:	e7e7      	b.n	8009f0a <__exponent+0x20>
 8009f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3e:	f804 2b01 	strb.w	r2, [r4], #1
 8009f42:	e7f2      	b.n	8009f2a <__exponent+0x40>
 8009f44:	2330      	movs	r3, #48	; 0x30
 8009f46:	4419      	add	r1, r3
 8009f48:	7083      	strb	r3, [r0, #2]
 8009f4a:	1d02      	adds	r2, r0, #4
 8009f4c:	70c1      	strb	r1, [r0, #3]
 8009f4e:	e7ef      	b.n	8009f30 <__exponent+0x46>

08009f50 <_printf_float>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	b08d      	sub	sp, #52	; 0x34
 8009f56:	460c      	mov	r4, r1
 8009f58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009f5c:	4616      	mov	r6, r2
 8009f5e:	461f      	mov	r7, r3
 8009f60:	4605      	mov	r5, r0
 8009f62:	f001 fa31 	bl	800b3c8 <_localeconv_r>
 8009f66:	6803      	ldr	r3, [r0, #0]
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7f6 f930 	bl	80001d0 <strlen>
 8009f70:	2300      	movs	r3, #0
 8009f72:	930a      	str	r3, [sp, #40]	; 0x28
 8009f74:	f8d8 3000 	ldr.w	r3, [r8]
 8009f78:	9005      	str	r0, [sp, #20]
 8009f7a:	3307      	adds	r3, #7
 8009f7c:	f023 0307 	bic.w	r3, r3, #7
 8009f80:	f103 0208 	add.w	r2, r3, #8
 8009f84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f88:	f8d4 b000 	ldr.w	fp, [r4]
 8009f8c:	f8c8 2000 	str.w	r2, [r8]
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f98:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fa0:	9307      	str	r3, [sp, #28]
 8009fa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009faa:	4ba7      	ldr	r3, [pc, #668]	; (800a248 <_printf_float+0x2f8>)
 8009fac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fb0:	f7f6 fdbc 	bl	8000b2c <__aeabi_dcmpun>
 8009fb4:	bb70      	cbnz	r0, 800a014 <_printf_float+0xc4>
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	4ba3      	ldr	r3, [pc, #652]	; (800a248 <_printf_float+0x2f8>)
 8009fbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fc0:	f7f6 fd96 	bl	8000af0 <__aeabi_dcmple>
 8009fc4:	bb30      	cbnz	r0, 800a014 <_printf_float+0xc4>
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4640      	mov	r0, r8
 8009fcc:	4649      	mov	r1, r9
 8009fce:	f7f6 fd85 	bl	8000adc <__aeabi_dcmplt>
 8009fd2:	b110      	cbz	r0, 8009fda <_printf_float+0x8a>
 8009fd4:	232d      	movs	r3, #45	; 0x2d
 8009fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fda:	4a9c      	ldr	r2, [pc, #624]	; (800a24c <_printf_float+0x2fc>)
 8009fdc:	4b9c      	ldr	r3, [pc, #624]	; (800a250 <_printf_float+0x300>)
 8009fde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009fe2:	bf8c      	ite	hi
 8009fe4:	4690      	movhi	r8, r2
 8009fe6:	4698      	movls	r8, r3
 8009fe8:	2303      	movs	r3, #3
 8009fea:	f02b 0204 	bic.w	r2, fp, #4
 8009fee:	6123      	str	r3, [r4, #16]
 8009ff0:	6022      	str	r2, [r4, #0]
 8009ff2:	f04f 0900 	mov.w	r9, #0
 8009ff6:	9700      	str	r7, [sp, #0]
 8009ff8:	4633      	mov	r3, r6
 8009ffa:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 f9e6 	bl	800a3d0 <_printf_common>
 800a004:	3001      	adds	r0, #1
 800a006:	f040 808d 	bne.w	800a124 <_printf_float+0x1d4>
 800a00a:	f04f 30ff 	mov.w	r0, #4294967295
 800a00e:	b00d      	add	sp, #52	; 0x34
 800a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 fd86 	bl	8000b2c <__aeabi_dcmpun>
 800a020:	b110      	cbz	r0, 800a028 <_printf_float+0xd8>
 800a022:	4a8c      	ldr	r2, [pc, #560]	; (800a254 <_printf_float+0x304>)
 800a024:	4b8c      	ldr	r3, [pc, #560]	; (800a258 <_printf_float+0x308>)
 800a026:	e7da      	b.n	8009fde <_printf_float+0x8e>
 800a028:	6861      	ldr	r1, [r4, #4]
 800a02a:	1c4b      	adds	r3, r1, #1
 800a02c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a030:	a80a      	add	r0, sp, #40	; 0x28
 800a032:	d13e      	bne.n	800a0b2 <_printf_float+0x162>
 800a034:	2306      	movs	r3, #6
 800a036:	6063      	str	r3, [r4, #4]
 800a038:	2300      	movs	r3, #0
 800a03a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a03e:	ab09      	add	r3, sp, #36	; 0x24
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	ec49 8b10 	vmov	d0, r8, r9
 800a046:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a04a:	6022      	str	r2, [r4, #0]
 800a04c:	f8cd a004 	str.w	sl, [sp, #4]
 800a050:	6861      	ldr	r1, [r4, #4]
 800a052:	4628      	mov	r0, r5
 800a054:	f7ff fee8 	bl	8009e28 <__cvt>
 800a058:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a05c:	2b47      	cmp	r3, #71	; 0x47
 800a05e:	4680      	mov	r8, r0
 800a060:	d109      	bne.n	800a076 <_printf_float+0x126>
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	1cd8      	adds	r0, r3, #3
 800a066:	db02      	blt.n	800a06e <_printf_float+0x11e>
 800a068:	6862      	ldr	r2, [r4, #4]
 800a06a:	4293      	cmp	r3, r2
 800a06c:	dd47      	ble.n	800a0fe <_printf_float+0x1ae>
 800a06e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a072:	fa5f fa8a 	uxtb.w	sl, sl
 800a076:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a07c:	d824      	bhi.n	800a0c8 <_printf_float+0x178>
 800a07e:	3901      	subs	r1, #1
 800a080:	4652      	mov	r2, sl
 800a082:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a086:	9109      	str	r1, [sp, #36]	; 0x24
 800a088:	f7ff ff2f 	bl	8009eea <__exponent>
 800a08c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a08e:	1813      	adds	r3, r2, r0
 800a090:	2a01      	cmp	r2, #1
 800a092:	4681      	mov	r9, r0
 800a094:	6123      	str	r3, [r4, #16]
 800a096:	dc02      	bgt.n	800a09e <_printf_float+0x14e>
 800a098:	6822      	ldr	r2, [r4, #0]
 800a09a:	07d1      	lsls	r1, r2, #31
 800a09c:	d501      	bpl.n	800a0a2 <_printf_float+0x152>
 800a09e:	3301      	adds	r3, #1
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0a5      	beq.n	8009ff6 <_printf_float+0xa6>
 800a0aa:	232d      	movs	r3, #45	; 0x2d
 800a0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b0:	e7a1      	b.n	8009ff6 <_printf_float+0xa6>
 800a0b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a0b6:	f000 8177 	beq.w	800a3a8 <_printf_float+0x458>
 800a0ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a0be:	d1bb      	bne.n	800a038 <_printf_float+0xe8>
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	d1b9      	bne.n	800a038 <_printf_float+0xe8>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e7b6      	b.n	800a036 <_printf_float+0xe6>
 800a0c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a0cc:	d119      	bne.n	800a102 <_printf_float+0x1b2>
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	dd0c      	ble.n	800a0ee <_printf_float+0x19e>
 800a0d4:	6121      	str	r1, [r4, #16]
 800a0d6:	b913      	cbnz	r3, 800a0de <_printf_float+0x18e>
 800a0d8:	6822      	ldr	r2, [r4, #0]
 800a0da:	07d2      	lsls	r2, r2, #31
 800a0dc:	d502      	bpl.n	800a0e4 <_printf_float+0x194>
 800a0de:	3301      	adds	r3, #1
 800a0e0:	440b      	add	r3, r1
 800a0e2:	6123      	str	r3, [r4, #16]
 800a0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0e8:	f04f 0900 	mov.w	r9, #0
 800a0ec:	e7d9      	b.n	800a0a2 <_printf_float+0x152>
 800a0ee:	b913      	cbnz	r3, 800a0f6 <_printf_float+0x1a6>
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	07d0      	lsls	r0, r2, #31
 800a0f4:	d501      	bpl.n	800a0fa <_printf_float+0x1aa>
 800a0f6:	3302      	adds	r3, #2
 800a0f8:	e7f3      	b.n	800a0e2 <_printf_float+0x192>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e7f1      	b.n	800a0e2 <_printf_float+0x192>
 800a0fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a102:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a106:	4293      	cmp	r3, r2
 800a108:	db05      	blt.n	800a116 <_printf_float+0x1c6>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	6123      	str	r3, [r4, #16]
 800a10e:	07d1      	lsls	r1, r2, #31
 800a110:	d5e8      	bpl.n	800a0e4 <_printf_float+0x194>
 800a112:	3301      	adds	r3, #1
 800a114:	e7e5      	b.n	800a0e2 <_printf_float+0x192>
 800a116:	2b00      	cmp	r3, #0
 800a118:	bfd4      	ite	le
 800a11a:	f1c3 0302 	rsble	r3, r3, #2
 800a11e:	2301      	movgt	r3, #1
 800a120:	4413      	add	r3, r2
 800a122:	e7de      	b.n	800a0e2 <_printf_float+0x192>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	055a      	lsls	r2, r3, #21
 800a128:	d407      	bmi.n	800a13a <_printf_float+0x1ea>
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	4642      	mov	r2, r8
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	d12b      	bne.n	800a190 <_printf_float+0x240>
 800a138:	e767      	b.n	800a00a <_printf_float+0xba>
 800a13a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a13e:	f240 80dc 	bls.w	800a2fa <_printf_float+0x3aa>
 800a142:	2200      	movs	r2, #0
 800a144:	2300      	movs	r3, #0
 800a146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a14a:	f7f6 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d033      	beq.n	800a1ba <_printf_float+0x26a>
 800a152:	2301      	movs	r3, #1
 800a154:	4a41      	ldr	r2, [pc, #260]	; (800a25c <_printf_float+0x30c>)
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f af54 	beq.w	800a00a <_printf_float+0xba>
 800a162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a166:	429a      	cmp	r2, r3
 800a168:	db02      	blt.n	800a170 <_printf_float+0x220>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	07d8      	lsls	r0, r3, #31
 800a16e:	d50f      	bpl.n	800a190 <_printf_float+0x240>
 800a170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a174:	4631      	mov	r1, r6
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	f43f af45 	beq.w	800a00a <_printf_float+0xba>
 800a180:	f04f 0800 	mov.w	r8, #0
 800a184:	f104 091a 	add.w	r9, r4, #26
 800a188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18a:	3b01      	subs	r3, #1
 800a18c:	4543      	cmp	r3, r8
 800a18e:	dc09      	bgt.n	800a1a4 <_printf_float+0x254>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	079b      	lsls	r3, r3, #30
 800a194:	f100 8103 	bmi.w	800a39e <_printf_float+0x44e>
 800a198:	68e0      	ldr	r0, [r4, #12]
 800a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19c:	4298      	cmp	r0, r3
 800a19e:	bfb8      	it	lt
 800a1a0:	4618      	movlt	r0, r3
 800a1a2:	e734      	b.n	800a00e <_printf_float+0xbe>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	464a      	mov	r2, r9
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af2b 	beq.w	800a00a <_printf_float+0xba>
 800a1b4:	f108 0801 	add.w	r8, r8, #1
 800a1b8:	e7e6      	b.n	800a188 <_printf_float+0x238>
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc2b      	bgt.n	800a218 <_printf_float+0x2c8>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4a26      	ldr	r2, [pc, #152]	; (800a25c <_printf_float+0x30c>)
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b8      	blx	r7
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f43f af1d 	beq.w	800a00a <_printf_float+0xba>
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	b923      	cbnz	r3, 800a1de <_printf_float+0x28e>
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d6:	b913      	cbnz	r3, 800a1de <_printf_float+0x28e>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	07d9      	lsls	r1, r3, #31
 800a1dc:	d5d8      	bpl.n	800a190 <_printf_float+0x240>
 800a1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b8      	blx	r7
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	f43f af0e 	beq.w	800a00a <_printf_float+0xba>
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	f104 0a1a 	add.w	sl, r4, #26
 800a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f8:	425b      	negs	r3, r3
 800a1fa:	454b      	cmp	r3, r9
 800a1fc:	dc01      	bgt.n	800a202 <_printf_float+0x2b2>
 800a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a200:	e794      	b.n	800a12c <_printf_float+0x1dc>
 800a202:	2301      	movs	r3, #1
 800a204:	4652      	mov	r2, sl
 800a206:	4631      	mov	r1, r6
 800a208:	4628      	mov	r0, r5
 800a20a:	47b8      	blx	r7
 800a20c:	3001      	adds	r0, #1
 800a20e:	f43f aefc 	beq.w	800a00a <_printf_float+0xba>
 800a212:	f109 0901 	add.w	r9, r9, #1
 800a216:	e7ee      	b.n	800a1f6 <_printf_float+0x2a6>
 800a218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a21c:	429a      	cmp	r2, r3
 800a21e:	bfa8      	it	ge
 800a220:	461a      	movge	r2, r3
 800a222:	2a00      	cmp	r2, #0
 800a224:	4691      	mov	r9, r2
 800a226:	dd07      	ble.n	800a238 <_printf_float+0x2e8>
 800a228:	4613      	mov	r3, r2
 800a22a:	4631      	mov	r1, r6
 800a22c:	4642      	mov	r2, r8
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	f43f aee9 	beq.w	800a00a <_printf_float+0xba>
 800a238:	f104 031a 	add.w	r3, r4, #26
 800a23c:	f04f 0b00 	mov.w	fp, #0
 800a240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a244:	9306      	str	r3, [sp, #24]
 800a246:	e015      	b.n	800a274 <_printf_float+0x324>
 800a248:	7fefffff 	.word	0x7fefffff
 800a24c:	0800cb08 	.word	0x0800cb08
 800a250:	0800cb04 	.word	0x0800cb04
 800a254:	0800cb10 	.word	0x0800cb10
 800a258:	0800cb0c 	.word	0x0800cb0c
 800a25c:	0800cb14 	.word	0x0800cb14
 800a260:	2301      	movs	r3, #1
 800a262:	9a06      	ldr	r2, [sp, #24]
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	f43f aecd 	beq.w	800a00a <_printf_float+0xba>
 800a270:	f10b 0b01 	add.w	fp, fp, #1
 800a274:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a278:	ebaa 0309 	sub.w	r3, sl, r9
 800a27c:	455b      	cmp	r3, fp
 800a27e:	dcef      	bgt.n	800a260 <_printf_float+0x310>
 800a280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a284:	429a      	cmp	r2, r3
 800a286:	44d0      	add	r8, sl
 800a288:	db15      	blt.n	800a2b6 <_printf_float+0x366>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	07da      	lsls	r2, r3, #31
 800a28e:	d412      	bmi.n	800a2b6 <_printf_float+0x366>
 800a290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a292:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a294:	eba3 020a 	sub.w	r2, r3, sl
 800a298:	eba3 0a01 	sub.w	sl, r3, r1
 800a29c:	4592      	cmp	sl, r2
 800a29e:	bfa8      	it	ge
 800a2a0:	4692      	movge	sl, r2
 800a2a2:	f1ba 0f00 	cmp.w	sl, #0
 800a2a6:	dc0e      	bgt.n	800a2c6 <_printf_float+0x376>
 800a2a8:	f04f 0800 	mov.w	r8, #0
 800a2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2b0:	f104 091a 	add.w	r9, r4, #26
 800a2b4:	e019      	b.n	800a2ea <_printf_float+0x39a>
 800a2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b8      	blx	r7
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d1e5      	bne.n	800a290 <_printf_float+0x340>
 800a2c4:	e6a1      	b.n	800a00a <_printf_float+0xba>
 800a2c6:	4653      	mov	r3, sl
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b8      	blx	r7
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d1e9      	bne.n	800a2a8 <_printf_float+0x358>
 800a2d4:	e699      	b.n	800a00a <_printf_float+0xba>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	464a      	mov	r2, r9
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b8      	blx	r7
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f43f ae92 	beq.w	800a00a <_printf_float+0xba>
 800a2e6:	f108 0801 	add.w	r8, r8, #1
 800a2ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2ee:	1a9b      	subs	r3, r3, r2
 800a2f0:	eba3 030a 	sub.w	r3, r3, sl
 800a2f4:	4543      	cmp	r3, r8
 800a2f6:	dcee      	bgt.n	800a2d6 <_printf_float+0x386>
 800a2f8:	e74a      	b.n	800a190 <_printf_float+0x240>
 800a2fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2fc:	2a01      	cmp	r2, #1
 800a2fe:	dc01      	bgt.n	800a304 <_printf_float+0x3b4>
 800a300:	07db      	lsls	r3, r3, #31
 800a302:	d53a      	bpl.n	800a37a <_printf_float+0x42a>
 800a304:	2301      	movs	r3, #1
 800a306:	4642      	mov	r2, r8
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	f43f ae7b 	beq.w	800a00a <_printf_float+0xba>
 800a314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	f108 0801 	add.w	r8, r8, #1
 800a324:	f43f ae71 	beq.w	800a00a <_printf_float+0xba>
 800a328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32a:	2200      	movs	r2, #0
 800a32c:	f103 3aff 	add.w	sl, r3, #4294967295
 800a330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a334:	2300      	movs	r3, #0
 800a336:	f7f6 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a33a:	b9c8      	cbnz	r0, 800a370 <_printf_float+0x420>
 800a33c:	4653      	mov	r3, sl
 800a33e:	4642      	mov	r2, r8
 800a340:	4631      	mov	r1, r6
 800a342:	4628      	mov	r0, r5
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	d10e      	bne.n	800a368 <_printf_float+0x418>
 800a34a:	e65e      	b.n	800a00a <_printf_float+0xba>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4652      	mov	r2, sl
 800a350:	4631      	mov	r1, r6
 800a352:	4628      	mov	r0, r5
 800a354:	47b8      	blx	r7
 800a356:	3001      	adds	r0, #1
 800a358:	f43f ae57 	beq.w	800a00a <_printf_float+0xba>
 800a35c:	f108 0801 	add.w	r8, r8, #1
 800a360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a362:	3b01      	subs	r3, #1
 800a364:	4543      	cmp	r3, r8
 800a366:	dcf1      	bgt.n	800a34c <_printf_float+0x3fc>
 800a368:	464b      	mov	r3, r9
 800a36a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a36e:	e6de      	b.n	800a12e <_printf_float+0x1de>
 800a370:	f04f 0800 	mov.w	r8, #0
 800a374:	f104 0a1a 	add.w	sl, r4, #26
 800a378:	e7f2      	b.n	800a360 <_printf_float+0x410>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e7df      	b.n	800a33e <_printf_float+0x3ee>
 800a37e:	2301      	movs	r3, #1
 800a380:	464a      	mov	r2, r9
 800a382:	4631      	mov	r1, r6
 800a384:	4628      	mov	r0, r5
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f ae3e 	beq.w	800a00a <_printf_float+0xba>
 800a38e:	f108 0801 	add.w	r8, r8, #1
 800a392:	68e3      	ldr	r3, [r4, #12]
 800a394:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	4543      	cmp	r3, r8
 800a39a:	dcf0      	bgt.n	800a37e <_printf_float+0x42e>
 800a39c:	e6fc      	b.n	800a198 <_printf_float+0x248>
 800a39e:	f04f 0800 	mov.w	r8, #0
 800a3a2:	f104 0919 	add.w	r9, r4, #25
 800a3a6:	e7f4      	b.n	800a392 <_printf_float+0x442>
 800a3a8:	2900      	cmp	r1, #0
 800a3aa:	f43f ae8b 	beq.w	800a0c4 <_printf_float+0x174>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3b4:	ab09      	add	r3, sp, #36	; 0x24
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	ec49 8b10 	vmov	d0, r8, r9
 800a3bc:	6022      	str	r2, [r4, #0]
 800a3be:	f8cd a004 	str.w	sl, [sp, #4]
 800a3c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f7ff fd2e 	bl	8009e28 <__cvt>
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	e648      	b.n	800a062 <_printf_float+0x112>

0800a3d0 <_printf_common>:
 800a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	4691      	mov	r9, r2
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	688a      	ldr	r2, [r1, #8]
 800a3da:	690b      	ldr	r3, [r1, #16]
 800a3dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bfb8      	it	lt
 800a3e4:	4613      	movlt	r3, r2
 800a3e6:	f8c9 3000 	str.w	r3, [r9]
 800a3ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	b112      	cbz	r2, 800a3fa <_printf_common+0x2a>
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	f8c9 3000 	str.w	r3, [r9]
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	0699      	lsls	r1, r3, #26
 800a3fe:	bf42      	ittt	mi
 800a400:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a404:	3302      	addmi	r3, #2
 800a406:	f8c9 3000 	strmi.w	r3, [r9]
 800a40a:	6825      	ldr	r5, [r4, #0]
 800a40c:	f015 0506 	ands.w	r5, r5, #6
 800a410:	d107      	bne.n	800a422 <_printf_common+0x52>
 800a412:	f104 0a19 	add.w	sl, r4, #25
 800a416:	68e3      	ldr	r3, [r4, #12]
 800a418:	f8d9 2000 	ldr.w	r2, [r9]
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	42ab      	cmp	r3, r5
 800a420:	dc28      	bgt.n	800a474 <_printf_common+0xa4>
 800a422:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	3300      	adds	r3, #0
 800a42a:	bf18      	it	ne
 800a42c:	2301      	movne	r3, #1
 800a42e:	0692      	lsls	r2, r2, #26
 800a430:	d42d      	bmi.n	800a48e <_printf_common+0xbe>
 800a432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a436:	4639      	mov	r1, r7
 800a438:	4630      	mov	r0, r6
 800a43a:	47c0      	blx	r8
 800a43c:	3001      	adds	r0, #1
 800a43e:	d020      	beq.n	800a482 <_printf_common+0xb2>
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	68e5      	ldr	r5, [r4, #12]
 800a444:	f8d9 2000 	ldr.w	r2, [r9]
 800a448:	f003 0306 	and.w	r3, r3, #6
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	bf08      	it	eq
 800a450:	1aad      	subeq	r5, r5, r2
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	6922      	ldr	r2, [r4, #16]
 800a456:	bf0c      	ite	eq
 800a458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a45c:	2500      	movne	r5, #0
 800a45e:	4293      	cmp	r3, r2
 800a460:	bfc4      	itt	gt
 800a462:	1a9b      	subgt	r3, r3, r2
 800a464:	18ed      	addgt	r5, r5, r3
 800a466:	f04f 0900 	mov.w	r9, #0
 800a46a:	341a      	adds	r4, #26
 800a46c:	454d      	cmp	r5, r9
 800a46e:	d11a      	bne.n	800a4a6 <_printf_common+0xd6>
 800a470:	2000      	movs	r0, #0
 800a472:	e008      	b.n	800a486 <_printf_common+0xb6>
 800a474:	2301      	movs	r3, #1
 800a476:	4652      	mov	r2, sl
 800a478:	4639      	mov	r1, r7
 800a47a:	4630      	mov	r0, r6
 800a47c:	47c0      	blx	r8
 800a47e:	3001      	adds	r0, #1
 800a480:	d103      	bne.n	800a48a <_printf_common+0xba>
 800a482:	f04f 30ff 	mov.w	r0, #4294967295
 800a486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48a:	3501      	adds	r5, #1
 800a48c:	e7c3      	b.n	800a416 <_printf_common+0x46>
 800a48e:	18e1      	adds	r1, r4, r3
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	2030      	movs	r0, #48	; 0x30
 800a494:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a498:	4422      	add	r2, r4
 800a49a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a49e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4a2:	3302      	adds	r3, #2
 800a4a4:	e7c5      	b.n	800a432 <_printf_common+0x62>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	47c0      	blx	r8
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d0e6      	beq.n	800a482 <_printf_common+0xb2>
 800a4b4:	f109 0901 	add.w	r9, r9, #1
 800a4b8:	e7d8      	b.n	800a46c <_printf_common+0x9c>
	...

0800a4bc <_printf_i>:
 800a4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	7e09      	ldrb	r1, [r1, #24]
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	296e      	cmp	r1, #110	; 0x6e
 800a4cc:	4617      	mov	r7, r2
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	4698      	mov	r8, r3
 800a4d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d4:	f000 80b3 	beq.w	800a63e <_printf_i+0x182>
 800a4d8:	d822      	bhi.n	800a520 <_printf_i+0x64>
 800a4da:	2963      	cmp	r1, #99	; 0x63
 800a4dc:	d036      	beq.n	800a54c <_printf_i+0x90>
 800a4de:	d80a      	bhi.n	800a4f6 <_printf_i+0x3a>
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	f000 80b9 	beq.w	800a658 <_printf_i+0x19c>
 800a4e6:	2958      	cmp	r1, #88	; 0x58
 800a4e8:	f000 8083 	beq.w	800a5f2 <_printf_i+0x136>
 800a4ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a4f4:	e032      	b.n	800a55c <_printf_i+0xa0>
 800a4f6:	2964      	cmp	r1, #100	; 0x64
 800a4f8:	d001      	beq.n	800a4fe <_printf_i+0x42>
 800a4fa:	2969      	cmp	r1, #105	; 0x69
 800a4fc:	d1f6      	bne.n	800a4ec <_printf_i+0x30>
 800a4fe:	6820      	ldr	r0, [r4, #0]
 800a500:	6813      	ldr	r3, [r2, #0]
 800a502:	0605      	lsls	r5, r0, #24
 800a504:	f103 0104 	add.w	r1, r3, #4
 800a508:	d52a      	bpl.n	800a560 <_printf_i+0xa4>
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	da03      	bge.n	800a51a <_printf_i+0x5e>
 800a512:	222d      	movs	r2, #45	; 0x2d
 800a514:	425b      	negs	r3, r3
 800a516:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a51a:	486f      	ldr	r0, [pc, #444]	; (800a6d8 <_printf_i+0x21c>)
 800a51c:	220a      	movs	r2, #10
 800a51e:	e039      	b.n	800a594 <_printf_i+0xd8>
 800a520:	2973      	cmp	r1, #115	; 0x73
 800a522:	f000 809d 	beq.w	800a660 <_printf_i+0x1a4>
 800a526:	d808      	bhi.n	800a53a <_printf_i+0x7e>
 800a528:	296f      	cmp	r1, #111	; 0x6f
 800a52a:	d020      	beq.n	800a56e <_printf_i+0xb2>
 800a52c:	2970      	cmp	r1, #112	; 0x70
 800a52e:	d1dd      	bne.n	800a4ec <_printf_i+0x30>
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	f043 0320 	orr.w	r3, r3, #32
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	e003      	b.n	800a542 <_printf_i+0x86>
 800a53a:	2975      	cmp	r1, #117	; 0x75
 800a53c:	d017      	beq.n	800a56e <_printf_i+0xb2>
 800a53e:	2978      	cmp	r1, #120	; 0x78
 800a540:	d1d4      	bne.n	800a4ec <_printf_i+0x30>
 800a542:	2378      	movs	r3, #120	; 0x78
 800a544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a548:	4864      	ldr	r0, [pc, #400]	; (800a6dc <_printf_i+0x220>)
 800a54a:	e055      	b.n	800a5f8 <_printf_i+0x13c>
 800a54c:	6813      	ldr	r3, [r2, #0]
 800a54e:	1d19      	adds	r1, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6011      	str	r1, [r2, #0]
 800a554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a55c:	2301      	movs	r3, #1
 800a55e:	e08c      	b.n	800a67a <_printf_i+0x1be>
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6011      	str	r1, [r2, #0]
 800a564:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a568:	bf18      	it	ne
 800a56a:	b21b      	sxthne	r3, r3
 800a56c:	e7cf      	b.n	800a50e <_printf_i+0x52>
 800a56e:	6813      	ldr	r3, [r2, #0]
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	1d18      	adds	r0, r3, #4
 800a574:	6010      	str	r0, [r2, #0]
 800a576:	0628      	lsls	r0, r5, #24
 800a578:	d501      	bpl.n	800a57e <_printf_i+0xc2>
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	e002      	b.n	800a584 <_printf_i+0xc8>
 800a57e:	0668      	lsls	r0, r5, #25
 800a580:	d5fb      	bpl.n	800a57a <_printf_i+0xbe>
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	4854      	ldr	r0, [pc, #336]	; (800a6d8 <_printf_i+0x21c>)
 800a586:	296f      	cmp	r1, #111	; 0x6f
 800a588:	bf14      	ite	ne
 800a58a:	220a      	movne	r2, #10
 800a58c:	2208      	moveq	r2, #8
 800a58e:	2100      	movs	r1, #0
 800a590:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a594:	6865      	ldr	r5, [r4, #4]
 800a596:	60a5      	str	r5, [r4, #8]
 800a598:	2d00      	cmp	r5, #0
 800a59a:	f2c0 8095 	blt.w	800a6c8 <_printf_i+0x20c>
 800a59e:	6821      	ldr	r1, [r4, #0]
 800a5a0:	f021 0104 	bic.w	r1, r1, #4
 800a5a4:	6021      	str	r1, [r4, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d13d      	bne.n	800a626 <_printf_i+0x16a>
 800a5aa:	2d00      	cmp	r5, #0
 800a5ac:	f040 808e 	bne.w	800a6cc <_printf_i+0x210>
 800a5b0:	4665      	mov	r5, ip
 800a5b2:	2a08      	cmp	r2, #8
 800a5b4:	d10b      	bne.n	800a5ce <_printf_i+0x112>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	07db      	lsls	r3, r3, #31
 800a5ba:	d508      	bpl.n	800a5ce <_printf_i+0x112>
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	6862      	ldr	r2, [r4, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	bfde      	ittt	le
 800a5c4:	2330      	movle	r3, #48	; 0x30
 800a5c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5ce:	ebac 0305 	sub.w	r3, ip, r5
 800a5d2:	6123      	str	r3, [r4, #16]
 800a5d4:	f8cd 8000 	str.w	r8, [sp]
 800a5d8:	463b      	mov	r3, r7
 800a5da:	aa03      	add	r2, sp, #12
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff fef6 	bl	800a3d0 <_printf_common>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d14d      	bne.n	800a684 <_printf_i+0x1c8>
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	b005      	add	sp, #20
 800a5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5f2:	4839      	ldr	r0, [pc, #228]	; (800a6d8 <_printf_i+0x21c>)
 800a5f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a5f8:	6813      	ldr	r3, [r2, #0]
 800a5fa:	6821      	ldr	r1, [r4, #0]
 800a5fc:	1d1d      	adds	r5, r3, #4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6015      	str	r5, [r2, #0]
 800a602:	060a      	lsls	r2, r1, #24
 800a604:	d50b      	bpl.n	800a61e <_printf_i+0x162>
 800a606:	07ca      	lsls	r2, r1, #31
 800a608:	bf44      	itt	mi
 800a60a:	f041 0120 	orrmi.w	r1, r1, #32
 800a60e:	6021      	strmi	r1, [r4, #0]
 800a610:	b91b      	cbnz	r3, 800a61a <_printf_i+0x15e>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	f022 0220 	bic.w	r2, r2, #32
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	2210      	movs	r2, #16
 800a61c:	e7b7      	b.n	800a58e <_printf_i+0xd2>
 800a61e:	064d      	lsls	r5, r1, #25
 800a620:	bf48      	it	mi
 800a622:	b29b      	uxthmi	r3, r3
 800a624:	e7ef      	b.n	800a606 <_printf_i+0x14a>
 800a626:	4665      	mov	r5, ip
 800a628:	fbb3 f1f2 	udiv	r1, r3, r2
 800a62c:	fb02 3311 	mls	r3, r2, r1, r3
 800a630:	5cc3      	ldrb	r3, [r0, r3]
 800a632:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a636:	460b      	mov	r3, r1
 800a638:	2900      	cmp	r1, #0
 800a63a:	d1f5      	bne.n	800a628 <_printf_i+0x16c>
 800a63c:	e7b9      	b.n	800a5b2 <_printf_i+0xf6>
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	6825      	ldr	r5, [r4, #0]
 800a642:	6961      	ldr	r1, [r4, #20]
 800a644:	1d18      	adds	r0, r3, #4
 800a646:	6010      	str	r0, [r2, #0]
 800a648:	0628      	lsls	r0, r5, #24
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	d501      	bpl.n	800a652 <_printf_i+0x196>
 800a64e:	6019      	str	r1, [r3, #0]
 800a650:	e002      	b.n	800a658 <_printf_i+0x19c>
 800a652:	066a      	lsls	r2, r5, #25
 800a654:	d5fb      	bpl.n	800a64e <_printf_i+0x192>
 800a656:	8019      	strh	r1, [r3, #0]
 800a658:	2300      	movs	r3, #0
 800a65a:	6123      	str	r3, [r4, #16]
 800a65c:	4665      	mov	r5, ip
 800a65e:	e7b9      	b.n	800a5d4 <_printf_i+0x118>
 800a660:	6813      	ldr	r3, [r2, #0]
 800a662:	1d19      	adds	r1, r3, #4
 800a664:	6011      	str	r1, [r2, #0]
 800a666:	681d      	ldr	r5, [r3, #0]
 800a668:	6862      	ldr	r2, [r4, #4]
 800a66a:	2100      	movs	r1, #0
 800a66c:	4628      	mov	r0, r5
 800a66e:	f7f5 fdb7 	bl	80001e0 <memchr>
 800a672:	b108      	cbz	r0, 800a678 <_printf_i+0x1bc>
 800a674:	1b40      	subs	r0, r0, r5
 800a676:	6060      	str	r0, [r4, #4]
 800a678:	6863      	ldr	r3, [r4, #4]
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	2300      	movs	r3, #0
 800a67e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a682:	e7a7      	b.n	800a5d4 <_printf_i+0x118>
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	462a      	mov	r2, r5
 800a688:	4639      	mov	r1, r7
 800a68a:	4630      	mov	r0, r6
 800a68c:	47c0      	blx	r8
 800a68e:	3001      	adds	r0, #1
 800a690:	d0aa      	beq.n	800a5e8 <_printf_i+0x12c>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	079b      	lsls	r3, r3, #30
 800a696:	d413      	bmi.n	800a6c0 <_printf_i+0x204>
 800a698:	68e0      	ldr	r0, [r4, #12]
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	4298      	cmp	r0, r3
 800a69e:	bfb8      	it	lt
 800a6a0:	4618      	movlt	r0, r3
 800a6a2:	e7a3      	b.n	800a5ec <_printf_i+0x130>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	464a      	mov	r2, r9
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	47c0      	blx	r8
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d09a      	beq.n	800a5e8 <_printf_i+0x12c>
 800a6b2:	3501      	adds	r5, #1
 800a6b4:	68e3      	ldr	r3, [r4, #12]
 800a6b6:	9a03      	ldr	r2, [sp, #12]
 800a6b8:	1a9b      	subs	r3, r3, r2
 800a6ba:	42ab      	cmp	r3, r5
 800a6bc:	dcf2      	bgt.n	800a6a4 <_printf_i+0x1e8>
 800a6be:	e7eb      	b.n	800a698 <_printf_i+0x1dc>
 800a6c0:	2500      	movs	r5, #0
 800a6c2:	f104 0919 	add.w	r9, r4, #25
 800a6c6:	e7f5      	b.n	800a6b4 <_printf_i+0x1f8>
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1ac      	bne.n	800a626 <_printf_i+0x16a>
 800a6cc:	7803      	ldrb	r3, [r0, #0]
 800a6ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6d6:	e76c      	b.n	800a5b2 <_printf_i+0xf6>
 800a6d8:	0800cb16 	.word	0x0800cb16
 800a6dc:	0800cb27 	.word	0x0800cb27

0800a6e0 <_sbrk_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4c06      	ldr	r4, [pc, #24]	; (800a6fc <_sbrk_r+0x1c>)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	f7f8 f8fc 	bl	80028e8 <_sbrk>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_sbrk_r+0x1a>
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_sbrk_r+0x1a>
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	20001d84 	.word	0x20001d84

0800a700 <siprintf>:
 800a700:	b40e      	push	{r1, r2, r3}
 800a702:	b500      	push	{lr}
 800a704:	b09c      	sub	sp, #112	; 0x70
 800a706:	ab1d      	add	r3, sp, #116	; 0x74
 800a708:	9002      	str	r0, [sp, #8]
 800a70a:	9006      	str	r0, [sp, #24]
 800a70c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a710:	4809      	ldr	r0, [pc, #36]	; (800a738 <siprintf+0x38>)
 800a712:	9107      	str	r1, [sp, #28]
 800a714:	9104      	str	r1, [sp, #16]
 800a716:	4909      	ldr	r1, [pc, #36]	; (800a73c <siprintf+0x3c>)
 800a718:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71c:	9105      	str	r1, [sp, #20]
 800a71e:	6800      	ldr	r0, [r0, #0]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	a902      	add	r1, sp, #8
 800a724:	f001 f9c0 	bl	800baa8 <_svfiprintf_r>
 800a728:	9b02      	ldr	r3, [sp, #8]
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	b01c      	add	sp, #112	; 0x70
 800a730:	f85d eb04 	ldr.w	lr, [sp], #4
 800a734:	b003      	add	sp, #12
 800a736:	4770      	bx	lr
 800a738:	20000180 	.word	0x20000180
 800a73c:	ffff0208 	.word	0xffff0208

0800a740 <quorem>:
 800a740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	6903      	ldr	r3, [r0, #16]
 800a746:	690c      	ldr	r4, [r1, #16]
 800a748:	42a3      	cmp	r3, r4
 800a74a:	4680      	mov	r8, r0
 800a74c:	f2c0 8082 	blt.w	800a854 <quorem+0x114>
 800a750:	3c01      	subs	r4, #1
 800a752:	f101 0714 	add.w	r7, r1, #20
 800a756:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a75a:	f100 0614 	add.w	r6, r0, #20
 800a75e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a762:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a766:	eb06 030c 	add.w	r3, r6, ip
 800a76a:	3501      	adds	r5, #1
 800a76c:	eb07 090c 	add.w	r9, r7, ip
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	fbb0 f5f5 	udiv	r5, r0, r5
 800a776:	b395      	cbz	r5, 800a7de <quorem+0x9e>
 800a778:	f04f 0a00 	mov.w	sl, #0
 800a77c:	4638      	mov	r0, r7
 800a77e:	46b6      	mov	lr, r6
 800a780:	46d3      	mov	fp, sl
 800a782:	f850 2b04 	ldr.w	r2, [r0], #4
 800a786:	b293      	uxth	r3, r2
 800a788:	fb05 a303 	mla	r3, r5, r3, sl
 800a78c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a790:	b29b      	uxth	r3, r3
 800a792:	ebab 0303 	sub.w	r3, fp, r3
 800a796:	0c12      	lsrs	r2, r2, #16
 800a798:	f8de b000 	ldr.w	fp, [lr]
 800a79c:	fb05 a202 	mla	r2, r5, r2, sl
 800a7a0:	fa13 f38b 	uxtah	r3, r3, fp
 800a7a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a7a8:	fa1f fb82 	uxth.w	fp, r2
 800a7ac:	f8de 2000 	ldr.w	r2, [lr]
 800a7b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7be:	4581      	cmp	r9, r0
 800a7c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a7c4:	f84e 3b04 	str.w	r3, [lr], #4
 800a7c8:	d2db      	bcs.n	800a782 <quorem+0x42>
 800a7ca:	f856 300c 	ldr.w	r3, [r6, ip]
 800a7ce:	b933      	cbnz	r3, 800a7de <quorem+0x9e>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	3b04      	subs	r3, #4
 800a7d4:	429e      	cmp	r6, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	d330      	bcc.n	800a83c <quorem+0xfc>
 800a7da:	f8c8 4010 	str.w	r4, [r8, #16]
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f001 f834 	bl	800b84c <__mcmp>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	db25      	blt.n	800a834 <quorem+0xf4>
 800a7e8:	3501      	adds	r5, #1
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f04f 0c00 	mov.w	ip, #0
 800a7f0:	f857 2b04 	ldr.w	r2, [r7], #4
 800a7f4:	f8d0 e000 	ldr.w	lr, [r0]
 800a7f8:	b293      	uxth	r3, r2
 800a7fa:	ebac 0303 	sub.w	r3, ip, r3
 800a7fe:	0c12      	lsrs	r2, r2, #16
 800a800:	fa13 f38e 	uxtah	r3, r3, lr
 800a804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a812:	45b9      	cmp	r9, r7
 800a814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a818:	f840 3b04 	str.w	r3, [r0], #4
 800a81c:	d2e8      	bcs.n	800a7f0 <quorem+0xb0>
 800a81e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a822:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a826:	b92a      	cbnz	r2, 800a834 <quorem+0xf4>
 800a828:	3b04      	subs	r3, #4
 800a82a:	429e      	cmp	r6, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	d30b      	bcc.n	800a848 <quorem+0x108>
 800a830:	f8c8 4010 	str.w	r4, [r8, #16]
 800a834:	4628      	mov	r0, r5
 800a836:	b003      	add	sp, #12
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	3b04      	subs	r3, #4
 800a840:	2a00      	cmp	r2, #0
 800a842:	d1ca      	bne.n	800a7da <quorem+0x9a>
 800a844:	3c01      	subs	r4, #1
 800a846:	e7c5      	b.n	800a7d4 <quorem+0x94>
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	d1ef      	bne.n	800a830 <quorem+0xf0>
 800a850:	3c01      	subs	r4, #1
 800a852:	e7ea      	b.n	800a82a <quorem+0xea>
 800a854:	2000      	movs	r0, #0
 800a856:	e7ee      	b.n	800a836 <quorem+0xf6>

0800a858 <_dtoa_r>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	ec57 6b10 	vmov	r6, r7, d0
 800a860:	b097      	sub	sp, #92	; 0x5c
 800a862:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a864:	9106      	str	r1, [sp, #24]
 800a866:	4604      	mov	r4, r0
 800a868:	920b      	str	r2, [sp, #44]	; 0x2c
 800a86a:	9312      	str	r3, [sp, #72]	; 0x48
 800a86c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a870:	e9cd 6700 	strd	r6, r7, [sp]
 800a874:	b93d      	cbnz	r5, 800a886 <_dtoa_r+0x2e>
 800a876:	2010      	movs	r0, #16
 800a878:	f7ff fa16 	bl	8009ca8 <malloc>
 800a87c:	6260      	str	r0, [r4, #36]	; 0x24
 800a87e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a882:	6005      	str	r5, [r0, #0]
 800a884:	60c5      	str	r5, [r0, #12]
 800a886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a888:	6819      	ldr	r1, [r3, #0]
 800a88a:	b151      	cbz	r1, 800a8a2 <_dtoa_r+0x4a>
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	604a      	str	r2, [r1, #4]
 800a890:	2301      	movs	r3, #1
 800a892:	4093      	lsls	r3, r2
 800a894:	608b      	str	r3, [r1, #8]
 800a896:	4620      	mov	r0, r4
 800a898:	f000 fdf7 	bl	800b48a <_Bfree>
 800a89c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a89e:	2200      	movs	r2, #0
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	1e3b      	subs	r3, r7, #0
 800a8a4:	bfbb      	ittet	lt
 800a8a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8aa:	9301      	strlt	r3, [sp, #4]
 800a8ac:	2300      	movge	r3, #0
 800a8ae:	2201      	movlt	r2, #1
 800a8b0:	bfac      	ite	ge
 800a8b2:	f8c8 3000 	strge.w	r3, [r8]
 800a8b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a8ba:	4baf      	ldr	r3, [pc, #700]	; (800ab78 <_dtoa_r+0x320>)
 800a8bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8c0:	ea33 0308 	bics.w	r3, r3, r8
 800a8c4:	d114      	bne.n	800a8f0 <_dtoa_r+0x98>
 800a8c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	9b00      	ldr	r3, [sp, #0]
 800a8d0:	b923      	cbnz	r3, 800a8dc <_dtoa_r+0x84>
 800a8d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f000 8542 	beq.w	800b360 <_dtoa_r+0xb08>
 800a8dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ab8c <_dtoa_r+0x334>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8544 	beq.w	800b370 <_dtoa_r+0xb18>
 800a8e8:	f10b 0303 	add.w	r3, fp, #3
 800a8ec:	f000 bd3e 	b.w	800b36c <_dtoa_r+0xb14>
 800a8f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f7f6 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a900:	4681      	mov	r9, r0
 800a902:	b168      	cbz	r0, 800a920 <_dtoa_r+0xc8>
 800a904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a906:	2301      	movs	r3, #1
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 8524 	beq.w	800b35a <_dtoa_r+0xb02>
 800a912:	4b9a      	ldr	r3, [pc, #616]	; (800ab7c <_dtoa_r+0x324>)
 800a914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a916:	f103 3bff 	add.w	fp, r3, #4294967295
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	f000 bd28 	b.w	800b370 <_dtoa_r+0xb18>
 800a920:	aa14      	add	r2, sp, #80	; 0x50
 800a922:	a915      	add	r1, sp, #84	; 0x54
 800a924:	ec47 6b10 	vmov	d0, r6, r7
 800a928:	4620      	mov	r0, r4
 800a92a:	f001 f806 	bl	800b93a <__d2b>
 800a92e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a932:	9004      	str	r0, [sp, #16]
 800a934:	2d00      	cmp	r5, #0
 800a936:	d07c      	beq.n	800aa32 <_dtoa_r+0x1da>
 800a938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a93c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a940:	46b2      	mov	sl, r6
 800a942:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a94a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a94e:	2200      	movs	r2, #0
 800a950:	4b8b      	ldr	r3, [pc, #556]	; (800ab80 <_dtoa_r+0x328>)
 800a952:	4650      	mov	r0, sl
 800a954:	4659      	mov	r1, fp
 800a956:	f7f5 fc97 	bl	8000288 <__aeabi_dsub>
 800a95a:	a381      	add	r3, pc, #516	; (adr r3, 800ab60 <_dtoa_r+0x308>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fe4a 	bl	80005f8 <__aeabi_dmul>
 800a964:	a380      	add	r3, pc, #512	; (adr r3, 800ab68 <_dtoa_r+0x310>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fc8f 	bl	800028c <__adddf3>
 800a96e:	4606      	mov	r6, r0
 800a970:	4628      	mov	r0, r5
 800a972:	460f      	mov	r7, r1
 800a974:	f7f5 fdd6 	bl	8000524 <__aeabi_i2d>
 800a978:	a37d      	add	r3, pc, #500	; (adr r3, 800ab70 <_dtoa_r+0x318>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fe3b 	bl	80005f8 <__aeabi_dmul>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f5 fc7f 	bl	800028c <__adddf3>
 800a98e:	4606      	mov	r6, r0
 800a990:	460f      	mov	r7, r1
 800a992:	f7f6 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800a996:	2200      	movs	r2, #0
 800a998:	4682      	mov	sl, r0
 800a99a:	2300      	movs	r3, #0
 800a99c:	4630      	mov	r0, r6
 800a99e:	4639      	mov	r1, r7
 800a9a0:	f7f6 f89c 	bl	8000adc <__aeabi_dcmplt>
 800a9a4:	b148      	cbz	r0, 800a9ba <_dtoa_r+0x162>
 800a9a6:	4650      	mov	r0, sl
 800a9a8:	f7f5 fdbc 	bl	8000524 <__aeabi_i2d>
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	f7f6 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9b4:	b908      	cbnz	r0, 800a9ba <_dtoa_r+0x162>
 800a9b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9ba:	f1ba 0f16 	cmp.w	sl, #22
 800a9be:	d859      	bhi.n	800aa74 <_dtoa_r+0x21c>
 800a9c0:	4970      	ldr	r1, [pc, #448]	; (800ab84 <_dtoa_r+0x32c>)
 800a9c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ce:	f7f6 f8a3 	bl	8000b18 <__aeabi_dcmpgt>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d050      	beq.n	800aa78 <_dtoa_r+0x220>
 800a9d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9da:	2300      	movs	r3, #0
 800a9dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9e0:	1b5d      	subs	r5, r3, r5
 800a9e2:	f1b5 0801 	subs.w	r8, r5, #1
 800a9e6:	bf49      	itett	mi
 800a9e8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a9ec:	2300      	movpl	r3, #0
 800a9ee:	9305      	strmi	r3, [sp, #20]
 800a9f0:	f04f 0800 	movmi.w	r8, #0
 800a9f4:	bf58      	it	pl
 800a9f6:	9305      	strpl	r3, [sp, #20]
 800a9f8:	f1ba 0f00 	cmp.w	sl, #0
 800a9fc:	db3e      	blt.n	800aa7c <_dtoa_r+0x224>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	44d0      	add	r8, sl
 800aa02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aa06:	9307      	str	r3, [sp, #28]
 800aa08:	9b06      	ldr	r3, [sp, #24]
 800aa0a:	2b09      	cmp	r3, #9
 800aa0c:	f200 8090 	bhi.w	800ab30 <_dtoa_r+0x2d8>
 800aa10:	2b05      	cmp	r3, #5
 800aa12:	bfc4      	itt	gt
 800aa14:	3b04      	subgt	r3, #4
 800aa16:	9306      	strgt	r3, [sp, #24]
 800aa18:	9b06      	ldr	r3, [sp, #24]
 800aa1a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa1e:	bfcc      	ite	gt
 800aa20:	2500      	movgt	r5, #0
 800aa22:	2501      	movle	r5, #1
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	f200 808f 	bhi.w	800ab48 <_dtoa_r+0x2f0>
 800aa2a:	e8df f003 	tbb	[pc, r3]
 800aa2e:	7f7d      	.short	0x7f7d
 800aa30:	7131      	.short	0x7131
 800aa32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aa36:	441d      	add	r5, r3
 800aa38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aa3c:	2820      	cmp	r0, #32
 800aa3e:	dd13      	ble.n	800aa68 <_dtoa_r+0x210>
 800aa40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	fa08 f800 	lsl.w	r8, r8, r0
 800aa4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aa4e:	fa23 f000 	lsr.w	r0, r3, r0
 800aa52:	ea48 0000 	orr.w	r0, r8, r0
 800aa56:	f7f5 fd55 	bl	8000504 <__aeabi_ui2d>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800aa62:	3d01      	subs	r5, #1
 800aa64:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa66:	e772      	b.n	800a94e <_dtoa_r+0xf6>
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	f1c0 0020 	rsb	r0, r0, #32
 800aa6e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa72:	e7f0      	b.n	800aa56 <_dtoa_r+0x1fe>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e7b1      	b.n	800a9dc <_dtoa_r+0x184>
 800aa78:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa7a:	e7b0      	b.n	800a9de <_dtoa_r+0x186>
 800aa7c:	9b05      	ldr	r3, [sp, #20]
 800aa7e:	eba3 030a 	sub.w	r3, r3, sl
 800aa82:	9305      	str	r3, [sp, #20]
 800aa84:	f1ca 0300 	rsb	r3, sl, #0
 800aa88:	9307      	str	r3, [sp, #28]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa8e:	e7bb      	b.n	800aa08 <_dtoa_r+0x1b0>
 800aa90:	2301      	movs	r3, #1
 800aa92:	930a      	str	r3, [sp, #40]	; 0x28
 800aa94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dd59      	ble.n	800ab4e <_dtoa_r+0x2f6>
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	4699      	mov	r9, r3
 800aa9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	6072      	str	r2, [r6, #4]
 800aaa4:	2204      	movs	r2, #4
 800aaa6:	f102 0014 	add.w	r0, r2, #20
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	6871      	ldr	r1, [r6, #4]
 800aaae:	d953      	bls.n	800ab58 <_dtoa_r+0x300>
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fcb6 	bl	800b422 <_Balloc>
 800aab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab8:	6030      	str	r0, [r6, #0]
 800aaba:	f1b9 0f0e 	cmp.w	r9, #14
 800aabe:	f8d3 b000 	ldr.w	fp, [r3]
 800aac2:	f200 80e6 	bhi.w	800ac92 <_dtoa_r+0x43a>
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	f000 80e3 	beq.w	800ac92 <_dtoa_r+0x43a>
 800aacc:	ed9d 7b00 	vldr	d7, [sp]
 800aad0:	f1ba 0f00 	cmp.w	sl, #0
 800aad4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800aad8:	dd74      	ble.n	800abc4 <_dtoa_r+0x36c>
 800aada:	4a2a      	ldr	r2, [pc, #168]	; (800ab84 <_dtoa_r+0x32c>)
 800aadc:	f00a 030f 	and.w	r3, sl, #15
 800aae0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aae4:	ed93 7b00 	vldr	d7, [r3]
 800aae8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800aaec:	06f0      	lsls	r0, r6, #27
 800aaee:	ed8d 7b08 	vstr	d7, [sp, #32]
 800aaf2:	d565      	bpl.n	800abc0 <_dtoa_r+0x368>
 800aaf4:	4b24      	ldr	r3, [pc, #144]	; (800ab88 <_dtoa_r+0x330>)
 800aaf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aafa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aafe:	f7f5 fea5 	bl	800084c <__aeabi_ddiv>
 800ab02:	e9cd 0100 	strd	r0, r1, [sp]
 800ab06:	f006 060f 	and.w	r6, r6, #15
 800ab0a:	2503      	movs	r5, #3
 800ab0c:	4f1e      	ldr	r7, [pc, #120]	; (800ab88 <_dtoa_r+0x330>)
 800ab0e:	e04c      	b.n	800abaa <_dtoa_r+0x352>
 800ab10:	2301      	movs	r3, #1
 800ab12:	930a      	str	r3, [sp, #40]	; 0x28
 800ab14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab16:	4453      	add	r3, sl
 800ab18:	f103 0901 	add.w	r9, r3, #1
 800ab1c:	9302      	str	r3, [sp, #8]
 800ab1e:	464b      	mov	r3, r9
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	bfb8      	it	lt
 800ab24:	2301      	movlt	r3, #1
 800ab26:	e7ba      	b.n	800aa9e <_dtoa_r+0x246>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e7b2      	b.n	800aa92 <_dtoa_r+0x23a>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	e7f0      	b.n	800ab12 <_dtoa_r+0x2ba>
 800ab30:	2501      	movs	r5, #1
 800ab32:	2300      	movs	r3, #0
 800ab34:	9306      	str	r3, [sp, #24]
 800ab36:	950a      	str	r5, [sp, #40]	; 0x28
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	4699      	mov	r9, r3
 800ab40:	2200      	movs	r2, #0
 800ab42:	2312      	movs	r3, #18
 800ab44:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab46:	e7aa      	b.n	800aa9e <_dtoa_r+0x246>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab4c:	e7f4      	b.n	800ab38 <_dtoa_r+0x2e0>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	9302      	str	r3, [sp, #8]
 800ab52:	4699      	mov	r9, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	e7f5      	b.n	800ab44 <_dtoa_r+0x2ec>
 800ab58:	3101      	adds	r1, #1
 800ab5a:	6071      	str	r1, [r6, #4]
 800ab5c:	0052      	lsls	r2, r2, #1
 800ab5e:	e7a2      	b.n	800aaa6 <_dtoa_r+0x24e>
 800ab60:	636f4361 	.word	0x636f4361
 800ab64:	3fd287a7 	.word	0x3fd287a7
 800ab68:	8b60c8b3 	.word	0x8b60c8b3
 800ab6c:	3fc68a28 	.word	0x3fc68a28
 800ab70:	509f79fb 	.word	0x509f79fb
 800ab74:	3fd34413 	.word	0x3fd34413
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	0800cb15 	.word	0x0800cb15
 800ab80:	3ff80000 	.word	0x3ff80000
 800ab84:	0800cb78 	.word	0x0800cb78
 800ab88:	0800cb50 	.word	0x0800cb50
 800ab8c:	0800cb41 	.word	0x0800cb41
 800ab90:	07f1      	lsls	r1, r6, #31
 800ab92:	d508      	bpl.n	800aba6 <_dtoa_r+0x34e>
 800ab94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab9c:	f7f5 fd2c 	bl	80005f8 <__aeabi_dmul>
 800aba0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aba4:	3501      	adds	r5, #1
 800aba6:	1076      	asrs	r6, r6, #1
 800aba8:	3708      	adds	r7, #8
 800abaa:	2e00      	cmp	r6, #0
 800abac:	d1f0      	bne.n	800ab90 <_dtoa_r+0x338>
 800abae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abb6:	f7f5 fe49 	bl	800084c <__aeabi_ddiv>
 800abba:	e9cd 0100 	strd	r0, r1, [sp]
 800abbe:	e01a      	b.n	800abf6 <_dtoa_r+0x39e>
 800abc0:	2502      	movs	r5, #2
 800abc2:	e7a3      	b.n	800ab0c <_dtoa_r+0x2b4>
 800abc4:	f000 80a0 	beq.w	800ad08 <_dtoa_r+0x4b0>
 800abc8:	f1ca 0600 	rsb	r6, sl, #0
 800abcc:	4b9f      	ldr	r3, [pc, #636]	; (800ae4c <_dtoa_r+0x5f4>)
 800abce:	4fa0      	ldr	r7, [pc, #640]	; (800ae50 <_dtoa_r+0x5f8>)
 800abd0:	f006 020f 	and.w	r2, r6, #15
 800abd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abe0:	f7f5 fd0a 	bl	80005f8 <__aeabi_dmul>
 800abe4:	e9cd 0100 	strd	r0, r1, [sp]
 800abe8:	1136      	asrs	r6, r6, #4
 800abea:	2300      	movs	r3, #0
 800abec:	2502      	movs	r5, #2
 800abee:	2e00      	cmp	r6, #0
 800abf0:	d17f      	bne.n	800acf2 <_dtoa_r+0x49a>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e1      	bne.n	800abba <_dtoa_r+0x362>
 800abf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8087 	beq.w	800ad0c <_dtoa_r+0x4b4>
 800abfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac02:	2200      	movs	r2, #0
 800ac04:	4b93      	ldr	r3, [pc, #588]	; (800ae54 <_dtoa_r+0x5fc>)
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f5 ff67 	bl	8000adc <__aeabi_dcmplt>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d07c      	beq.n	800ad0c <_dtoa_r+0x4b4>
 800ac12:	f1b9 0f00 	cmp.w	r9, #0
 800ac16:	d079      	beq.n	800ad0c <_dtoa_r+0x4b4>
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dd35      	ble.n	800ac8a <_dtoa_r+0x432>
 800ac1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac22:	9308      	str	r3, [sp, #32]
 800ac24:	4639      	mov	r1, r7
 800ac26:	2200      	movs	r2, #0
 800ac28:	4b8b      	ldr	r3, [pc, #556]	; (800ae58 <_dtoa_r+0x600>)
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f7f5 fce4 	bl	80005f8 <__aeabi_dmul>
 800ac30:	e9cd 0100 	strd	r0, r1, [sp]
 800ac34:	9f02      	ldr	r7, [sp, #8]
 800ac36:	3501      	adds	r5, #1
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f7f5 fc73 	bl	8000524 <__aeabi_i2d>
 800ac3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac42:	f7f5 fcd9 	bl	80005f8 <__aeabi_dmul>
 800ac46:	2200      	movs	r2, #0
 800ac48:	4b84      	ldr	r3, [pc, #528]	; (800ae5c <_dtoa_r+0x604>)
 800ac4a:	f7f5 fb1f 	bl	800028c <__adddf3>
 800ac4e:	4605      	mov	r5, r0
 800ac50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ac54:	2f00      	cmp	r7, #0
 800ac56:	d15d      	bne.n	800ad14 <_dtoa_r+0x4bc>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4b81      	ldr	r3, [pc, #516]	; (800ae60 <_dtoa_r+0x608>)
 800ac5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac60:	f7f5 fb12 	bl	8000288 <__aeabi_dsub>
 800ac64:	462a      	mov	r2, r5
 800ac66:	4633      	mov	r3, r6
 800ac68:	e9cd 0100 	strd	r0, r1, [sp]
 800ac6c:	f7f5 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f040 8288 	bne.w	800b186 <_dtoa_r+0x92e>
 800ac76:	462a      	mov	r2, r5
 800ac78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ac7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac80:	f7f5 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f040 827c 	bne.w	800b182 <_dtoa_r+0x92a>
 800ac8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac8e:	e9cd 2300 	strd	r2, r3, [sp]
 800ac92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f2c0 8150 	blt.w	800af3a <_dtoa_r+0x6e2>
 800ac9a:	f1ba 0f0e 	cmp.w	sl, #14
 800ac9e:	f300 814c 	bgt.w	800af3a <_dtoa_r+0x6e2>
 800aca2:	4b6a      	ldr	r3, [pc, #424]	; (800ae4c <_dtoa_r+0x5f4>)
 800aca4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aca8:	ed93 7b00 	vldr	d7, [r3]
 800acac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acb4:	f280 80d8 	bge.w	800ae68 <_dtoa_r+0x610>
 800acb8:	f1b9 0f00 	cmp.w	r9, #0
 800acbc:	f300 80d4 	bgt.w	800ae68 <_dtoa_r+0x610>
 800acc0:	f040 825e 	bne.w	800b180 <_dtoa_r+0x928>
 800acc4:	2200      	movs	r2, #0
 800acc6:	4b66      	ldr	r3, [pc, #408]	; (800ae60 <_dtoa_r+0x608>)
 800acc8:	ec51 0b17 	vmov	r0, r1, d7
 800accc:	f7f5 fc94 	bl	80005f8 <__aeabi_dmul>
 800acd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd4:	f7f5 ff16 	bl	8000b04 <__aeabi_dcmpge>
 800acd8:	464f      	mov	r7, r9
 800acda:	464e      	mov	r6, r9
 800acdc:	2800      	cmp	r0, #0
 800acde:	f040 8234 	bne.w	800b14a <_dtoa_r+0x8f2>
 800ace2:	2331      	movs	r3, #49	; 0x31
 800ace4:	f10b 0501 	add.w	r5, fp, #1
 800ace8:	f88b 3000 	strb.w	r3, [fp]
 800acec:	f10a 0a01 	add.w	sl, sl, #1
 800acf0:	e22f      	b.n	800b152 <_dtoa_r+0x8fa>
 800acf2:	07f2      	lsls	r2, r6, #31
 800acf4:	d505      	bpl.n	800ad02 <_dtoa_r+0x4aa>
 800acf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acfa:	f7f5 fc7d 	bl	80005f8 <__aeabi_dmul>
 800acfe:	3501      	adds	r5, #1
 800ad00:	2301      	movs	r3, #1
 800ad02:	1076      	asrs	r6, r6, #1
 800ad04:	3708      	adds	r7, #8
 800ad06:	e772      	b.n	800abee <_dtoa_r+0x396>
 800ad08:	2502      	movs	r5, #2
 800ad0a:	e774      	b.n	800abf6 <_dtoa_r+0x39e>
 800ad0c:	f8cd a020 	str.w	sl, [sp, #32]
 800ad10:	464f      	mov	r7, r9
 800ad12:	e791      	b.n	800ac38 <_dtoa_r+0x3e0>
 800ad14:	4b4d      	ldr	r3, [pc, #308]	; (800ae4c <_dtoa_r+0x5f4>)
 800ad16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad1a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ad1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d047      	beq.n	800adb4 <_dtoa_r+0x55c>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	2000      	movs	r0, #0
 800ad2a:	494e      	ldr	r1, [pc, #312]	; (800ae64 <_dtoa_r+0x60c>)
 800ad2c:	f7f5 fd8e 	bl	800084c <__aeabi_ddiv>
 800ad30:	462a      	mov	r2, r5
 800ad32:	4633      	mov	r3, r6
 800ad34:	f7f5 faa8 	bl	8000288 <__aeabi_dsub>
 800ad38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ad3c:	465d      	mov	r5, fp
 800ad3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad42:	f7f5 ff09 	bl	8000b58 <__aeabi_d2iz>
 800ad46:	4606      	mov	r6, r0
 800ad48:	f7f5 fbec 	bl	8000524 <__aeabi_i2d>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad54:	f7f5 fa98 	bl	8000288 <__aeabi_dsub>
 800ad58:	3630      	adds	r6, #48	; 0x30
 800ad5a:	f805 6b01 	strb.w	r6, [r5], #1
 800ad5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad62:	e9cd 0100 	strd	r0, r1, [sp]
 800ad66:	f7f5 feb9 	bl	8000adc <__aeabi_dcmplt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d163      	bne.n	800ae36 <_dtoa_r+0x5de>
 800ad6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad72:	2000      	movs	r0, #0
 800ad74:	4937      	ldr	r1, [pc, #220]	; (800ae54 <_dtoa_r+0x5fc>)
 800ad76:	f7f5 fa87 	bl	8000288 <__aeabi_dsub>
 800ad7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad7e:	f7f5 fead 	bl	8000adc <__aeabi_dcmplt>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f040 80b7 	bne.w	800aef6 <_dtoa_r+0x69e>
 800ad88:	eba5 030b 	sub.w	r3, r5, fp
 800ad8c:	429f      	cmp	r7, r3
 800ad8e:	f77f af7c 	ble.w	800ac8a <_dtoa_r+0x432>
 800ad92:	2200      	movs	r2, #0
 800ad94:	4b30      	ldr	r3, [pc, #192]	; (800ae58 <_dtoa_r+0x600>)
 800ad96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad9a:	f7f5 fc2d 	bl	80005f8 <__aeabi_dmul>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ada4:	4b2c      	ldr	r3, [pc, #176]	; (800ae58 <_dtoa_r+0x600>)
 800ada6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adaa:	f7f5 fc25 	bl	80005f8 <__aeabi_dmul>
 800adae:	e9cd 0100 	strd	r0, r1, [sp]
 800adb2:	e7c4      	b.n	800ad3e <_dtoa_r+0x4e6>
 800adb4:	462a      	mov	r2, r5
 800adb6:	4633      	mov	r3, r6
 800adb8:	f7f5 fc1e 	bl	80005f8 <__aeabi_dmul>
 800adbc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800adc0:	eb0b 0507 	add.w	r5, fp, r7
 800adc4:	465e      	mov	r6, fp
 800adc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adca:	f7f5 fec5 	bl	8000b58 <__aeabi_d2iz>
 800adce:	4607      	mov	r7, r0
 800add0:	f7f5 fba8 	bl	8000524 <__aeabi_i2d>
 800add4:	3730      	adds	r7, #48	; 0x30
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	f806 7b01 	strb.w	r7, [r6], #1
 800ade6:	42ae      	cmp	r6, r5
 800ade8:	e9cd 0100 	strd	r0, r1, [sp]
 800adec:	f04f 0200 	mov.w	r2, #0
 800adf0:	d126      	bne.n	800ae40 <_dtoa_r+0x5e8>
 800adf2:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <_dtoa_r+0x60c>)
 800adf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adf8:	f7f5 fa48 	bl	800028c <__adddf3>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae04:	f7f5 fe88 	bl	8000b18 <__aeabi_dcmpgt>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d174      	bne.n	800aef6 <_dtoa_r+0x69e>
 800ae0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae10:	2000      	movs	r0, #0
 800ae12:	4914      	ldr	r1, [pc, #80]	; (800ae64 <_dtoa_r+0x60c>)
 800ae14:	f7f5 fa38 	bl	8000288 <__aeabi_dsub>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae20:	f7f5 fe5c 	bl	8000adc <__aeabi_dcmplt>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f43f af30 	beq.w	800ac8a <_dtoa_r+0x432>
 800ae2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae2e:	2b30      	cmp	r3, #48	; 0x30
 800ae30:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae34:	d002      	beq.n	800ae3c <_dtoa_r+0x5e4>
 800ae36:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae3a:	e04a      	b.n	800aed2 <_dtoa_r+0x67a>
 800ae3c:	4615      	mov	r5, r2
 800ae3e:	e7f4      	b.n	800ae2a <_dtoa_r+0x5d2>
 800ae40:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <_dtoa_r+0x600>)
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	e9cd 0100 	strd	r0, r1, [sp]
 800ae4a:	e7bc      	b.n	800adc6 <_dtoa_r+0x56e>
 800ae4c:	0800cb78 	.word	0x0800cb78
 800ae50:	0800cb50 	.word	0x0800cb50
 800ae54:	3ff00000 	.word	0x3ff00000
 800ae58:	40240000 	.word	0x40240000
 800ae5c:	401c0000 	.word	0x401c0000
 800ae60:	40140000 	.word	0x40140000
 800ae64:	3fe00000 	.word	0x3fe00000
 800ae68:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae6c:	465d      	mov	r5, fp
 800ae6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae72:	4630      	mov	r0, r6
 800ae74:	4639      	mov	r1, r7
 800ae76:	f7f5 fce9 	bl	800084c <__aeabi_ddiv>
 800ae7a:	f7f5 fe6d 	bl	8000b58 <__aeabi_d2iz>
 800ae7e:	4680      	mov	r8, r0
 800ae80:	f7f5 fb50 	bl	8000524 <__aeabi_i2d>
 800ae84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae88:	f7f5 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4630      	mov	r0, r6
 800ae92:	4639      	mov	r1, r7
 800ae94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ae98:	f7f5 f9f6 	bl	8000288 <__aeabi_dsub>
 800ae9c:	f805 6b01 	strb.w	r6, [r5], #1
 800aea0:	eba5 060b 	sub.w	r6, r5, fp
 800aea4:	45b1      	cmp	r9, r6
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	d139      	bne.n	800af20 <_dtoa_r+0x6c8>
 800aeac:	f7f5 f9ee 	bl	800028c <__adddf3>
 800aeb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	460f      	mov	r7, r1
 800aeb8:	f7f5 fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 800aebc:	b9c8      	cbnz	r0, 800aef2 <_dtoa_r+0x69a>
 800aebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	f7f5 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeca:	b110      	cbz	r0, 800aed2 <_dtoa_r+0x67a>
 800aecc:	f018 0f01 	tst.w	r8, #1
 800aed0:	d10f      	bne.n	800aef2 <_dtoa_r+0x69a>
 800aed2:	9904      	ldr	r1, [sp, #16]
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fad8 	bl	800b48a <_Bfree>
 800aeda:	2300      	movs	r3, #0
 800aedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aede:	702b      	strb	r3, [r5, #0]
 800aee0:	f10a 0301 	add.w	r3, sl, #1
 800aee4:	6013      	str	r3, [r2, #0]
 800aee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 8241 	beq.w	800b370 <_dtoa_r+0xb18>
 800aeee:	601d      	str	r5, [r3, #0]
 800aef0:	e23e      	b.n	800b370 <_dtoa_r+0xb18>
 800aef2:	f8cd a020 	str.w	sl, [sp, #32]
 800aef6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aefa:	2a39      	cmp	r2, #57	; 0x39
 800aefc:	f105 33ff 	add.w	r3, r5, #4294967295
 800af00:	d108      	bne.n	800af14 <_dtoa_r+0x6bc>
 800af02:	459b      	cmp	fp, r3
 800af04:	d10a      	bne.n	800af1c <_dtoa_r+0x6c4>
 800af06:	9b08      	ldr	r3, [sp, #32]
 800af08:	3301      	adds	r3, #1
 800af0a:	9308      	str	r3, [sp, #32]
 800af0c:	2330      	movs	r3, #48	; 0x30
 800af0e:	f88b 3000 	strb.w	r3, [fp]
 800af12:	465b      	mov	r3, fp
 800af14:	781a      	ldrb	r2, [r3, #0]
 800af16:	3201      	adds	r2, #1
 800af18:	701a      	strb	r2, [r3, #0]
 800af1a:	e78c      	b.n	800ae36 <_dtoa_r+0x5de>
 800af1c:	461d      	mov	r5, r3
 800af1e:	e7ea      	b.n	800aef6 <_dtoa_r+0x69e>
 800af20:	2200      	movs	r2, #0
 800af22:	4b9b      	ldr	r3, [pc, #620]	; (800b190 <_dtoa_r+0x938>)
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	2200      	movs	r2, #0
 800af2a:	2300      	movs	r3, #0
 800af2c:	4606      	mov	r6, r0
 800af2e:	460f      	mov	r7, r1
 800af30:	f7f5 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 800af34:	2800      	cmp	r0, #0
 800af36:	d09a      	beq.n	800ae6e <_dtoa_r+0x616>
 800af38:	e7cb      	b.n	800aed2 <_dtoa_r+0x67a>
 800af3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	f000 808b 	beq.w	800b058 <_dtoa_r+0x800>
 800af42:	9a06      	ldr	r2, [sp, #24]
 800af44:	2a01      	cmp	r2, #1
 800af46:	dc6e      	bgt.n	800b026 <_dtoa_r+0x7ce>
 800af48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	d067      	beq.n	800b01e <_dtoa_r+0x7c6>
 800af4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af52:	9f07      	ldr	r7, [sp, #28]
 800af54:	9d05      	ldr	r5, [sp, #20]
 800af56:	9a05      	ldr	r2, [sp, #20]
 800af58:	2101      	movs	r1, #1
 800af5a:	441a      	add	r2, r3
 800af5c:	4620      	mov	r0, r4
 800af5e:	9205      	str	r2, [sp, #20]
 800af60:	4498      	add	r8, r3
 800af62:	f000 fb32 	bl	800b5ca <__i2b>
 800af66:	4606      	mov	r6, r0
 800af68:	2d00      	cmp	r5, #0
 800af6a:	dd0c      	ble.n	800af86 <_dtoa_r+0x72e>
 800af6c:	f1b8 0f00 	cmp.w	r8, #0
 800af70:	dd09      	ble.n	800af86 <_dtoa_r+0x72e>
 800af72:	4545      	cmp	r5, r8
 800af74:	9a05      	ldr	r2, [sp, #20]
 800af76:	462b      	mov	r3, r5
 800af78:	bfa8      	it	ge
 800af7a:	4643      	movge	r3, r8
 800af7c:	1ad2      	subs	r2, r2, r3
 800af7e:	9205      	str	r2, [sp, #20]
 800af80:	1aed      	subs	r5, r5, r3
 800af82:	eba8 0803 	sub.w	r8, r8, r3
 800af86:	9b07      	ldr	r3, [sp, #28]
 800af88:	b1eb      	cbz	r3, 800afc6 <_dtoa_r+0x76e>
 800af8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d067      	beq.n	800b060 <_dtoa_r+0x808>
 800af90:	b18f      	cbz	r7, 800afb6 <_dtoa_r+0x75e>
 800af92:	4631      	mov	r1, r6
 800af94:	463a      	mov	r2, r7
 800af96:	4620      	mov	r0, r4
 800af98:	f000 fbb6 	bl	800b708 <__pow5mult>
 800af9c:	9a04      	ldr	r2, [sp, #16]
 800af9e:	4601      	mov	r1, r0
 800afa0:	4606      	mov	r6, r0
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fb1a 	bl	800b5dc <__multiply>
 800afa8:	9904      	ldr	r1, [sp, #16]
 800afaa:	9008      	str	r0, [sp, #32]
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fa6c 	bl	800b48a <_Bfree>
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	9b07      	ldr	r3, [sp, #28]
 800afb8:	1bda      	subs	r2, r3, r7
 800afba:	d004      	beq.n	800afc6 <_dtoa_r+0x76e>
 800afbc:	9904      	ldr	r1, [sp, #16]
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fba2 	bl	800b708 <__pow5mult>
 800afc4:	9004      	str	r0, [sp, #16]
 800afc6:	2101      	movs	r1, #1
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fafe 	bl	800b5ca <__i2b>
 800afce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afd0:	4607      	mov	r7, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 81d0 	beq.w	800b378 <_dtoa_r+0xb20>
 800afd8:	461a      	mov	r2, r3
 800afda:	4601      	mov	r1, r0
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 fb93 	bl	800b708 <__pow5mult>
 800afe2:	9b06      	ldr	r3, [sp, #24]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	4607      	mov	r7, r0
 800afe8:	dc40      	bgt.n	800b06c <_dtoa_r+0x814>
 800afea:	9b00      	ldr	r3, [sp, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d139      	bne.n	800b064 <_dtoa_r+0x80c>
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d136      	bne.n	800b068 <_dtoa_r+0x810>
 800affa:	9b01      	ldr	r3, [sp, #4]
 800affc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b000:	0d1b      	lsrs	r3, r3, #20
 800b002:	051b      	lsls	r3, r3, #20
 800b004:	b12b      	cbz	r3, 800b012 <_dtoa_r+0x7ba>
 800b006:	9b05      	ldr	r3, [sp, #20]
 800b008:	3301      	adds	r3, #1
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	f108 0801 	add.w	r8, r8, #1
 800b010:	2301      	movs	r3, #1
 800b012:	9307      	str	r3, [sp, #28]
 800b014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b016:	2b00      	cmp	r3, #0
 800b018:	d12a      	bne.n	800b070 <_dtoa_r+0x818>
 800b01a:	2001      	movs	r0, #1
 800b01c:	e030      	b.n	800b080 <_dtoa_r+0x828>
 800b01e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b020:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b024:	e795      	b.n	800af52 <_dtoa_r+0x6fa>
 800b026:	9b07      	ldr	r3, [sp, #28]
 800b028:	f109 37ff 	add.w	r7, r9, #4294967295
 800b02c:	42bb      	cmp	r3, r7
 800b02e:	bfbf      	itttt	lt
 800b030:	9b07      	ldrlt	r3, [sp, #28]
 800b032:	9707      	strlt	r7, [sp, #28]
 800b034:	1afa      	sublt	r2, r7, r3
 800b036:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b038:	bfbb      	ittet	lt
 800b03a:	189b      	addlt	r3, r3, r2
 800b03c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b03e:	1bdf      	subge	r7, r3, r7
 800b040:	2700      	movlt	r7, #0
 800b042:	f1b9 0f00 	cmp.w	r9, #0
 800b046:	bfb5      	itete	lt
 800b048:	9b05      	ldrlt	r3, [sp, #20]
 800b04a:	9d05      	ldrge	r5, [sp, #20]
 800b04c:	eba3 0509 	sublt.w	r5, r3, r9
 800b050:	464b      	movge	r3, r9
 800b052:	bfb8      	it	lt
 800b054:	2300      	movlt	r3, #0
 800b056:	e77e      	b.n	800af56 <_dtoa_r+0x6fe>
 800b058:	9f07      	ldr	r7, [sp, #28]
 800b05a:	9d05      	ldr	r5, [sp, #20]
 800b05c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b05e:	e783      	b.n	800af68 <_dtoa_r+0x710>
 800b060:	9a07      	ldr	r2, [sp, #28]
 800b062:	e7ab      	b.n	800afbc <_dtoa_r+0x764>
 800b064:	2300      	movs	r3, #0
 800b066:	e7d4      	b.n	800b012 <_dtoa_r+0x7ba>
 800b068:	9b00      	ldr	r3, [sp, #0]
 800b06a:	e7d2      	b.n	800b012 <_dtoa_r+0x7ba>
 800b06c:	2300      	movs	r3, #0
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b076:	6918      	ldr	r0, [r3, #16]
 800b078:	f000 fa59 	bl	800b52e <__hi0bits>
 800b07c:	f1c0 0020 	rsb	r0, r0, #32
 800b080:	4440      	add	r0, r8
 800b082:	f010 001f 	ands.w	r0, r0, #31
 800b086:	d047      	beq.n	800b118 <_dtoa_r+0x8c0>
 800b088:	f1c0 0320 	rsb	r3, r0, #32
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	dd3b      	ble.n	800b108 <_dtoa_r+0x8b0>
 800b090:	9b05      	ldr	r3, [sp, #20]
 800b092:	f1c0 001c 	rsb	r0, r0, #28
 800b096:	4403      	add	r3, r0
 800b098:	9305      	str	r3, [sp, #20]
 800b09a:	4405      	add	r5, r0
 800b09c:	4480      	add	r8, r0
 800b09e:	9b05      	ldr	r3, [sp, #20]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dd05      	ble.n	800b0b0 <_dtoa_r+0x858>
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	9904      	ldr	r1, [sp, #16]
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fb7b 	bl	800b7a4 <__lshift>
 800b0ae:	9004      	str	r0, [sp, #16]
 800b0b0:	f1b8 0f00 	cmp.w	r8, #0
 800b0b4:	dd05      	ble.n	800b0c2 <_dtoa_r+0x86a>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 fb72 	bl	800b7a4 <__lshift>
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0c4:	b353      	cbz	r3, 800b11c <_dtoa_r+0x8c4>
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	9804      	ldr	r0, [sp, #16]
 800b0ca:	f000 fbbf 	bl	800b84c <__mcmp>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	da24      	bge.n	800b11c <_dtoa_r+0x8c4>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	220a      	movs	r2, #10
 800b0d6:	9904      	ldr	r1, [sp, #16]
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 f9ed 	bl	800b4b8 <__multadd>
 800b0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e0:	9004      	str	r0, [sp, #16]
 800b0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 814d 	beq.w	800b386 <_dtoa_r+0xb2e>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f9e0 	bl	800b4b8 <__multadd>
 800b0f8:	9b02      	ldr	r3, [sp, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	dc4f      	bgt.n	800b1a0 <_dtoa_r+0x948>
 800b100:	9b06      	ldr	r3, [sp, #24]
 800b102:	2b02      	cmp	r3, #2
 800b104:	dd4c      	ble.n	800b1a0 <_dtoa_r+0x948>
 800b106:	e011      	b.n	800b12c <_dtoa_r+0x8d4>
 800b108:	d0c9      	beq.n	800b09e <_dtoa_r+0x846>
 800b10a:	9a05      	ldr	r2, [sp, #20]
 800b10c:	331c      	adds	r3, #28
 800b10e:	441a      	add	r2, r3
 800b110:	9205      	str	r2, [sp, #20]
 800b112:	441d      	add	r5, r3
 800b114:	4498      	add	r8, r3
 800b116:	e7c2      	b.n	800b09e <_dtoa_r+0x846>
 800b118:	4603      	mov	r3, r0
 800b11a:	e7f6      	b.n	800b10a <_dtoa_r+0x8b2>
 800b11c:	f1b9 0f00 	cmp.w	r9, #0
 800b120:	dc38      	bgt.n	800b194 <_dtoa_r+0x93c>
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	2b02      	cmp	r3, #2
 800b126:	dd35      	ble.n	800b194 <_dtoa_r+0x93c>
 800b128:	f8cd 9008 	str.w	r9, [sp, #8]
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	b963      	cbnz	r3, 800b14a <_dtoa_r+0x8f2>
 800b130:	4639      	mov	r1, r7
 800b132:	2205      	movs	r2, #5
 800b134:	4620      	mov	r0, r4
 800b136:	f000 f9bf 	bl	800b4b8 <__multadd>
 800b13a:	4601      	mov	r1, r0
 800b13c:	4607      	mov	r7, r0
 800b13e:	9804      	ldr	r0, [sp, #16]
 800b140:	f000 fb84 	bl	800b84c <__mcmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	f73f adcc 	bgt.w	800ace2 <_dtoa_r+0x48a>
 800b14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b14c:	465d      	mov	r5, fp
 800b14e:	ea6f 0a03 	mvn.w	sl, r3
 800b152:	f04f 0900 	mov.w	r9, #0
 800b156:	4639      	mov	r1, r7
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 f996 	bl	800b48a <_Bfree>
 800b15e:	2e00      	cmp	r6, #0
 800b160:	f43f aeb7 	beq.w	800aed2 <_dtoa_r+0x67a>
 800b164:	f1b9 0f00 	cmp.w	r9, #0
 800b168:	d005      	beq.n	800b176 <_dtoa_r+0x91e>
 800b16a:	45b1      	cmp	r9, r6
 800b16c:	d003      	beq.n	800b176 <_dtoa_r+0x91e>
 800b16e:	4649      	mov	r1, r9
 800b170:	4620      	mov	r0, r4
 800b172:	f000 f98a 	bl	800b48a <_Bfree>
 800b176:	4631      	mov	r1, r6
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 f986 	bl	800b48a <_Bfree>
 800b17e:	e6a8      	b.n	800aed2 <_dtoa_r+0x67a>
 800b180:	2700      	movs	r7, #0
 800b182:	463e      	mov	r6, r7
 800b184:	e7e1      	b.n	800b14a <_dtoa_r+0x8f2>
 800b186:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b18a:	463e      	mov	r6, r7
 800b18c:	e5a9      	b.n	800ace2 <_dtoa_r+0x48a>
 800b18e:	bf00      	nop
 800b190:	40240000 	.word	0x40240000
 800b194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b196:	f8cd 9008 	str.w	r9, [sp, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 80fa 	beq.w	800b394 <_dtoa_r+0xb3c>
 800b1a0:	2d00      	cmp	r5, #0
 800b1a2:	dd05      	ble.n	800b1b0 <_dtoa_r+0x958>
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	462a      	mov	r2, r5
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fafb 	bl	800b7a4 <__lshift>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	9b07      	ldr	r3, [sp, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d04c      	beq.n	800b250 <_dtoa_r+0x9f8>
 800b1b6:	6871      	ldr	r1, [r6, #4]
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f000 f932 	bl	800b422 <_Balloc>
 800b1be:	6932      	ldr	r2, [r6, #16]
 800b1c0:	3202      	adds	r2, #2
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	0092      	lsls	r2, r2, #2
 800b1c6:	f106 010c 	add.w	r1, r6, #12
 800b1ca:	300c      	adds	r0, #12
 800b1cc:	f000 f91c 	bl	800b408 <memcpy>
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fae5 	bl	800b7a4 <__lshift>
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	f8cd b014 	str.w	fp, [sp, #20]
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	46b1      	mov	r9, r6
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	9804      	ldr	r0, [sp, #16]
 800b1ee:	f7ff faa7 	bl	800a740 <quorem>
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b1fa:	9804      	ldr	r0, [sp, #16]
 800b1fc:	f000 fb26 	bl	800b84c <__mcmp>
 800b200:	4632      	mov	r2, r6
 800b202:	9000      	str	r0, [sp, #0]
 800b204:	4639      	mov	r1, r7
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fb3a 	bl	800b880 <__mdiff>
 800b20c:	68c3      	ldr	r3, [r0, #12]
 800b20e:	4602      	mov	r2, r0
 800b210:	bb03      	cbnz	r3, 800b254 <_dtoa_r+0x9fc>
 800b212:	4601      	mov	r1, r0
 800b214:	9008      	str	r0, [sp, #32]
 800b216:	9804      	ldr	r0, [sp, #16]
 800b218:	f000 fb18 	bl	800b84c <__mcmp>
 800b21c:	9a08      	ldr	r2, [sp, #32]
 800b21e:	4603      	mov	r3, r0
 800b220:	4611      	mov	r1, r2
 800b222:	4620      	mov	r0, r4
 800b224:	9308      	str	r3, [sp, #32]
 800b226:	f000 f930 	bl	800b48a <_Bfree>
 800b22a:	9b08      	ldr	r3, [sp, #32]
 800b22c:	b9a3      	cbnz	r3, 800b258 <_dtoa_r+0xa00>
 800b22e:	9a06      	ldr	r2, [sp, #24]
 800b230:	b992      	cbnz	r2, 800b258 <_dtoa_r+0xa00>
 800b232:	9a07      	ldr	r2, [sp, #28]
 800b234:	b982      	cbnz	r2, 800b258 <_dtoa_r+0xa00>
 800b236:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b23a:	d029      	beq.n	800b290 <_dtoa_r+0xa38>
 800b23c:	9b00      	ldr	r3, [sp, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dd01      	ble.n	800b246 <_dtoa_r+0x9ee>
 800b242:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	1c5d      	adds	r5, r3, #1
 800b24a:	f883 8000 	strb.w	r8, [r3]
 800b24e:	e782      	b.n	800b156 <_dtoa_r+0x8fe>
 800b250:	4630      	mov	r0, r6
 800b252:	e7c2      	b.n	800b1da <_dtoa_r+0x982>
 800b254:	2301      	movs	r3, #1
 800b256:	e7e3      	b.n	800b220 <_dtoa_r+0x9c8>
 800b258:	9a00      	ldr	r2, [sp, #0]
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	db04      	blt.n	800b268 <_dtoa_r+0xa10>
 800b25e:	d125      	bne.n	800b2ac <_dtoa_r+0xa54>
 800b260:	9a06      	ldr	r2, [sp, #24]
 800b262:	bb1a      	cbnz	r2, 800b2ac <_dtoa_r+0xa54>
 800b264:	9a07      	ldr	r2, [sp, #28]
 800b266:	bb0a      	cbnz	r2, 800b2ac <_dtoa_r+0xa54>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	ddec      	ble.n	800b246 <_dtoa_r+0x9ee>
 800b26c:	2201      	movs	r2, #1
 800b26e:	9904      	ldr	r1, [sp, #16]
 800b270:	4620      	mov	r0, r4
 800b272:	f000 fa97 	bl	800b7a4 <__lshift>
 800b276:	4639      	mov	r1, r7
 800b278:	9004      	str	r0, [sp, #16]
 800b27a:	f000 fae7 	bl	800b84c <__mcmp>
 800b27e:	2800      	cmp	r0, #0
 800b280:	dc03      	bgt.n	800b28a <_dtoa_r+0xa32>
 800b282:	d1e0      	bne.n	800b246 <_dtoa_r+0x9ee>
 800b284:	f018 0f01 	tst.w	r8, #1
 800b288:	d0dd      	beq.n	800b246 <_dtoa_r+0x9ee>
 800b28a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b28e:	d1d8      	bne.n	800b242 <_dtoa_r+0x9ea>
 800b290:	9b05      	ldr	r3, [sp, #20]
 800b292:	9a05      	ldr	r2, [sp, #20]
 800b294:	1c5d      	adds	r5, r3, #1
 800b296:	2339      	movs	r3, #57	; 0x39
 800b298:	7013      	strb	r3, [r2, #0]
 800b29a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b29e:	2b39      	cmp	r3, #57	; 0x39
 800b2a0:	f105 32ff 	add.w	r2, r5, #4294967295
 800b2a4:	d04f      	beq.n	800b346 <_dtoa_r+0xaee>
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	7013      	strb	r3, [r2, #0]
 800b2aa:	e754      	b.n	800b156 <_dtoa_r+0x8fe>
 800b2ac:	9a05      	ldr	r2, [sp, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f102 0501 	add.w	r5, r2, #1
 800b2b4:	dd06      	ble.n	800b2c4 <_dtoa_r+0xa6c>
 800b2b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2ba:	d0e9      	beq.n	800b290 <_dtoa_r+0xa38>
 800b2bc:	f108 0801 	add.w	r8, r8, #1
 800b2c0:	9b05      	ldr	r3, [sp, #20]
 800b2c2:	e7c2      	b.n	800b24a <_dtoa_r+0x9f2>
 800b2c4:	9a02      	ldr	r2, [sp, #8]
 800b2c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b2ca:	eba5 030b 	sub.w	r3, r5, fp
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d021      	beq.n	800b316 <_dtoa_r+0xabe>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	220a      	movs	r2, #10
 800b2d6:	9904      	ldr	r1, [sp, #16]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 f8ed 	bl	800b4b8 <__multadd>
 800b2de:	45b1      	cmp	r9, r6
 800b2e0:	9004      	str	r0, [sp, #16]
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	f04f 020a 	mov.w	r2, #10
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	d105      	bne.n	800b2fc <_dtoa_r+0xaa4>
 800b2f0:	f000 f8e2 	bl	800b4b8 <__multadd>
 800b2f4:	4681      	mov	r9, r0
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	9505      	str	r5, [sp, #20]
 800b2fa:	e776      	b.n	800b1ea <_dtoa_r+0x992>
 800b2fc:	f000 f8dc 	bl	800b4b8 <__multadd>
 800b300:	4631      	mov	r1, r6
 800b302:	4681      	mov	r9, r0
 800b304:	2300      	movs	r3, #0
 800b306:	220a      	movs	r2, #10
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 f8d5 	bl	800b4b8 <__multadd>
 800b30e:	4606      	mov	r6, r0
 800b310:	e7f2      	b.n	800b2f8 <_dtoa_r+0xaa0>
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	2201      	movs	r2, #1
 800b318:	9904      	ldr	r1, [sp, #16]
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fa42 	bl	800b7a4 <__lshift>
 800b320:	4639      	mov	r1, r7
 800b322:	9004      	str	r0, [sp, #16]
 800b324:	f000 fa92 	bl	800b84c <__mcmp>
 800b328:	2800      	cmp	r0, #0
 800b32a:	dcb6      	bgt.n	800b29a <_dtoa_r+0xa42>
 800b32c:	d102      	bne.n	800b334 <_dtoa_r+0xadc>
 800b32e:	f018 0f01 	tst.w	r8, #1
 800b332:	d1b2      	bne.n	800b29a <_dtoa_r+0xa42>
 800b334:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b338:	2b30      	cmp	r3, #48	; 0x30
 800b33a:	f105 32ff 	add.w	r2, r5, #4294967295
 800b33e:	f47f af0a 	bne.w	800b156 <_dtoa_r+0x8fe>
 800b342:	4615      	mov	r5, r2
 800b344:	e7f6      	b.n	800b334 <_dtoa_r+0xadc>
 800b346:	4593      	cmp	fp, r2
 800b348:	d105      	bne.n	800b356 <_dtoa_r+0xafe>
 800b34a:	2331      	movs	r3, #49	; 0x31
 800b34c:	f10a 0a01 	add.w	sl, sl, #1
 800b350:	f88b 3000 	strb.w	r3, [fp]
 800b354:	e6ff      	b.n	800b156 <_dtoa_r+0x8fe>
 800b356:	4615      	mov	r5, r2
 800b358:	e79f      	b.n	800b29a <_dtoa_r+0xa42>
 800b35a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b3c0 <_dtoa_r+0xb68>
 800b35e:	e007      	b.n	800b370 <_dtoa_r+0xb18>
 800b360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b362:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b3c4 <_dtoa_r+0xb6c>
 800b366:	b11b      	cbz	r3, 800b370 <_dtoa_r+0xb18>
 800b368:	f10b 0308 	add.w	r3, fp, #8
 800b36c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	4658      	mov	r0, fp
 800b372:	b017      	add	sp, #92	; 0x5c
 800b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b378:	9b06      	ldr	r3, [sp, #24]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	f77f ae35 	ble.w	800afea <_dtoa_r+0x792>
 800b380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b382:	9307      	str	r3, [sp, #28]
 800b384:	e649      	b.n	800b01a <_dtoa_r+0x7c2>
 800b386:	9b02      	ldr	r3, [sp, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	dc03      	bgt.n	800b394 <_dtoa_r+0xb3c>
 800b38c:	9b06      	ldr	r3, [sp, #24]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	f73f aecc 	bgt.w	800b12c <_dtoa_r+0x8d4>
 800b394:	465d      	mov	r5, fp
 800b396:	4639      	mov	r1, r7
 800b398:	9804      	ldr	r0, [sp, #16]
 800b39a:	f7ff f9d1 	bl	800a740 <quorem>
 800b39e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3a2:	f805 8b01 	strb.w	r8, [r5], #1
 800b3a6:	9a02      	ldr	r2, [sp, #8]
 800b3a8:	eba5 030b 	sub.w	r3, r5, fp
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	ddb0      	ble.n	800b312 <_dtoa_r+0xaba>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	9904      	ldr	r1, [sp, #16]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f000 f87e 	bl	800b4b8 <__multadd>
 800b3bc:	9004      	str	r0, [sp, #16]
 800b3be:	e7ea      	b.n	800b396 <_dtoa_r+0xb3e>
 800b3c0:	0800cb14 	.word	0x0800cb14
 800b3c4:	0800cb38 	.word	0x0800cb38

0800b3c8 <_localeconv_r>:
 800b3c8:	4b04      	ldr	r3, [pc, #16]	; (800b3dc <_localeconv_r+0x14>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6a18      	ldr	r0, [r3, #32]
 800b3ce:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <_localeconv_r+0x18>)
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	bf08      	it	eq
 800b3d4:	4618      	moveq	r0, r3
 800b3d6:	30f0      	adds	r0, #240	; 0xf0
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	20000180 	.word	0x20000180
 800b3e0:	200001e4 	.word	0x200001e4

0800b3e4 <__ascii_mbtowc>:
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	b901      	cbnz	r1, 800b3ea <__ascii_mbtowc+0x6>
 800b3e8:	a901      	add	r1, sp, #4
 800b3ea:	b142      	cbz	r2, 800b3fe <__ascii_mbtowc+0x1a>
 800b3ec:	b14b      	cbz	r3, 800b402 <__ascii_mbtowc+0x1e>
 800b3ee:	7813      	ldrb	r3, [r2, #0]
 800b3f0:	600b      	str	r3, [r1, #0]
 800b3f2:	7812      	ldrb	r2, [r2, #0]
 800b3f4:	1c10      	adds	r0, r2, #0
 800b3f6:	bf18      	it	ne
 800b3f8:	2001      	movne	r0, #1
 800b3fa:	b002      	add	sp, #8
 800b3fc:	4770      	bx	lr
 800b3fe:	4610      	mov	r0, r2
 800b400:	e7fb      	b.n	800b3fa <__ascii_mbtowc+0x16>
 800b402:	f06f 0001 	mvn.w	r0, #1
 800b406:	e7f8      	b.n	800b3fa <__ascii_mbtowc+0x16>

0800b408 <memcpy>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	1e43      	subs	r3, r0, #1
 800b40c:	440a      	add	r2, r1
 800b40e:	4291      	cmp	r1, r2
 800b410:	d100      	bne.n	800b414 <memcpy+0xc>
 800b412:	bd10      	pop	{r4, pc}
 800b414:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b41c:	e7f7      	b.n	800b40e <memcpy+0x6>

0800b41e <__malloc_lock>:
 800b41e:	4770      	bx	lr

0800b420 <__malloc_unlock>:
 800b420:	4770      	bx	lr

0800b422 <_Balloc>:
 800b422:	b570      	push	{r4, r5, r6, lr}
 800b424:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b426:	4604      	mov	r4, r0
 800b428:	460e      	mov	r6, r1
 800b42a:	b93d      	cbnz	r5, 800b43c <_Balloc+0x1a>
 800b42c:	2010      	movs	r0, #16
 800b42e:	f7fe fc3b 	bl	8009ca8 <malloc>
 800b432:	6260      	str	r0, [r4, #36]	; 0x24
 800b434:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b438:	6005      	str	r5, [r0, #0]
 800b43a:	60c5      	str	r5, [r0, #12]
 800b43c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b43e:	68eb      	ldr	r3, [r5, #12]
 800b440:	b183      	cbz	r3, 800b464 <_Balloc+0x42>
 800b442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b44a:	b9b8      	cbnz	r0, 800b47c <_Balloc+0x5a>
 800b44c:	2101      	movs	r1, #1
 800b44e:	fa01 f506 	lsl.w	r5, r1, r6
 800b452:	1d6a      	adds	r2, r5, #5
 800b454:	0092      	lsls	r2, r2, #2
 800b456:	4620      	mov	r0, r4
 800b458:	f000 fabe 	bl	800b9d8 <_calloc_r>
 800b45c:	b160      	cbz	r0, 800b478 <_Balloc+0x56>
 800b45e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b462:	e00e      	b.n	800b482 <_Balloc+0x60>
 800b464:	2221      	movs	r2, #33	; 0x21
 800b466:	2104      	movs	r1, #4
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 fab5 	bl	800b9d8 <_calloc_r>
 800b46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b470:	60e8      	str	r0, [r5, #12]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e4      	bne.n	800b442 <_Balloc+0x20>
 800b478:	2000      	movs	r0, #0
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	6802      	ldr	r2, [r0, #0]
 800b47e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b482:	2300      	movs	r3, #0
 800b484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b488:	e7f7      	b.n	800b47a <_Balloc+0x58>

0800b48a <_Bfree>:
 800b48a:	b570      	push	{r4, r5, r6, lr}
 800b48c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b48e:	4606      	mov	r6, r0
 800b490:	460d      	mov	r5, r1
 800b492:	b93c      	cbnz	r4, 800b4a4 <_Bfree+0x1a>
 800b494:	2010      	movs	r0, #16
 800b496:	f7fe fc07 	bl	8009ca8 <malloc>
 800b49a:	6270      	str	r0, [r6, #36]	; 0x24
 800b49c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4a0:	6004      	str	r4, [r0, #0]
 800b4a2:	60c4      	str	r4, [r0, #12]
 800b4a4:	b13d      	cbz	r5, 800b4b6 <_Bfree+0x2c>
 800b4a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b4a8:	686a      	ldr	r2, [r5, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4b0:	6029      	str	r1, [r5, #0]
 800b4b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}

0800b4b8 <__multadd>:
 800b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	690d      	ldr	r5, [r1, #16]
 800b4be:	461f      	mov	r7, r3
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	f101 0c14 	add.w	ip, r1, #20
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f8dc 0000 	ldr.w	r0, [ip]
 800b4ce:	b281      	uxth	r1, r0
 800b4d0:	fb02 7101 	mla	r1, r2, r1, r7
 800b4d4:	0c0f      	lsrs	r7, r1, #16
 800b4d6:	0c00      	lsrs	r0, r0, #16
 800b4d8:	fb02 7000 	mla	r0, r2, r0, r7
 800b4dc:	b289      	uxth	r1, r1
 800b4de:	3301      	adds	r3, #1
 800b4e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b4e4:	429d      	cmp	r5, r3
 800b4e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b4ea:	f84c 1b04 	str.w	r1, [ip], #4
 800b4ee:	dcec      	bgt.n	800b4ca <__multadd+0x12>
 800b4f0:	b1d7      	cbz	r7, 800b528 <__multadd+0x70>
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	42ab      	cmp	r3, r5
 800b4f6:	dc12      	bgt.n	800b51e <__multadd+0x66>
 800b4f8:	6861      	ldr	r1, [r4, #4]
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	3101      	adds	r1, #1
 800b4fe:	f7ff ff90 	bl	800b422 <_Balloc>
 800b502:	6922      	ldr	r2, [r4, #16]
 800b504:	3202      	adds	r2, #2
 800b506:	f104 010c 	add.w	r1, r4, #12
 800b50a:	4680      	mov	r8, r0
 800b50c:	0092      	lsls	r2, r2, #2
 800b50e:	300c      	adds	r0, #12
 800b510:	f7ff ff7a 	bl	800b408 <memcpy>
 800b514:	4621      	mov	r1, r4
 800b516:	4630      	mov	r0, r6
 800b518:	f7ff ffb7 	bl	800b48a <_Bfree>
 800b51c:	4644      	mov	r4, r8
 800b51e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b522:	3501      	adds	r5, #1
 800b524:	615f      	str	r7, [r3, #20]
 800b526:	6125      	str	r5, [r4, #16]
 800b528:	4620      	mov	r0, r4
 800b52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b52e <__hi0bits>:
 800b52e:	0c02      	lsrs	r2, r0, #16
 800b530:	0412      	lsls	r2, r2, #16
 800b532:	4603      	mov	r3, r0
 800b534:	b9b2      	cbnz	r2, 800b564 <__hi0bits+0x36>
 800b536:	0403      	lsls	r3, r0, #16
 800b538:	2010      	movs	r0, #16
 800b53a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b53e:	bf04      	itt	eq
 800b540:	021b      	lsleq	r3, r3, #8
 800b542:	3008      	addeq	r0, #8
 800b544:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b548:	bf04      	itt	eq
 800b54a:	011b      	lsleq	r3, r3, #4
 800b54c:	3004      	addeq	r0, #4
 800b54e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b552:	bf04      	itt	eq
 800b554:	009b      	lsleq	r3, r3, #2
 800b556:	3002      	addeq	r0, #2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	db06      	blt.n	800b56a <__hi0bits+0x3c>
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	d503      	bpl.n	800b568 <__hi0bits+0x3a>
 800b560:	3001      	adds	r0, #1
 800b562:	4770      	bx	lr
 800b564:	2000      	movs	r0, #0
 800b566:	e7e8      	b.n	800b53a <__hi0bits+0xc>
 800b568:	2020      	movs	r0, #32
 800b56a:	4770      	bx	lr

0800b56c <__lo0bits>:
 800b56c:	6803      	ldr	r3, [r0, #0]
 800b56e:	f013 0207 	ands.w	r2, r3, #7
 800b572:	4601      	mov	r1, r0
 800b574:	d00b      	beq.n	800b58e <__lo0bits+0x22>
 800b576:	07da      	lsls	r2, r3, #31
 800b578:	d423      	bmi.n	800b5c2 <__lo0bits+0x56>
 800b57a:	0798      	lsls	r0, r3, #30
 800b57c:	bf49      	itett	mi
 800b57e:	085b      	lsrmi	r3, r3, #1
 800b580:	089b      	lsrpl	r3, r3, #2
 800b582:	2001      	movmi	r0, #1
 800b584:	600b      	strmi	r3, [r1, #0]
 800b586:	bf5c      	itt	pl
 800b588:	600b      	strpl	r3, [r1, #0]
 800b58a:	2002      	movpl	r0, #2
 800b58c:	4770      	bx	lr
 800b58e:	b298      	uxth	r0, r3
 800b590:	b9a8      	cbnz	r0, 800b5be <__lo0bits+0x52>
 800b592:	0c1b      	lsrs	r3, r3, #16
 800b594:	2010      	movs	r0, #16
 800b596:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b59a:	bf04      	itt	eq
 800b59c:	0a1b      	lsreq	r3, r3, #8
 800b59e:	3008      	addeq	r0, #8
 800b5a0:	071a      	lsls	r2, r3, #28
 800b5a2:	bf04      	itt	eq
 800b5a4:	091b      	lsreq	r3, r3, #4
 800b5a6:	3004      	addeq	r0, #4
 800b5a8:	079a      	lsls	r2, r3, #30
 800b5aa:	bf04      	itt	eq
 800b5ac:	089b      	lsreq	r3, r3, #2
 800b5ae:	3002      	addeq	r0, #2
 800b5b0:	07da      	lsls	r2, r3, #31
 800b5b2:	d402      	bmi.n	800b5ba <__lo0bits+0x4e>
 800b5b4:	085b      	lsrs	r3, r3, #1
 800b5b6:	d006      	beq.n	800b5c6 <__lo0bits+0x5a>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	600b      	str	r3, [r1, #0]
 800b5bc:	4770      	bx	lr
 800b5be:	4610      	mov	r0, r2
 800b5c0:	e7e9      	b.n	800b596 <__lo0bits+0x2a>
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	4770      	bx	lr
 800b5c6:	2020      	movs	r0, #32
 800b5c8:	4770      	bx	lr

0800b5ca <__i2b>:
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	f7ff ff27 	bl	800b422 <_Balloc>
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	6144      	str	r4, [r0, #20]
 800b5d8:	6102      	str	r2, [r0, #16]
 800b5da:	bd10      	pop	{r4, pc}

0800b5dc <__multiply>:
 800b5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	4614      	mov	r4, r2
 800b5e2:	690a      	ldr	r2, [r1, #16]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	bfb8      	it	lt
 800b5ea:	460b      	movlt	r3, r1
 800b5ec:	4688      	mov	r8, r1
 800b5ee:	bfbc      	itt	lt
 800b5f0:	46a0      	movlt	r8, r4
 800b5f2:	461c      	movlt	r4, r3
 800b5f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b600:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b604:	eb07 0609 	add.w	r6, r7, r9
 800b608:	42b3      	cmp	r3, r6
 800b60a:	bfb8      	it	lt
 800b60c:	3101      	addlt	r1, #1
 800b60e:	f7ff ff08 	bl	800b422 <_Balloc>
 800b612:	f100 0514 	add.w	r5, r0, #20
 800b616:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b61a:	462b      	mov	r3, r5
 800b61c:	2200      	movs	r2, #0
 800b61e:	4573      	cmp	r3, lr
 800b620:	d316      	bcc.n	800b650 <__multiply+0x74>
 800b622:	f104 0214 	add.w	r2, r4, #20
 800b626:	f108 0114 	add.w	r1, r8, #20
 800b62a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b62e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	9b00      	ldr	r3, [sp, #0]
 800b636:	9201      	str	r2, [sp, #4]
 800b638:	4293      	cmp	r3, r2
 800b63a:	d80c      	bhi.n	800b656 <__multiply+0x7a>
 800b63c:	2e00      	cmp	r6, #0
 800b63e:	dd03      	ble.n	800b648 <__multiply+0x6c>
 800b640:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b644:	2b00      	cmp	r3, #0
 800b646:	d05d      	beq.n	800b704 <__multiply+0x128>
 800b648:	6106      	str	r6, [r0, #16]
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b650:	f843 2b04 	str.w	r2, [r3], #4
 800b654:	e7e3      	b.n	800b61e <__multiply+0x42>
 800b656:	f8b2 b000 	ldrh.w	fp, [r2]
 800b65a:	f1bb 0f00 	cmp.w	fp, #0
 800b65e:	d023      	beq.n	800b6a8 <__multiply+0xcc>
 800b660:	4689      	mov	r9, r1
 800b662:	46ac      	mov	ip, r5
 800b664:	f04f 0800 	mov.w	r8, #0
 800b668:	f859 4b04 	ldr.w	r4, [r9], #4
 800b66c:	f8dc a000 	ldr.w	sl, [ip]
 800b670:	b2a3      	uxth	r3, r4
 800b672:	fa1f fa8a 	uxth.w	sl, sl
 800b676:	fb0b a303 	mla	r3, fp, r3, sl
 800b67a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b67e:	f8dc 4000 	ldr.w	r4, [ip]
 800b682:	4443      	add	r3, r8
 800b684:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b688:	fb0b 840a 	mla	r4, fp, sl, r8
 800b68c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b690:	46e2      	mov	sl, ip
 800b692:	b29b      	uxth	r3, r3
 800b694:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b698:	454f      	cmp	r7, r9
 800b69a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b69e:	f84a 3b04 	str.w	r3, [sl], #4
 800b6a2:	d82b      	bhi.n	800b6fc <__multiply+0x120>
 800b6a4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b6ae:	3204      	adds	r2, #4
 800b6b0:	f1ba 0f00 	cmp.w	sl, #0
 800b6b4:	d020      	beq.n	800b6f8 <__multiply+0x11c>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	46a8      	mov	r8, r5
 800b6bc:	f04f 0b00 	mov.w	fp, #0
 800b6c0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b6c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b6c8:	fb0a 440c 	mla	r4, sl, ip, r4
 800b6cc:	445c      	add	r4, fp
 800b6ce:	46c4      	mov	ip, r8
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6d6:	f84c 3b04 	str.w	r3, [ip], #4
 800b6da:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b6e2:	0c1b      	lsrs	r3, r3, #16
 800b6e4:	fb0a b303 	mla	r3, sl, r3, fp
 800b6e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6ec:	454f      	cmp	r7, r9
 800b6ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6f2:	d805      	bhi.n	800b700 <__multiply+0x124>
 800b6f4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6f8:	3504      	adds	r5, #4
 800b6fa:	e79b      	b.n	800b634 <__multiply+0x58>
 800b6fc:	46d4      	mov	ip, sl
 800b6fe:	e7b3      	b.n	800b668 <__multiply+0x8c>
 800b700:	46e0      	mov	r8, ip
 800b702:	e7dd      	b.n	800b6c0 <__multiply+0xe4>
 800b704:	3e01      	subs	r6, #1
 800b706:	e799      	b.n	800b63c <__multiply+0x60>

0800b708 <__pow5mult>:
 800b708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b70c:	4615      	mov	r5, r2
 800b70e:	f012 0203 	ands.w	r2, r2, #3
 800b712:	4606      	mov	r6, r0
 800b714:	460f      	mov	r7, r1
 800b716:	d007      	beq.n	800b728 <__pow5mult+0x20>
 800b718:	3a01      	subs	r2, #1
 800b71a:	4c21      	ldr	r4, [pc, #132]	; (800b7a0 <__pow5mult+0x98>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b722:	f7ff fec9 	bl	800b4b8 <__multadd>
 800b726:	4607      	mov	r7, r0
 800b728:	10ad      	asrs	r5, r5, #2
 800b72a:	d035      	beq.n	800b798 <__pow5mult+0x90>
 800b72c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b72e:	b93c      	cbnz	r4, 800b740 <__pow5mult+0x38>
 800b730:	2010      	movs	r0, #16
 800b732:	f7fe fab9 	bl	8009ca8 <malloc>
 800b736:	6270      	str	r0, [r6, #36]	; 0x24
 800b738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b73c:	6004      	str	r4, [r0, #0]
 800b73e:	60c4      	str	r4, [r0, #12]
 800b740:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b748:	b94c      	cbnz	r4, 800b75e <__pow5mult+0x56>
 800b74a:	f240 2171 	movw	r1, #625	; 0x271
 800b74e:	4630      	mov	r0, r6
 800b750:	f7ff ff3b 	bl	800b5ca <__i2b>
 800b754:	2300      	movs	r3, #0
 800b756:	f8c8 0008 	str.w	r0, [r8, #8]
 800b75a:	4604      	mov	r4, r0
 800b75c:	6003      	str	r3, [r0, #0]
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	07eb      	lsls	r3, r5, #31
 800b764:	d50a      	bpl.n	800b77c <__pow5mult+0x74>
 800b766:	4639      	mov	r1, r7
 800b768:	4622      	mov	r2, r4
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7ff ff36 	bl	800b5dc <__multiply>
 800b770:	4639      	mov	r1, r7
 800b772:	4681      	mov	r9, r0
 800b774:	4630      	mov	r0, r6
 800b776:	f7ff fe88 	bl	800b48a <_Bfree>
 800b77a:	464f      	mov	r7, r9
 800b77c:	106d      	asrs	r5, r5, #1
 800b77e:	d00b      	beq.n	800b798 <__pow5mult+0x90>
 800b780:	6820      	ldr	r0, [r4, #0]
 800b782:	b938      	cbnz	r0, 800b794 <__pow5mult+0x8c>
 800b784:	4622      	mov	r2, r4
 800b786:	4621      	mov	r1, r4
 800b788:	4630      	mov	r0, r6
 800b78a:	f7ff ff27 	bl	800b5dc <__multiply>
 800b78e:	6020      	str	r0, [r4, #0]
 800b790:	f8c0 8000 	str.w	r8, [r0]
 800b794:	4604      	mov	r4, r0
 800b796:	e7e4      	b.n	800b762 <__pow5mult+0x5a>
 800b798:	4638      	mov	r0, r7
 800b79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800cc40 	.word	0x0800cc40

0800b7a4 <__lshift>:
 800b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	6849      	ldr	r1, [r1, #4]
 800b7b2:	eb0a 0903 	add.w	r9, sl, r3
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	f109 0501 	add.w	r5, r9, #1
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	db32      	blt.n	800b82a <__lshift+0x86>
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff fe2c 	bl	800b422 <_Balloc>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4680      	mov	r8, r0
 800b7ce:	f100 0114 	add.w	r1, r0, #20
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	4553      	cmp	r3, sl
 800b7d6:	db2b      	blt.n	800b830 <__lshift+0x8c>
 800b7d8:	6920      	ldr	r0, [r4, #16]
 800b7da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7de:	f104 0314 	add.w	r3, r4, #20
 800b7e2:	f016 021f 	ands.w	r2, r6, #31
 800b7e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7ee:	d025      	beq.n	800b83c <__lshift+0x98>
 800b7f0:	f1c2 0e20 	rsb	lr, r2, #32
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	681e      	ldr	r6, [r3, #0]
 800b7f8:	468a      	mov	sl, r1
 800b7fa:	4096      	lsls	r6, r2
 800b7fc:	4330      	orrs	r0, r6
 800b7fe:	f84a 0b04 	str.w	r0, [sl], #4
 800b802:	f853 0b04 	ldr.w	r0, [r3], #4
 800b806:	459c      	cmp	ip, r3
 800b808:	fa20 f00e 	lsr.w	r0, r0, lr
 800b80c:	d814      	bhi.n	800b838 <__lshift+0x94>
 800b80e:	6048      	str	r0, [r1, #4]
 800b810:	b108      	cbz	r0, 800b816 <__lshift+0x72>
 800b812:	f109 0502 	add.w	r5, r9, #2
 800b816:	3d01      	subs	r5, #1
 800b818:	4638      	mov	r0, r7
 800b81a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b81e:	4621      	mov	r1, r4
 800b820:	f7ff fe33 	bl	800b48a <_Bfree>
 800b824:	4640      	mov	r0, r8
 800b826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82a:	3101      	adds	r1, #1
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	e7c7      	b.n	800b7c0 <__lshift+0x1c>
 800b830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b834:	3301      	adds	r3, #1
 800b836:	e7cd      	b.n	800b7d4 <__lshift+0x30>
 800b838:	4651      	mov	r1, sl
 800b83a:	e7dc      	b.n	800b7f6 <__lshift+0x52>
 800b83c:	3904      	subs	r1, #4
 800b83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b842:	f841 2f04 	str.w	r2, [r1, #4]!
 800b846:	459c      	cmp	ip, r3
 800b848:	d8f9      	bhi.n	800b83e <__lshift+0x9a>
 800b84a:	e7e4      	b.n	800b816 <__lshift+0x72>

0800b84c <__mcmp>:
 800b84c:	6903      	ldr	r3, [r0, #16]
 800b84e:	690a      	ldr	r2, [r1, #16]
 800b850:	1a9b      	subs	r3, r3, r2
 800b852:	b530      	push	{r4, r5, lr}
 800b854:	d10c      	bne.n	800b870 <__mcmp+0x24>
 800b856:	0092      	lsls	r2, r2, #2
 800b858:	3014      	adds	r0, #20
 800b85a:	3114      	adds	r1, #20
 800b85c:	1884      	adds	r4, r0, r2
 800b85e:	4411      	add	r1, r2
 800b860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b868:	4295      	cmp	r5, r2
 800b86a:	d003      	beq.n	800b874 <__mcmp+0x28>
 800b86c:	d305      	bcc.n	800b87a <__mcmp+0x2e>
 800b86e:	2301      	movs	r3, #1
 800b870:	4618      	mov	r0, r3
 800b872:	bd30      	pop	{r4, r5, pc}
 800b874:	42a0      	cmp	r0, r4
 800b876:	d3f3      	bcc.n	800b860 <__mcmp+0x14>
 800b878:	e7fa      	b.n	800b870 <__mcmp+0x24>
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
 800b87e:	e7f7      	b.n	800b870 <__mcmp+0x24>

0800b880 <__mdiff>:
 800b880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b884:	460d      	mov	r5, r1
 800b886:	4607      	mov	r7, r0
 800b888:	4611      	mov	r1, r2
 800b88a:	4628      	mov	r0, r5
 800b88c:	4614      	mov	r4, r2
 800b88e:	f7ff ffdd 	bl	800b84c <__mcmp>
 800b892:	1e06      	subs	r6, r0, #0
 800b894:	d108      	bne.n	800b8a8 <__mdiff+0x28>
 800b896:	4631      	mov	r1, r6
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff fdc2 	bl	800b422 <_Balloc>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a8:	bfa4      	itt	ge
 800b8aa:	4623      	movge	r3, r4
 800b8ac:	462c      	movge	r4, r5
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	6861      	ldr	r1, [r4, #4]
 800b8b2:	bfa6      	itte	ge
 800b8b4:	461d      	movge	r5, r3
 800b8b6:	2600      	movge	r6, #0
 800b8b8:	2601      	movlt	r6, #1
 800b8ba:	f7ff fdb2 	bl	800b422 <_Balloc>
 800b8be:	692b      	ldr	r3, [r5, #16]
 800b8c0:	60c6      	str	r6, [r0, #12]
 800b8c2:	6926      	ldr	r6, [r4, #16]
 800b8c4:	f105 0914 	add.w	r9, r5, #20
 800b8c8:	f104 0214 	add.w	r2, r4, #20
 800b8cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b8d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b8d4:	f100 0514 	add.w	r5, r0, #20
 800b8d8:	f04f 0e00 	mov.w	lr, #0
 800b8dc:	f852 ab04 	ldr.w	sl, [r2], #4
 800b8e0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b8e4:	fa1e f18a 	uxtah	r1, lr, sl
 800b8e8:	b2a3      	uxth	r3, r4
 800b8ea:	1ac9      	subs	r1, r1, r3
 800b8ec:	0c23      	lsrs	r3, r4, #16
 800b8ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b8f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8f6:	b289      	uxth	r1, r1
 800b8f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8fc:	45c8      	cmp	r8, r9
 800b8fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b902:	4694      	mov	ip, r2
 800b904:	f845 3b04 	str.w	r3, [r5], #4
 800b908:	d8e8      	bhi.n	800b8dc <__mdiff+0x5c>
 800b90a:	45bc      	cmp	ip, r7
 800b90c:	d304      	bcc.n	800b918 <__mdiff+0x98>
 800b90e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b912:	b183      	cbz	r3, 800b936 <__mdiff+0xb6>
 800b914:	6106      	str	r6, [r0, #16]
 800b916:	e7c5      	b.n	800b8a4 <__mdiff+0x24>
 800b918:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b91c:	fa1e f381 	uxtah	r3, lr, r1
 800b920:	141a      	asrs	r2, r3, #16
 800b922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b926:	b29b      	uxth	r3, r3
 800b928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b92c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b930:	f845 3b04 	str.w	r3, [r5], #4
 800b934:	e7e9      	b.n	800b90a <__mdiff+0x8a>
 800b936:	3e01      	subs	r6, #1
 800b938:	e7e9      	b.n	800b90e <__mdiff+0x8e>

0800b93a <__d2b>:
 800b93a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b93e:	460e      	mov	r6, r1
 800b940:	2101      	movs	r1, #1
 800b942:	ec59 8b10 	vmov	r8, r9, d0
 800b946:	4615      	mov	r5, r2
 800b948:	f7ff fd6b 	bl	800b422 <_Balloc>
 800b94c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b950:	4607      	mov	r7, r0
 800b952:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b956:	bb34      	cbnz	r4, 800b9a6 <__d2b+0x6c>
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	f1b8 0300 	subs.w	r3, r8, #0
 800b95e:	d027      	beq.n	800b9b0 <__d2b+0x76>
 800b960:	a802      	add	r0, sp, #8
 800b962:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b966:	f7ff fe01 	bl	800b56c <__lo0bits>
 800b96a:	9900      	ldr	r1, [sp, #0]
 800b96c:	b1f0      	cbz	r0, 800b9ac <__d2b+0x72>
 800b96e:	9a01      	ldr	r2, [sp, #4]
 800b970:	f1c0 0320 	rsb	r3, r0, #32
 800b974:	fa02 f303 	lsl.w	r3, r2, r3
 800b978:	430b      	orrs	r3, r1
 800b97a:	40c2      	lsrs	r2, r0
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	9201      	str	r2, [sp, #4]
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	61bb      	str	r3, [r7, #24]
 800b984:	2b00      	cmp	r3, #0
 800b986:	bf14      	ite	ne
 800b988:	2102      	movne	r1, #2
 800b98a:	2101      	moveq	r1, #1
 800b98c:	6139      	str	r1, [r7, #16]
 800b98e:	b1c4      	cbz	r4, 800b9c2 <__d2b+0x88>
 800b990:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b994:	4404      	add	r4, r0
 800b996:	6034      	str	r4, [r6, #0]
 800b998:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b99c:	6028      	str	r0, [r5, #0]
 800b99e:	4638      	mov	r0, r7
 800b9a0:	b003      	add	sp, #12
 800b9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9aa:	e7d5      	b.n	800b958 <__d2b+0x1e>
 800b9ac:	6179      	str	r1, [r7, #20]
 800b9ae:	e7e7      	b.n	800b980 <__d2b+0x46>
 800b9b0:	a801      	add	r0, sp, #4
 800b9b2:	f7ff fddb 	bl	800b56c <__lo0bits>
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	6139      	str	r1, [r7, #16]
 800b9be:	3020      	adds	r0, #32
 800b9c0:	e7e5      	b.n	800b98e <__d2b+0x54>
 800b9c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b9c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9ca:	6030      	str	r0, [r6, #0]
 800b9cc:	6918      	ldr	r0, [r3, #16]
 800b9ce:	f7ff fdae 	bl	800b52e <__hi0bits>
 800b9d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9d6:	e7e1      	b.n	800b99c <__d2b+0x62>

0800b9d8 <_calloc_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	fb02 f401 	mul.w	r4, r2, r1
 800b9de:	4621      	mov	r1, r4
 800b9e0:	f7fe f9c8 	bl	8009d74 <_malloc_r>
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	b118      	cbz	r0, 800b9f0 <_calloc_r+0x18>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	f7fe f96c 	bl	8009cc8 <memset>
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}

0800b9f4 <__ssputs_r>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	688e      	ldr	r6, [r1, #8]
 800b9fa:	429e      	cmp	r6, r3
 800b9fc:	4682      	mov	sl, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4690      	mov	r8, r2
 800ba02:	4699      	mov	r9, r3
 800ba04:	d837      	bhi.n	800ba76 <__ssputs_r+0x82>
 800ba06:	898a      	ldrh	r2, [r1, #12]
 800ba08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba0c:	d031      	beq.n	800ba72 <__ssputs_r+0x7e>
 800ba0e:	6825      	ldr	r5, [r4, #0]
 800ba10:	6909      	ldr	r1, [r1, #16]
 800ba12:	1a6f      	subs	r7, r5, r1
 800ba14:	6965      	ldr	r5, [r4, #20]
 800ba16:	2302      	movs	r3, #2
 800ba18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba1c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba20:	f109 0301 	add.w	r3, r9, #1
 800ba24:	443b      	add	r3, r7
 800ba26:	429d      	cmp	r5, r3
 800ba28:	bf38      	it	cc
 800ba2a:	461d      	movcc	r5, r3
 800ba2c:	0553      	lsls	r3, r2, #21
 800ba2e:	d530      	bpl.n	800ba92 <__ssputs_r+0x9e>
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7fe f99f 	bl	8009d74 <_malloc_r>
 800ba36:	4606      	mov	r6, r0
 800ba38:	b950      	cbnz	r0, 800ba50 <__ssputs_r+0x5c>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	f8ca 3000 	str.w	r3, [sl]
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba50:	463a      	mov	r2, r7
 800ba52:	6921      	ldr	r1, [r4, #16]
 800ba54:	f7ff fcd8 	bl	800b408 <memcpy>
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	6126      	str	r6, [r4, #16]
 800ba66:	6165      	str	r5, [r4, #20]
 800ba68:	443e      	add	r6, r7
 800ba6a:	1bed      	subs	r5, r5, r7
 800ba6c:	6026      	str	r6, [r4, #0]
 800ba6e:	60a5      	str	r5, [r4, #8]
 800ba70:	464e      	mov	r6, r9
 800ba72:	454e      	cmp	r6, r9
 800ba74:	d900      	bls.n	800ba78 <__ssputs_r+0x84>
 800ba76:	464e      	mov	r6, r9
 800ba78:	4632      	mov	r2, r6
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	f000 f918 	bl	800bcb2 <memmove>
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	1b9b      	subs	r3, r3, r6
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	441e      	add	r6, r3
 800ba8c:	6026      	str	r6, [r4, #0]
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e7dc      	b.n	800ba4c <__ssputs_r+0x58>
 800ba92:	462a      	mov	r2, r5
 800ba94:	f000 f926 	bl	800bce4 <_realloc_r>
 800ba98:	4606      	mov	r6, r0
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1e2      	bne.n	800ba64 <__ssputs_r+0x70>
 800ba9e:	6921      	ldr	r1, [r4, #16]
 800baa0:	4650      	mov	r0, sl
 800baa2:	f7fe f919 	bl	8009cd8 <_free_r>
 800baa6:	e7c8      	b.n	800ba3a <__ssputs_r+0x46>

0800baa8 <_svfiprintf_r>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	461d      	mov	r5, r3
 800baae:	898b      	ldrh	r3, [r1, #12]
 800bab0:	061f      	lsls	r7, r3, #24
 800bab2:	b09d      	sub	sp, #116	; 0x74
 800bab4:	4680      	mov	r8, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	4616      	mov	r6, r2
 800baba:	d50f      	bpl.n	800badc <_svfiprintf_r+0x34>
 800babc:	690b      	ldr	r3, [r1, #16]
 800babe:	b96b      	cbnz	r3, 800badc <_svfiprintf_r+0x34>
 800bac0:	2140      	movs	r1, #64	; 0x40
 800bac2:	f7fe f957 	bl	8009d74 <_malloc_r>
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	6120      	str	r0, [r4, #16]
 800baca:	b928      	cbnz	r0, 800bad8 <_svfiprintf_r+0x30>
 800bacc:	230c      	movs	r3, #12
 800bace:	f8c8 3000 	str.w	r3, [r8]
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295
 800bad6:	e0c8      	b.n	800bc6a <_svfiprintf_r+0x1c2>
 800bad8:	2340      	movs	r3, #64	; 0x40
 800bada:	6163      	str	r3, [r4, #20]
 800badc:	2300      	movs	r3, #0
 800bade:	9309      	str	r3, [sp, #36]	; 0x24
 800bae0:	2320      	movs	r3, #32
 800bae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bae6:	2330      	movs	r3, #48	; 0x30
 800bae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baec:	9503      	str	r5, [sp, #12]
 800baee:	f04f 0b01 	mov.w	fp, #1
 800baf2:	4637      	mov	r7, r6
 800baf4:	463d      	mov	r5, r7
 800baf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bafa:	b10b      	cbz	r3, 800bb00 <_svfiprintf_r+0x58>
 800bafc:	2b25      	cmp	r3, #37	; 0x25
 800bafe:	d13e      	bne.n	800bb7e <_svfiprintf_r+0xd6>
 800bb00:	ebb7 0a06 	subs.w	sl, r7, r6
 800bb04:	d00b      	beq.n	800bb1e <_svfiprintf_r+0x76>
 800bb06:	4653      	mov	r3, sl
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	f7ff ff71 	bl	800b9f4 <__ssputs_r>
 800bb12:	3001      	adds	r0, #1
 800bb14:	f000 80a4 	beq.w	800bc60 <_svfiprintf_r+0x1b8>
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	4453      	add	r3, sl
 800bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1e:	783b      	ldrb	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 809d 	beq.w	800bc60 <_svfiprintf_r+0x1b8>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb30:	9304      	str	r3, [sp, #16]
 800bb32:	9307      	str	r3, [sp, #28]
 800bb34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb38:	931a      	str	r3, [sp, #104]	; 0x68
 800bb3a:	462f      	mov	r7, r5
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb42:	4850      	ldr	r0, [pc, #320]	; (800bc84 <_svfiprintf_r+0x1dc>)
 800bb44:	f7f4 fb4c 	bl	80001e0 <memchr>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	b9d0      	cbnz	r0, 800bb82 <_svfiprintf_r+0xda>
 800bb4c:	06d9      	lsls	r1, r3, #27
 800bb4e:	bf44      	itt	mi
 800bb50:	2220      	movmi	r2, #32
 800bb52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb56:	071a      	lsls	r2, r3, #28
 800bb58:	bf44      	itt	mi
 800bb5a:	222b      	movmi	r2, #43	; 0x2b
 800bb5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb60:	782a      	ldrb	r2, [r5, #0]
 800bb62:	2a2a      	cmp	r2, #42	; 0x2a
 800bb64:	d015      	beq.n	800bb92 <_svfiprintf_r+0xea>
 800bb66:	9a07      	ldr	r2, [sp, #28]
 800bb68:	462f      	mov	r7, r5
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	250a      	movs	r5, #10
 800bb6e:	4639      	mov	r1, r7
 800bb70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb74:	3b30      	subs	r3, #48	; 0x30
 800bb76:	2b09      	cmp	r3, #9
 800bb78:	d94d      	bls.n	800bc16 <_svfiprintf_r+0x16e>
 800bb7a:	b1b8      	cbz	r0, 800bbac <_svfiprintf_r+0x104>
 800bb7c:	e00f      	b.n	800bb9e <_svfiprintf_r+0xf6>
 800bb7e:	462f      	mov	r7, r5
 800bb80:	e7b8      	b.n	800baf4 <_svfiprintf_r+0x4c>
 800bb82:	4a40      	ldr	r2, [pc, #256]	; (800bc84 <_svfiprintf_r+0x1dc>)
 800bb84:	1a80      	subs	r0, r0, r2
 800bb86:	fa0b f000 	lsl.w	r0, fp, r0
 800bb8a:	4318      	orrs	r0, r3
 800bb8c:	9004      	str	r0, [sp, #16]
 800bb8e:	463d      	mov	r5, r7
 800bb90:	e7d3      	b.n	800bb3a <_svfiprintf_r+0x92>
 800bb92:	9a03      	ldr	r2, [sp, #12]
 800bb94:	1d11      	adds	r1, r2, #4
 800bb96:	6812      	ldr	r2, [r2, #0]
 800bb98:	9103      	str	r1, [sp, #12]
 800bb9a:	2a00      	cmp	r2, #0
 800bb9c:	db01      	blt.n	800bba2 <_svfiprintf_r+0xfa>
 800bb9e:	9207      	str	r2, [sp, #28]
 800bba0:	e004      	b.n	800bbac <_svfiprintf_r+0x104>
 800bba2:	4252      	negs	r2, r2
 800bba4:	f043 0302 	orr.w	r3, r3, #2
 800bba8:	9207      	str	r2, [sp, #28]
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	783b      	ldrb	r3, [r7, #0]
 800bbae:	2b2e      	cmp	r3, #46	; 0x2e
 800bbb0:	d10c      	bne.n	800bbcc <_svfiprintf_r+0x124>
 800bbb2:	787b      	ldrb	r3, [r7, #1]
 800bbb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb6:	d133      	bne.n	800bc20 <_svfiprintf_r+0x178>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d1a      	adds	r2, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9203      	str	r2, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfb8      	it	lt
 800bbc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbc8:	3702      	adds	r7, #2
 800bbca:	9305      	str	r3, [sp, #20]
 800bbcc:	4d2e      	ldr	r5, [pc, #184]	; (800bc88 <_svfiprintf_r+0x1e0>)
 800bbce:	7839      	ldrb	r1, [r7, #0]
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f7f4 fb04 	bl	80001e0 <memchr>
 800bbd8:	b138      	cbz	r0, 800bbea <_svfiprintf_r+0x142>
 800bbda:	2340      	movs	r3, #64	; 0x40
 800bbdc:	1b40      	subs	r0, r0, r5
 800bbde:	fa03 f000 	lsl.w	r0, r3, r0
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	4303      	orrs	r3, r0
 800bbe6:	3701      	adds	r7, #1
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	7839      	ldrb	r1, [r7, #0]
 800bbec:	4827      	ldr	r0, [pc, #156]	; (800bc8c <_svfiprintf_r+0x1e4>)
 800bbee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbf2:	2206      	movs	r2, #6
 800bbf4:	1c7e      	adds	r6, r7, #1
 800bbf6:	f7f4 faf3 	bl	80001e0 <memchr>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d038      	beq.n	800bc70 <_svfiprintf_r+0x1c8>
 800bbfe:	4b24      	ldr	r3, [pc, #144]	; (800bc90 <_svfiprintf_r+0x1e8>)
 800bc00:	bb13      	cbnz	r3, 800bc48 <_svfiprintf_r+0x1a0>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	3307      	adds	r3, #7
 800bc06:	f023 0307 	bic.w	r3, r3, #7
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	9303      	str	r3, [sp, #12]
 800bc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc10:	444b      	add	r3, r9
 800bc12:	9309      	str	r3, [sp, #36]	; 0x24
 800bc14:	e76d      	b.n	800baf2 <_svfiprintf_r+0x4a>
 800bc16:	fb05 3202 	mla	r2, r5, r2, r3
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	e7a6      	b.n	800bb6e <_svfiprintf_r+0xc6>
 800bc20:	2300      	movs	r3, #0
 800bc22:	3701      	adds	r7, #1
 800bc24:	9305      	str	r3, [sp, #20]
 800bc26:	4619      	mov	r1, r3
 800bc28:	250a      	movs	r5, #10
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc30:	3a30      	subs	r2, #48	; 0x30
 800bc32:	2a09      	cmp	r2, #9
 800bc34:	d903      	bls.n	800bc3e <_svfiprintf_r+0x196>
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0c8      	beq.n	800bbcc <_svfiprintf_r+0x124>
 800bc3a:	9105      	str	r1, [sp, #20]
 800bc3c:	e7c6      	b.n	800bbcc <_svfiprintf_r+0x124>
 800bc3e:	fb05 2101 	mla	r1, r5, r1, r2
 800bc42:	2301      	movs	r3, #1
 800bc44:	4607      	mov	r7, r0
 800bc46:	e7f0      	b.n	800bc2a <_svfiprintf_r+0x182>
 800bc48:	ab03      	add	r3, sp, #12
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <_svfiprintf_r+0x1ec>)
 800bc50:	a904      	add	r1, sp, #16
 800bc52:	4640      	mov	r0, r8
 800bc54:	f7fe f97c 	bl	8009f50 <_printf_float>
 800bc58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc5c:	4681      	mov	r9, r0
 800bc5e:	d1d6      	bne.n	800bc0e <_svfiprintf_r+0x166>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	065b      	lsls	r3, r3, #25
 800bc64:	f53f af35 	bmi.w	800bad2 <_svfiprintf_r+0x2a>
 800bc68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc6a:	b01d      	add	sp, #116	; 0x74
 800bc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc70:	ab03      	add	r3, sp, #12
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	4622      	mov	r2, r4
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <_svfiprintf_r+0x1ec>)
 800bc78:	a904      	add	r1, sp, #16
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	f7fe fc1e 	bl	800a4bc <_printf_i>
 800bc80:	e7ea      	b.n	800bc58 <_svfiprintf_r+0x1b0>
 800bc82:	bf00      	nop
 800bc84:	0800cc4c 	.word	0x0800cc4c
 800bc88:	0800cc52 	.word	0x0800cc52
 800bc8c:	0800cc56 	.word	0x0800cc56
 800bc90:	08009f51 	.word	0x08009f51
 800bc94:	0800b9f5 	.word	0x0800b9f5

0800bc98 <__ascii_wctomb>:
 800bc98:	b149      	cbz	r1, 800bcae <__ascii_wctomb+0x16>
 800bc9a:	2aff      	cmp	r2, #255	; 0xff
 800bc9c:	bf85      	ittet	hi
 800bc9e:	238a      	movhi	r3, #138	; 0x8a
 800bca0:	6003      	strhi	r3, [r0, #0]
 800bca2:	700a      	strbls	r2, [r1, #0]
 800bca4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bca8:	bf98      	it	ls
 800bcaa:	2001      	movls	r0, #1
 800bcac:	4770      	bx	lr
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4770      	bx	lr

0800bcb2 <memmove>:
 800bcb2:	4288      	cmp	r0, r1
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	eb01 0302 	add.w	r3, r1, r2
 800bcba:	d807      	bhi.n	800bccc <memmove+0x1a>
 800bcbc:	1e42      	subs	r2, r0, #1
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d00a      	beq.n	800bcd8 <memmove+0x26>
 800bcc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bcca:	e7f8      	b.n	800bcbe <memmove+0xc>
 800bccc:	4283      	cmp	r3, r0
 800bcce:	d9f5      	bls.n	800bcbc <memmove+0xa>
 800bcd0:	1881      	adds	r1, r0, r2
 800bcd2:	1ad2      	subs	r2, r2, r3
 800bcd4:	42d3      	cmn	r3, r2
 800bcd6:	d100      	bne.n	800bcda <memmove+0x28>
 800bcd8:	bd10      	pop	{r4, pc}
 800bcda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bce2:	e7f7      	b.n	800bcd4 <memmove+0x22>

0800bce4 <_realloc_r>:
 800bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce6:	4607      	mov	r7, r0
 800bce8:	4614      	mov	r4, r2
 800bcea:	460e      	mov	r6, r1
 800bcec:	b921      	cbnz	r1, 800bcf8 <_realloc_r+0x14>
 800bcee:	4611      	mov	r1, r2
 800bcf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcf4:	f7fe b83e 	b.w	8009d74 <_malloc_r>
 800bcf8:	b922      	cbnz	r2, 800bd04 <_realloc_r+0x20>
 800bcfa:	f7fd ffed 	bl	8009cd8 <_free_r>
 800bcfe:	4625      	mov	r5, r4
 800bd00:	4628      	mov	r0, r5
 800bd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd04:	f000 f814 	bl	800bd30 <_malloc_usable_size_r>
 800bd08:	42a0      	cmp	r0, r4
 800bd0a:	d20f      	bcs.n	800bd2c <_realloc_r+0x48>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4638      	mov	r0, r7
 800bd10:	f7fe f830 	bl	8009d74 <_malloc_r>
 800bd14:	4605      	mov	r5, r0
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d0f2      	beq.n	800bd00 <_realloc_r+0x1c>
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	f7ff fb73 	bl	800b408 <memcpy>
 800bd22:	4631      	mov	r1, r6
 800bd24:	4638      	mov	r0, r7
 800bd26:	f7fd ffd7 	bl	8009cd8 <_free_r>
 800bd2a:	e7e9      	b.n	800bd00 <_realloc_r+0x1c>
 800bd2c:	4635      	mov	r5, r6
 800bd2e:	e7e7      	b.n	800bd00 <_realloc_r+0x1c>

0800bd30 <_malloc_usable_size_r>:
 800bd30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd34:	1f18      	subs	r0, r3, #4
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	bfbc      	itt	lt
 800bd3a:	580b      	ldrlt	r3, [r1, r0]
 800bd3c:	18c0      	addlt	r0, r0, r3
 800bd3e:	4770      	bx	lr

0800bd40 <cosf>:
 800bd40:	ee10 3a10 	vmov	r3, s0
 800bd44:	b507      	push	{r0, r1, r2, lr}
 800bd46:	4a1c      	ldr	r2, [pc, #112]	; (800bdb8 <cosf+0x78>)
 800bd48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	dc04      	bgt.n	800bd5a <cosf+0x1a>
 800bd50:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800bdbc <cosf+0x7c>
 800bd54:	f000 f9ca 	bl	800c0ec <__kernel_cosf>
 800bd58:	e004      	b.n	800bd64 <cosf+0x24>
 800bd5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd5e:	db04      	blt.n	800bd6a <cosf+0x2a>
 800bd60:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bd64:	b003      	add	sp, #12
 800bd66:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd6a:	4668      	mov	r0, sp
 800bd6c:	f000 f892 	bl	800be94 <__ieee754_rem_pio2f>
 800bd70:	f000 0003 	and.w	r0, r0, #3
 800bd74:	2801      	cmp	r0, #1
 800bd76:	d007      	beq.n	800bd88 <cosf+0x48>
 800bd78:	2802      	cmp	r0, #2
 800bd7a:	d00e      	beq.n	800bd9a <cosf+0x5a>
 800bd7c:	b9a0      	cbnz	r0, 800bda8 <cosf+0x68>
 800bd7e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd82:	ed9d 0a00 	vldr	s0, [sp]
 800bd86:	e7e5      	b.n	800bd54 <cosf+0x14>
 800bd88:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd8c:	ed9d 0a00 	vldr	s0, [sp]
 800bd90:	f000 fc8c 	bl	800c6ac <__kernel_sinf>
 800bd94:	eeb1 0a40 	vneg.f32	s0, s0
 800bd98:	e7e4      	b.n	800bd64 <cosf+0x24>
 800bd9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd9e:	ed9d 0a00 	vldr	s0, [sp]
 800bda2:	f000 f9a3 	bl	800c0ec <__kernel_cosf>
 800bda6:	e7f5      	b.n	800bd94 <cosf+0x54>
 800bda8:	2001      	movs	r0, #1
 800bdaa:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdae:	ed9d 0a00 	vldr	s0, [sp]
 800bdb2:	f000 fc7b 	bl	800c6ac <__kernel_sinf>
 800bdb6:	e7d5      	b.n	800bd64 <cosf+0x24>
 800bdb8:	3f490fd8 	.word	0x3f490fd8
 800bdbc:	00000000 	.word	0x00000000

0800bdc0 <sinf>:
 800bdc0:	ee10 3a10 	vmov	r3, s0
 800bdc4:	b507      	push	{r0, r1, r2, lr}
 800bdc6:	4a1d      	ldr	r2, [pc, #116]	; (800be3c <sinf+0x7c>)
 800bdc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	dc05      	bgt.n	800bddc <sinf+0x1c>
 800bdd0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800be40 <sinf+0x80>
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	f000 fc69 	bl	800c6ac <__kernel_sinf>
 800bdda:	e004      	b.n	800bde6 <sinf+0x26>
 800bddc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bde0:	db04      	blt.n	800bdec <sinf+0x2c>
 800bde2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bde6:	b003      	add	sp, #12
 800bde8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdec:	4668      	mov	r0, sp
 800bdee:	f000 f851 	bl	800be94 <__ieee754_rem_pio2f>
 800bdf2:	f000 0003 	and.w	r0, r0, #3
 800bdf6:	2801      	cmp	r0, #1
 800bdf8:	d008      	beq.n	800be0c <sinf+0x4c>
 800bdfa:	2802      	cmp	r0, #2
 800bdfc:	d00d      	beq.n	800be1a <sinf+0x5a>
 800bdfe:	b9b0      	cbnz	r0, 800be2e <sinf+0x6e>
 800be00:	2001      	movs	r0, #1
 800be02:	eddd 0a01 	vldr	s1, [sp, #4]
 800be06:	ed9d 0a00 	vldr	s0, [sp]
 800be0a:	e7e4      	b.n	800bdd6 <sinf+0x16>
 800be0c:	eddd 0a01 	vldr	s1, [sp, #4]
 800be10:	ed9d 0a00 	vldr	s0, [sp]
 800be14:	f000 f96a 	bl	800c0ec <__kernel_cosf>
 800be18:	e7e5      	b.n	800bde6 <sinf+0x26>
 800be1a:	2001      	movs	r0, #1
 800be1c:	eddd 0a01 	vldr	s1, [sp, #4]
 800be20:	ed9d 0a00 	vldr	s0, [sp]
 800be24:	f000 fc42 	bl	800c6ac <__kernel_sinf>
 800be28:	eeb1 0a40 	vneg.f32	s0, s0
 800be2c:	e7db      	b.n	800bde6 <sinf+0x26>
 800be2e:	eddd 0a01 	vldr	s1, [sp, #4]
 800be32:	ed9d 0a00 	vldr	s0, [sp]
 800be36:	f000 f959 	bl	800c0ec <__kernel_cosf>
 800be3a:	e7f5      	b.n	800be28 <sinf+0x68>
 800be3c:	3f490fd8 	.word	0x3f490fd8
 800be40:	00000000 	.word	0x00000000

0800be44 <tanf>:
 800be44:	ee10 3a10 	vmov	r3, s0
 800be48:	b507      	push	{r0, r1, r2, lr}
 800be4a:	4a10      	ldr	r2, [pc, #64]	; (800be8c <tanf+0x48>)
 800be4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be50:	4293      	cmp	r3, r2
 800be52:	dc05      	bgt.n	800be60 <tanf+0x1c>
 800be54:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800be90 <tanf+0x4c>
 800be58:	2001      	movs	r0, #1
 800be5a:	f000 fc6f 	bl	800c73c <__kernel_tanf>
 800be5e:	e004      	b.n	800be6a <tanf+0x26>
 800be60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800be64:	db04      	blt.n	800be70 <tanf+0x2c>
 800be66:	ee30 0a40 	vsub.f32	s0, s0, s0
 800be6a:	b003      	add	sp, #12
 800be6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800be70:	4668      	mov	r0, sp
 800be72:	f000 f80f 	bl	800be94 <__ieee754_rem_pio2f>
 800be76:	0040      	lsls	r0, r0, #1
 800be78:	f000 0002 	and.w	r0, r0, #2
 800be7c:	f1c0 0001 	rsb	r0, r0, #1
 800be80:	eddd 0a01 	vldr	s1, [sp, #4]
 800be84:	ed9d 0a00 	vldr	s0, [sp]
 800be88:	e7e7      	b.n	800be5a <tanf+0x16>
 800be8a:	bf00      	nop
 800be8c:	3f490fda 	.word	0x3f490fda
 800be90:	00000000 	.word	0x00000000

0800be94 <__ieee754_rem_pio2f>:
 800be94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be96:	ee10 6a10 	vmov	r6, s0
 800be9a:	4b86      	ldr	r3, [pc, #536]	; (800c0b4 <__ieee754_rem_pio2f+0x220>)
 800be9c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800bea0:	429c      	cmp	r4, r3
 800bea2:	b087      	sub	sp, #28
 800bea4:	4605      	mov	r5, r0
 800bea6:	dc05      	bgt.n	800beb4 <__ieee754_rem_pio2f+0x20>
 800bea8:	2300      	movs	r3, #0
 800beaa:	ed85 0a00 	vstr	s0, [r5]
 800beae:	6043      	str	r3, [r0, #4]
 800beb0:	2000      	movs	r0, #0
 800beb2:	e020      	b.n	800bef6 <__ieee754_rem_pio2f+0x62>
 800beb4:	4b80      	ldr	r3, [pc, #512]	; (800c0b8 <__ieee754_rem_pio2f+0x224>)
 800beb6:	429c      	cmp	r4, r3
 800beb8:	dc38      	bgt.n	800bf2c <__ieee754_rem_pio2f+0x98>
 800beba:	2e00      	cmp	r6, #0
 800bebc:	f024 040f 	bic.w	r4, r4, #15
 800bec0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800c0bc <__ieee754_rem_pio2f+0x228>
 800bec4:	4b7e      	ldr	r3, [pc, #504]	; (800c0c0 <__ieee754_rem_pio2f+0x22c>)
 800bec6:	dd18      	ble.n	800befa <__ieee754_rem_pio2f+0x66>
 800bec8:	429c      	cmp	r4, r3
 800beca:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bece:	bf09      	itett	eq
 800bed0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c0c4 <__ieee754_rem_pio2f+0x230>
 800bed4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c0c8 <__ieee754_rem_pio2f+0x234>
 800bed8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bedc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c0cc <__ieee754_rem_pio2f+0x238>
 800bee0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bee4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bee8:	edc0 6a00 	vstr	s13, [r0]
 800beec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bef0:	edc0 7a01 	vstr	s15, [r0, #4]
 800bef4:	2001      	movs	r0, #1
 800bef6:	b007      	add	sp, #28
 800bef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befa:	429c      	cmp	r4, r3
 800befc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bf00:	bf09      	itett	eq
 800bf02:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c0c4 <__ieee754_rem_pio2f+0x230>
 800bf06:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c0c8 <__ieee754_rem_pio2f+0x234>
 800bf0a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bf0e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c0cc <__ieee754_rem_pio2f+0x238>
 800bf12:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bf16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf1a:	edc0 6a00 	vstr	s13, [r0]
 800bf1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf22:	edc0 7a01 	vstr	s15, [r0, #4]
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2a:	e7e4      	b.n	800bef6 <__ieee754_rem_pio2f+0x62>
 800bf2c:	4b68      	ldr	r3, [pc, #416]	; (800c0d0 <__ieee754_rem_pio2f+0x23c>)
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	dc71      	bgt.n	800c016 <__ieee754_rem_pio2f+0x182>
 800bf32:	f000 fce7 	bl	800c904 <fabsf>
 800bf36:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c0d4 <__ieee754_rem_pio2f+0x240>
 800bf3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bf3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bf42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf46:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800bf4a:	ee17 0a90 	vmov	r0, s15
 800bf4e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c0bc <__ieee754_rem_pio2f+0x228>
 800bf52:	eeb1 7a46 	vneg.f32	s14, s12
 800bf56:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bf5a:	281f      	cmp	r0, #31
 800bf5c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c0c8 <__ieee754_rem_pio2f+0x234>
 800bf60:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bf64:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bf68:	ee16 3a90 	vmov	r3, s13
 800bf6c:	dc1c      	bgt.n	800bfa8 <__ieee754_rem_pio2f+0x114>
 800bf6e:	1e47      	subs	r7, r0, #1
 800bf70:	4959      	ldr	r1, [pc, #356]	; (800c0d8 <__ieee754_rem_pio2f+0x244>)
 800bf72:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bf76:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800bf7a:	428a      	cmp	r2, r1
 800bf7c:	d014      	beq.n	800bfa8 <__ieee754_rem_pio2f+0x114>
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	ed95 7a00 	vldr	s14, [r5]
 800bf84:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf88:	2e00      	cmp	r6, #0
 800bf8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf8e:	ed85 0a01 	vstr	s0, [r5, #4]
 800bf92:	dab0      	bge.n	800bef6 <__ieee754_rem_pio2f+0x62>
 800bf94:	eeb1 7a47 	vneg.f32	s14, s14
 800bf98:	eeb1 0a40 	vneg.f32	s0, s0
 800bf9c:	ed85 7a00 	vstr	s14, [r5]
 800bfa0:	ed85 0a01 	vstr	s0, [r5, #4]
 800bfa4:	4240      	negs	r0, r0
 800bfa6:	e7a6      	b.n	800bef6 <__ieee754_rem_pio2f+0x62>
 800bfa8:	15e4      	asrs	r4, r4, #23
 800bfaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bfae:	1aa2      	subs	r2, r4, r2
 800bfb0:	2a08      	cmp	r2, #8
 800bfb2:	dde4      	ble.n	800bf7e <__ieee754_rem_pio2f+0xea>
 800bfb4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c0c4 <__ieee754_rem_pio2f+0x230>
 800bfb8:	eef0 6a40 	vmov.f32	s13, s0
 800bfbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bfc0:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bfc4:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bfc8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c0cc <__ieee754_rem_pio2f+0x238>
 800bfcc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800bfd0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800bfd4:	eef0 7a40 	vmov.f32	s15, s0
 800bfd8:	ee15 3a90 	vmov	r3, s11
 800bfdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bfe0:	1aa4      	subs	r4, r4, r2
 800bfe2:	2c19      	cmp	r4, #25
 800bfe4:	dc04      	bgt.n	800bff0 <__ieee754_rem_pio2f+0x15c>
 800bfe6:	edc5 5a00 	vstr	s11, [r5]
 800bfea:	eeb0 0a66 	vmov.f32	s0, s13
 800bfee:	e7c7      	b.n	800bf80 <__ieee754_rem_pio2f+0xec>
 800bff0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c0dc <__ieee754_rem_pio2f+0x248>
 800bff4:	eeb0 0a66 	vmov.f32	s0, s13
 800bff8:	eea7 0a25 	vfma.f32	s0, s14, s11
 800bffc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c000:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c004:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c0e0 <__ieee754_rem_pio2f+0x24c>
 800c008:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800c00c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c010:	ed85 7a00 	vstr	s14, [r5]
 800c014:	e7b4      	b.n	800bf80 <__ieee754_rem_pio2f+0xec>
 800c016:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c01a:	db06      	blt.n	800c02a <__ieee754_rem_pio2f+0x196>
 800c01c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c020:	edc0 7a01 	vstr	s15, [r0, #4]
 800c024:	edc0 7a00 	vstr	s15, [r0]
 800c028:	e742      	b.n	800beb0 <__ieee754_rem_pio2f+0x1c>
 800c02a:	15e2      	asrs	r2, r4, #23
 800c02c:	3a86      	subs	r2, #134	; 0x86
 800c02e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c03a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c0e4 <__ieee754_rem_pio2f+0x250>
 800c03e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c046:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c04a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c04e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c052:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c05a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c05e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c062:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06a:	edcd 7a05 	vstr	s15, [sp, #20]
 800c06e:	d11e      	bne.n	800c0ae <__ieee754_rem_pio2f+0x21a>
 800c070:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	bf0c      	ite	eq
 800c07a:	2301      	moveq	r3, #1
 800c07c:	2302      	movne	r3, #2
 800c07e:	491a      	ldr	r1, [pc, #104]	; (800c0e8 <__ieee754_rem_pio2f+0x254>)
 800c080:	9101      	str	r1, [sp, #4]
 800c082:	2102      	movs	r1, #2
 800c084:	9100      	str	r1, [sp, #0]
 800c086:	a803      	add	r0, sp, #12
 800c088:	4629      	mov	r1, r5
 800c08a:	f000 f88d 	bl	800c1a8 <__kernel_rem_pio2f>
 800c08e:	2e00      	cmp	r6, #0
 800c090:	f6bf af31 	bge.w	800bef6 <__ieee754_rem_pio2f+0x62>
 800c094:	edd5 7a00 	vldr	s15, [r5]
 800c098:	eef1 7a67 	vneg.f32	s15, s15
 800c09c:	edc5 7a00 	vstr	s15, [r5]
 800c0a0:	edd5 7a01 	vldr	s15, [r5, #4]
 800c0a4:	eef1 7a67 	vneg.f32	s15, s15
 800c0a8:	edc5 7a01 	vstr	s15, [r5, #4]
 800c0ac:	e77a      	b.n	800bfa4 <__ieee754_rem_pio2f+0x110>
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e7e5      	b.n	800c07e <__ieee754_rem_pio2f+0x1ea>
 800c0b2:	bf00      	nop
 800c0b4:	3f490fd8 	.word	0x3f490fd8
 800c0b8:	4016cbe3 	.word	0x4016cbe3
 800c0bc:	3fc90f80 	.word	0x3fc90f80
 800c0c0:	3fc90fd0 	.word	0x3fc90fd0
 800c0c4:	37354400 	.word	0x37354400
 800c0c8:	37354443 	.word	0x37354443
 800c0cc:	2e85a308 	.word	0x2e85a308
 800c0d0:	43490f80 	.word	0x43490f80
 800c0d4:	3f22f984 	.word	0x3f22f984
 800c0d8:	0800cd60 	.word	0x0800cd60
 800c0dc:	2e85a300 	.word	0x2e85a300
 800c0e0:	248d3132 	.word	0x248d3132
 800c0e4:	43800000 	.word	0x43800000
 800c0e8:	0800cde0 	.word	0x0800cde0

0800c0ec <__kernel_cosf>:
 800c0ec:	ee10 3a10 	vmov	r3, s0
 800c0f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c0f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0fc:	da05      	bge.n	800c10a <__kernel_cosf+0x1e>
 800c0fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c102:	ee17 2a90 	vmov	r2, s15
 800c106:	2a00      	cmp	r2, #0
 800c108:	d03b      	beq.n	800c182 <__kernel_cosf+0x96>
 800c10a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c10e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c112:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c188 <__kernel_cosf+0x9c>
 800c116:	4a1d      	ldr	r2, [pc, #116]	; (800c18c <__kernel_cosf+0xa0>)
 800c118:	ee66 7a07 	vmul.f32	s15, s12, s14
 800c11c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c190 <__kernel_cosf+0xa4>
 800c120:	eea6 7a25 	vfma.f32	s14, s12, s11
 800c124:	4293      	cmp	r3, r2
 800c126:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800c194 <__kernel_cosf+0xa8>
 800c12a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c12e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c198 <__kernel_cosf+0xac>
 800c132:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c136:	eddf 5a19 	vldr	s11, [pc, #100]	; 800c19c <__kernel_cosf+0xb0>
 800c13a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c13e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c1a0 <__kernel_cosf+0xb4>
 800c142:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c146:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800c14a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c14e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800c152:	dc04      	bgt.n	800c15e <__kernel_cosf+0x72>
 800c154:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800c158:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800c15c:	4770      	bx	lr
 800c15e:	4a11      	ldr	r2, [pc, #68]	; (800c1a4 <__kernel_cosf+0xb8>)
 800c160:	4293      	cmp	r3, r2
 800c162:	bfda      	itte	le
 800c164:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c168:	ee07 3a10 	vmovle	s14, r3
 800c16c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800c170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c174:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800c178:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c17c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c180:	4770      	bx	lr
 800c182:	eeb0 0a66 	vmov.f32	s0, s13
 800c186:	4770      	bx	lr
 800c188:	ad47d74e 	.word	0xad47d74e
 800c18c:	3e999999 	.word	0x3e999999
 800c190:	310f74f6 	.word	0x310f74f6
 800c194:	b493f27c 	.word	0xb493f27c
 800c198:	37d00d01 	.word	0x37d00d01
 800c19c:	bab60b61 	.word	0xbab60b61
 800c1a0:	3d2aaaab 	.word	0x3d2aaaab
 800c1a4:	3f480000 	.word	0x3f480000

0800c1a8 <__kernel_rem_pio2f>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	ed2d 8b04 	vpush	{d8-d9}
 800c1b0:	b0d7      	sub	sp, #348	; 0x15c
 800c1b2:	469b      	mov	fp, r3
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	4bbe      	ldr	r3, [pc, #760]	; (800c4b0 <__kernel_rem_pio2f+0x308>)
 800c1b8:	9964      	ldr	r1, [sp, #400]	; 0x190
 800c1ba:	9002      	str	r0, [sp, #8]
 800c1bc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c1c0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800c1c2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c1c6:	1ed1      	subs	r1, r2, #3
 800c1c8:	2308      	movs	r3, #8
 800c1ca:	fb91 f1f3 	sdiv	r1, r1, r3
 800c1ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c1d2:	f10b 3aff 	add.w	sl, fp, #4294967295
 800c1d6:	1c4c      	adds	r4, r1, #1
 800c1d8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800c1dc:	eba1 050a 	sub.w	r5, r1, sl
 800c1e0:	aa1a      	add	r2, sp, #104	; 0x68
 800c1e2:	eb09 070a 	add.w	r7, r9, sl
 800c1e6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800c1ea:	4696      	mov	lr, r2
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	42bb      	cmp	r3, r7
 800c1f0:	dd0f      	ble.n	800c212 <__kernel_rem_pio2f+0x6a>
 800c1f2:	af42      	add	r7, sp, #264	; 0x108
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	454a      	cmp	r2, r9
 800c1f8:	dc27      	bgt.n	800c24a <__kernel_rem_pio2f+0xa2>
 800c1fa:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800c1fe:	eb0b 0302 	add.w	r3, fp, r2
 800c202:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c206:	9d02      	ldr	r5, [sp, #8]
 800c208:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c20c:	f04f 0c00 	mov.w	ip, #0
 800c210:	e015      	b.n	800c23e <__kernel_rem_pio2f+0x96>
 800c212:	42dd      	cmn	r5, r3
 800c214:	bf5d      	ittte	pl
 800c216:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800c21a:	ee07 2a90 	vmovpl	s15, r2
 800c21e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c222:	eef0 7a47 	vmovmi.f32	s15, s14
 800c226:	ecee 7a01 	vstmia	lr!, {s15}
 800c22a:	3301      	adds	r3, #1
 800c22c:	e7df      	b.n	800c1ee <__kernel_rem_pio2f+0x46>
 800c22e:	ecf5 6a01 	vldmia	r5!, {s13}
 800c232:	ed33 7a01 	vldmdb	r3!, {s14}
 800c236:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c23a:	f10c 0c01 	add.w	ip, ip, #1
 800c23e:	45d4      	cmp	ip, sl
 800c240:	ddf5      	ble.n	800c22e <__kernel_rem_pio2f+0x86>
 800c242:	ece7 7a01 	vstmia	r7!, {s15}
 800c246:	3201      	adds	r2, #1
 800c248:	e7d5      	b.n	800c1f6 <__kernel_rem_pio2f+0x4e>
 800c24a:	ab06      	add	r3, sp, #24
 800c24c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c250:	9304      	str	r3, [sp, #16]
 800c252:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c4bc <__kernel_rem_pio2f+0x314>
 800c256:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c4b8 <__kernel_rem_pio2f+0x310>
 800c25a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c25e:	9303      	str	r3, [sp, #12]
 800c260:	464d      	mov	r5, r9
 800c262:	ab56      	add	r3, sp, #344	; 0x158
 800c264:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c268:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c26c:	3f01      	subs	r7, #1
 800c26e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c272:	00bf      	lsls	r7, r7, #2
 800c274:	ab56      	add	r3, sp, #344	; 0x158
 800c276:	19da      	adds	r2, r3, r7
 800c278:	3a4c      	subs	r2, #76	; 0x4c
 800c27a:	2300      	movs	r3, #0
 800c27c:	1ae9      	subs	r1, r5, r3
 800c27e:	2900      	cmp	r1, #0
 800c280:	dc4c      	bgt.n	800c31c <__kernel_rem_pio2f+0x174>
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fb88 	bl	800c998 <scalbnf>
 800c288:	eeb0 8a40 	vmov.f32	s16, s0
 800c28c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c290:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c294:	f000 fb3e 	bl	800c914 <floorf>
 800c298:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c29c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c2a6:	edcd 7a01 	vstr	s15, [sp, #4]
 800c2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ae:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c2b2:	dd48      	ble.n	800c346 <__kernel_rem_pio2f+0x19e>
 800c2b4:	1e69      	subs	r1, r5, #1
 800c2b6:	ab06      	add	r3, sp, #24
 800c2b8:	f1c4 0008 	rsb	r0, r4, #8
 800c2bc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c2c0:	9a01      	ldr	r2, [sp, #4]
 800c2c2:	fa4c f300 	asr.w	r3, ip, r0
 800c2c6:	441a      	add	r2, r3
 800c2c8:	4083      	lsls	r3, r0
 800c2ca:	9201      	str	r2, [sp, #4]
 800c2cc:	ebac 0203 	sub.w	r2, ip, r3
 800c2d0:	ab06      	add	r3, sp, #24
 800c2d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c2d6:	f1c4 0307 	rsb	r3, r4, #7
 800c2da:	fa42 f803 	asr.w	r8, r2, r3
 800c2de:	f1b8 0f00 	cmp.w	r8, #0
 800c2e2:	dd41      	ble.n	800c368 <__kernel_rem_pio2f+0x1c0>
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	4285      	cmp	r5, r0
 800c2f0:	dc6d      	bgt.n	800c3ce <__kernel_rem_pio2f+0x226>
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	dd04      	ble.n	800c300 <__kernel_rem_pio2f+0x158>
 800c2f6:	2c01      	cmp	r4, #1
 800c2f8:	d07e      	beq.n	800c3f8 <__kernel_rem_pio2f+0x250>
 800c2fa:	2c02      	cmp	r4, #2
 800c2fc:	f000 8086 	beq.w	800c40c <__kernel_rem_pio2f+0x264>
 800c300:	f1b8 0f02 	cmp.w	r8, #2
 800c304:	d130      	bne.n	800c368 <__kernel_rem_pio2f+0x1c0>
 800c306:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c30a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c30e:	b359      	cbz	r1, 800c368 <__kernel_rem_pio2f+0x1c0>
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fb41 	bl	800c998 <scalbnf>
 800c316:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c31a:	e025      	b.n	800c368 <__kernel_rem_pio2f+0x1c0>
 800c31c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c320:	a806      	add	r0, sp, #24
 800c322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c32a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c32e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c332:	ee10 1a10 	vmov	r1, s0
 800c336:	ed32 0a01 	vldmdb	r2!, {s0}
 800c33a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c33e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c342:	3301      	adds	r3, #1
 800c344:	e79a      	b.n	800c27c <__kernel_rem_pio2f+0xd4>
 800c346:	d106      	bne.n	800c356 <__kernel_rem_pio2f+0x1ae>
 800c348:	1e6b      	subs	r3, r5, #1
 800c34a:	aa06      	add	r2, sp, #24
 800c34c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c350:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c354:	e7c3      	b.n	800c2de <__kernel_rem_pio2f+0x136>
 800c356:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c35a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c362:	da31      	bge.n	800c3c8 <__kernel_rem_pio2f+0x220>
 800c364:	f04f 0800 	mov.w	r8, #0
 800c368:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c370:	f040 80a8 	bne.w	800c4c4 <__kernel_rem_pio2f+0x31c>
 800c374:	1e6b      	subs	r3, r5, #1
 800c376:	4618      	mov	r0, r3
 800c378:	2200      	movs	r2, #0
 800c37a:	4548      	cmp	r0, r9
 800c37c:	da4d      	bge.n	800c41a <__kernel_rem_pio2f+0x272>
 800c37e:	2a00      	cmp	r2, #0
 800c380:	f000 8087 	beq.w	800c492 <__kernel_rem_pio2f+0x2ea>
 800c384:	aa06      	add	r2, sp, #24
 800c386:	3c08      	subs	r4, #8
 800c388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c38c:	2900      	cmp	r1, #0
 800c38e:	f000 808d 	beq.w	800c4ac <__kernel_rem_pio2f+0x304>
 800c392:	4620      	mov	r0, r4
 800c394:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c398:	9302      	str	r3, [sp, #8]
 800c39a:	f000 fafd 	bl	800c998 <scalbnf>
 800c39e:	9b02      	ldr	r3, [sp, #8]
 800c3a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c4bc <__kernel_rem_pio2f+0x314>
 800c3a4:	0099      	lsls	r1, r3, #2
 800c3a6:	aa42      	add	r2, sp, #264	; 0x108
 800c3a8:	1850      	adds	r0, r2, r1
 800c3aa:	1d05      	adds	r5, r0, #4
 800c3ac:	461c      	mov	r4, r3
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	f280 80b8 	bge.w	800c524 <__kernel_rem_pio2f+0x37c>
 800c3b4:	2500      	movs	r5, #0
 800c3b6:	1b5c      	subs	r4, r3, r5
 800c3b8:	2c00      	cmp	r4, #0
 800c3ba:	f2c0 80d8 	blt.w	800c56e <__kernel_rem_pio2f+0x3c6>
 800c3be:	4f3d      	ldr	r7, [pc, #244]	; (800c4b4 <__kernel_rem_pio2f+0x30c>)
 800c3c0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c3c4:	2400      	movs	r4, #0
 800c3c6:	e0c6      	b.n	800c556 <__kernel_rem_pio2f+0x3ae>
 800c3c8:	f04f 0802 	mov.w	r8, #2
 800c3cc:	e78a      	b.n	800c2e4 <__kernel_rem_pio2f+0x13c>
 800c3ce:	ab06      	add	r3, sp, #24
 800c3d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c3d4:	b949      	cbnz	r1, 800c3ea <__kernel_rem_pio2f+0x242>
 800c3d6:	b12b      	cbz	r3, 800c3e4 <__kernel_rem_pio2f+0x23c>
 800c3d8:	aa06      	add	r2, sp, #24
 800c3da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c3de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	e781      	b.n	800c2ee <__kernel_rem_pio2f+0x146>
 800c3ea:	aa06      	add	r2, sp, #24
 800c3ec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c3f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	e7f5      	b.n	800c3e4 <__kernel_rem_pio2f+0x23c>
 800c3f8:	1e68      	subs	r0, r5, #1
 800c3fa:	ab06      	add	r3, sp, #24
 800c3fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c404:	aa06      	add	r2, sp, #24
 800c406:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c40a:	e779      	b.n	800c300 <__kernel_rem_pio2f+0x158>
 800c40c:	1e68      	subs	r0, r5, #1
 800c40e:	ab06      	add	r3, sp, #24
 800c410:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c418:	e7f4      	b.n	800c404 <__kernel_rem_pio2f+0x25c>
 800c41a:	a906      	add	r1, sp, #24
 800c41c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c420:	3801      	subs	r0, #1
 800c422:	430a      	orrs	r2, r1
 800c424:	e7a9      	b.n	800c37a <__kernel_rem_pio2f+0x1d2>
 800c426:	f10c 0c01 	add.w	ip, ip, #1
 800c42a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c42e:	2a00      	cmp	r2, #0
 800c430:	d0f9      	beq.n	800c426 <__kernel_rem_pio2f+0x27e>
 800c432:	eb0b 0305 	add.w	r3, fp, r5
 800c436:	aa1a      	add	r2, sp, #104	; 0x68
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	1898      	adds	r0, r3, r2
 800c43c:	3004      	adds	r0, #4
 800c43e:	1c69      	adds	r1, r5, #1
 800c440:	3704      	adds	r7, #4
 800c442:	2200      	movs	r2, #0
 800c444:	4465      	add	r5, ip
 800c446:	9005      	str	r0, [sp, #20]
 800c448:	428d      	cmp	r5, r1
 800c44a:	f6ff af0a 	blt.w	800c262 <__kernel_rem_pio2f+0xba>
 800c44e:	a81a      	add	r0, sp, #104	; 0x68
 800c450:	eb02 0c03 	add.w	ip, r2, r3
 800c454:	4484      	add	ip, r0
 800c456:	9803      	ldr	r0, [sp, #12]
 800c458:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c45c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c460:	9001      	str	r0, [sp, #4]
 800c462:	ee07 0a90 	vmov	s15, r0
 800c466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c46a:	9805      	ldr	r0, [sp, #20]
 800c46c:	edcc 7a00 	vstr	s15, [ip]
 800c470:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c474:	eb00 0802 	add.w	r8, r0, r2
 800c478:	f04f 0c00 	mov.w	ip, #0
 800c47c:	45d4      	cmp	ip, sl
 800c47e:	dd0c      	ble.n	800c49a <__kernel_rem_pio2f+0x2f2>
 800c480:	eb02 0c07 	add.w	ip, r2, r7
 800c484:	a842      	add	r0, sp, #264	; 0x108
 800c486:	4484      	add	ip, r0
 800c488:	edcc 7a01 	vstr	s15, [ip, #4]
 800c48c:	3101      	adds	r1, #1
 800c48e:	3204      	adds	r2, #4
 800c490:	e7da      	b.n	800c448 <__kernel_rem_pio2f+0x2a0>
 800c492:	9b04      	ldr	r3, [sp, #16]
 800c494:	f04f 0c01 	mov.w	ip, #1
 800c498:	e7c7      	b.n	800c42a <__kernel_rem_pio2f+0x282>
 800c49a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c49e:	ed38 7a01 	vldmdb	r8!, {s14}
 800c4a2:	f10c 0c01 	add.w	ip, ip, #1
 800c4a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c4aa:	e7e7      	b.n	800c47c <__kernel_rem_pio2f+0x2d4>
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	e769      	b.n	800c384 <__kernel_rem_pio2f+0x1dc>
 800c4b0:	0800d124 	.word	0x0800d124
 800c4b4:	0800d0f8 	.word	0x0800d0f8
 800c4b8:	43800000 	.word	0x43800000
 800c4bc:	3b800000 	.word	0x3b800000
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	4260      	negs	r0, r4
 800c4c6:	eeb0 0a48 	vmov.f32	s0, s16
 800c4ca:	f000 fa65 	bl	800c998 <scalbnf>
 800c4ce:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c4b8 <__kernel_rem_pio2f+0x310>
 800c4d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4da:	db1a      	blt.n	800c512 <__kernel_rem_pio2f+0x36a>
 800c4dc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c4bc <__kernel_rem_pio2f+0x314>
 800c4e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c4e4:	aa06      	add	r2, sp, #24
 800c4e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ea:	a906      	add	r1, sp, #24
 800c4ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4f0:	3408      	adds	r4, #8
 800c4f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c4f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c4fe:	ee10 3a10 	vmov	r3, s0
 800c502:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c506:	1c6b      	adds	r3, r5, #1
 800c508:	ee17 2a90 	vmov	r2, s15
 800c50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c510:	e73f      	b.n	800c392 <__kernel_rem_pio2f+0x1ea>
 800c512:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c516:	aa06      	add	r2, sp, #24
 800c518:	ee10 3a10 	vmov	r3, s0
 800c51c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c520:	462b      	mov	r3, r5
 800c522:	e736      	b.n	800c392 <__kernel_rem_pio2f+0x1ea>
 800c524:	aa06      	add	r2, sp, #24
 800c526:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c52a:	9202      	str	r2, [sp, #8]
 800c52c:	ee07 2a90 	vmov	s15, r2
 800c530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c534:	3c01      	subs	r4, #1
 800c536:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c53a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c53e:	ed65 7a01 	vstmdb	r5!, {s15}
 800c542:	e734      	b.n	800c3ae <__kernel_rem_pio2f+0x206>
 800c544:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c548:	ecf7 6a01 	vldmia	r7!, {s13}
 800c54c:	ed9c 7a00 	vldr	s14, [ip]
 800c550:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c554:	3401      	adds	r4, #1
 800c556:	454c      	cmp	r4, r9
 800c558:	dc01      	bgt.n	800c55e <__kernel_rem_pio2f+0x3b6>
 800c55a:	42a5      	cmp	r5, r4
 800c55c:	daf2      	bge.n	800c544 <__kernel_rem_pio2f+0x39c>
 800c55e:	aa56      	add	r2, sp, #344	; 0x158
 800c560:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c564:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c568:	3501      	adds	r5, #1
 800c56a:	3804      	subs	r0, #4
 800c56c:	e723      	b.n	800c3b6 <__kernel_rem_pio2f+0x20e>
 800c56e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c570:	2a03      	cmp	r2, #3
 800c572:	d84d      	bhi.n	800c610 <__kernel_rem_pio2f+0x468>
 800c574:	e8df f002 	tbb	[pc, r2]
 800c578:	021f1f3e 	.word	0x021f1f3e
 800c57c:	aa56      	add	r2, sp, #344	; 0x158
 800c57e:	4411      	add	r1, r2
 800c580:	399c      	subs	r1, #156	; 0x9c
 800c582:	4608      	mov	r0, r1
 800c584:	461c      	mov	r4, r3
 800c586:	2c00      	cmp	r4, #0
 800c588:	dc5f      	bgt.n	800c64a <__kernel_rem_pio2f+0x4a2>
 800c58a:	4608      	mov	r0, r1
 800c58c:	461c      	mov	r4, r3
 800c58e:	2c01      	cmp	r4, #1
 800c590:	dc6b      	bgt.n	800c66a <__kernel_rem_pio2f+0x4c2>
 800c592:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c596:	2b01      	cmp	r3, #1
 800c598:	dc77      	bgt.n	800c68a <__kernel_rem_pio2f+0x4e2>
 800c59a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c59e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c5a2:	f1b8 0f00 	cmp.w	r8, #0
 800c5a6:	d176      	bne.n	800c696 <__kernel_rem_pio2f+0x4ee>
 800c5a8:	edc6 6a00 	vstr	s13, [r6]
 800c5ac:	ed86 7a01 	vstr	s14, [r6, #4]
 800c5b0:	edc6 7a02 	vstr	s15, [r6, #8]
 800c5b4:	e02c      	b.n	800c610 <__kernel_rem_pio2f+0x468>
 800c5b6:	aa56      	add	r2, sp, #344	; 0x158
 800c5b8:	4411      	add	r1, r2
 800c5ba:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c5be:	399c      	subs	r1, #156	; 0x9c
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	da32      	bge.n	800c62c <__kernel_rem_pio2f+0x484>
 800c5c6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ca:	d035      	beq.n	800c638 <__kernel_rem_pio2f+0x490>
 800c5cc:	eef1 7a47 	vneg.f32	s15, s14
 800c5d0:	edc6 7a00 	vstr	s15, [r6]
 800c5d4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c5d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5dc:	a82f      	add	r0, sp, #188	; 0xbc
 800c5de:	2101      	movs	r1, #1
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	da2c      	bge.n	800c63e <__kernel_rem_pio2f+0x496>
 800c5e4:	f1b8 0f00 	cmp.w	r8, #0
 800c5e8:	d001      	beq.n	800c5ee <__kernel_rem_pio2f+0x446>
 800c5ea:	eef1 7a67 	vneg.f32	s15, s15
 800c5ee:	edc6 7a01 	vstr	s15, [r6, #4]
 800c5f2:	e00d      	b.n	800c610 <__kernel_rem_pio2f+0x468>
 800c5f4:	aa56      	add	r2, sp, #344	; 0x158
 800c5f6:	4411      	add	r1, r2
 800c5f8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c4c0 <__kernel_rem_pio2f+0x318>
 800c5fc:	399c      	subs	r1, #156	; 0x9c
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da0e      	bge.n	800c620 <__kernel_rem_pio2f+0x478>
 800c602:	f1b8 0f00 	cmp.w	r8, #0
 800c606:	d001      	beq.n	800c60c <__kernel_rem_pio2f+0x464>
 800c608:	eef1 7a67 	vneg.f32	s15, s15
 800c60c:	edc6 7a00 	vstr	s15, [r6]
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	f003 0007 	and.w	r0, r3, #7
 800c616:	b057      	add	sp, #348	; 0x15c
 800c618:	ecbd 8b04 	vpop	{d8-d9}
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	ed31 7a01 	vldmdb	r1!, {s14}
 800c624:	3b01      	subs	r3, #1
 800c626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c62a:	e7e8      	b.n	800c5fe <__kernel_rem_pio2f+0x456>
 800c62c:	ed71 7a01 	vldmdb	r1!, {s15}
 800c630:	3801      	subs	r0, #1
 800c632:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c636:	e7c4      	b.n	800c5c2 <__kernel_rem_pio2f+0x41a>
 800c638:	eef0 7a47 	vmov.f32	s15, s14
 800c63c:	e7c8      	b.n	800c5d0 <__kernel_rem_pio2f+0x428>
 800c63e:	ecb0 7a01 	vldmia	r0!, {s14}
 800c642:	3101      	adds	r1, #1
 800c644:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c648:	e7ca      	b.n	800c5e0 <__kernel_rem_pio2f+0x438>
 800c64a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c64e:	ed70 6a01 	vldmdb	r0!, {s13}
 800c652:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c656:	3c01      	subs	r4, #1
 800c658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c65c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c664:	edc0 7a00 	vstr	s15, [r0]
 800c668:	e78d      	b.n	800c586 <__kernel_rem_pio2f+0x3de>
 800c66a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c66e:	ed70 6a01 	vldmdb	r0!, {s13}
 800c672:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c676:	3c01      	subs	r4, #1
 800c678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c67c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c684:	edc0 7a00 	vstr	s15, [r0]
 800c688:	e781      	b.n	800c58e <__kernel_rem_pio2f+0x3e6>
 800c68a:	ed31 7a01 	vldmdb	r1!, {s14}
 800c68e:	3b01      	subs	r3, #1
 800c690:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c694:	e77f      	b.n	800c596 <__kernel_rem_pio2f+0x3ee>
 800c696:	eef1 6a66 	vneg.f32	s13, s13
 800c69a:	eeb1 7a47 	vneg.f32	s14, s14
 800c69e:	edc6 6a00 	vstr	s13, [r6]
 800c6a2:	ed86 7a01 	vstr	s14, [r6, #4]
 800c6a6:	eef1 7a67 	vneg.f32	s15, s15
 800c6aa:	e781      	b.n	800c5b0 <__kernel_rem_pio2f+0x408>

0800c6ac <__kernel_sinf>:
 800c6ac:	ee10 3a10 	vmov	r3, s0
 800c6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c6b8:	da04      	bge.n	800c6c4 <__kernel_sinf+0x18>
 800c6ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c6be:	ee17 3a90 	vmov	r3, s15
 800c6c2:	b35b      	cbz	r3, 800c71c <__kernel_sinf+0x70>
 800c6c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c6c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c720 <__kernel_sinf+0x74>
 800c6cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c724 <__kernel_sinf+0x78>
 800c6d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c728 <__kernel_sinf+0x7c>
 800c6d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c72c <__kernel_sinf+0x80>
 800c6e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c730 <__kernel_sinf+0x84>
 800c6e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c6ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6f0:	b930      	cbnz	r0, 800c700 <__kernel_sinf+0x54>
 800c6f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c734 <__kernel_sinf+0x88>
 800c6f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c6fe:	4770      	bx	lr
 800c700:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c704:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c708:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c70c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c710:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c738 <__kernel_sinf+0x8c>
 800c714:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c718:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	2f2ec9d3 	.word	0x2f2ec9d3
 800c724:	b2d72f34 	.word	0xb2d72f34
 800c728:	3638ef1b 	.word	0x3638ef1b
 800c72c:	b9500d01 	.word	0xb9500d01
 800c730:	3c088889 	.word	0x3c088889
 800c734:	be2aaaab 	.word	0xbe2aaaab
 800c738:	3e2aaaab 	.word	0x3e2aaaab

0800c73c <__kernel_tanf>:
 800c73c:	b508      	push	{r3, lr}
 800c73e:	ee10 3a10 	vmov	r3, s0
 800c742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c746:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800c74a:	eef0 7a40 	vmov.f32	s15, s0
 800c74e:	da17      	bge.n	800c780 <__kernel_tanf+0x44>
 800c750:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800c754:	ee17 1a10 	vmov	r1, s14
 800c758:	bb41      	cbnz	r1, 800c7ac <__kernel_tanf+0x70>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	4313      	orrs	r3, r2
 800c75e:	d108      	bne.n	800c772 <__kernel_tanf+0x36>
 800c760:	f000 f8d0 	bl	800c904 <fabsf>
 800c764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c768:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c76c:	eeb0 0a67 	vmov.f32	s0, s15
 800c770:	bd08      	pop	{r3, pc}
 800c772:	2801      	cmp	r0, #1
 800c774:	d0fa      	beq.n	800c76c <__kernel_tanf+0x30>
 800c776:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c77a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c77e:	e7f5      	b.n	800c76c <__kernel_tanf+0x30>
 800c780:	494e      	ldr	r1, [pc, #312]	; (800c8bc <__kernel_tanf+0x180>)
 800c782:	428a      	cmp	r2, r1
 800c784:	dd12      	ble.n	800c7ac <__kernel_tanf+0x70>
 800c786:	2b00      	cmp	r3, #0
 800c788:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800c8c0 <__kernel_tanf+0x184>
 800c78c:	bfb8      	it	lt
 800c78e:	eef1 7a40 	vneglt.f32	s15, s0
 800c792:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c796:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c8c4 <__kernel_tanf+0x188>
 800c79a:	bfb8      	it	lt
 800c79c:	eef1 0a60 	vneglt.f32	s1, s1
 800c7a0:	ee77 0a60 	vsub.f32	s1, s14, s1
 800c7a4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800c7a8:	eddf 0a47 	vldr	s1, [pc, #284]	; 800c8c8 <__kernel_tanf+0x18c>
 800c7ac:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800c8cc <__kernel_tanf+0x190>
 800c7b0:	eddf 5a47 	vldr	s11, [pc, #284]	; 800c8d0 <__kernel_tanf+0x194>
 800c7b4:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800c8d4 <__kernel_tanf+0x198>
 800c7b8:	4940      	ldr	r1, [pc, #256]	; (800c8bc <__kernel_tanf+0x180>)
 800c7ba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c7be:	428a      	cmp	r2, r1
 800c7c0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c7c4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c7c8:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c7cc:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800c8d8 <__kernel_tanf+0x19c>
 800c7d0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c7d4:	eddf 5a41 	vldr	s11, [pc, #260]	; 800c8dc <__kernel_tanf+0x1a0>
 800c7d8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c7dc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800c8e0 <__kernel_tanf+0x1a4>
 800c7e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c7e4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c8e4 <__kernel_tanf+0x1a8>
 800c7e8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c7ec:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800c8e8 <__kernel_tanf+0x1ac>
 800c7f0:	eea7 6a05 	vfma.f32	s12, s14, s10
 800c7f4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c8ec <__kernel_tanf+0x1b0>
 800c7f8:	eea6 5a07 	vfma.f32	s10, s12, s14
 800c7fc:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800c8f0 <__kernel_tanf+0x1b4>
 800c800:	eea5 6a07 	vfma.f32	s12, s10, s14
 800c804:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800c8f4 <__kernel_tanf+0x1b8>
 800c808:	eea6 5a07 	vfma.f32	s10, s12, s14
 800c80c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800c8f8 <__kernel_tanf+0x1bc>
 800c810:	eea5 6a07 	vfma.f32	s12, s10, s14
 800c814:	eeb0 7a46 	vmov.f32	s14, s12
 800c818:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c81c:	eeb0 6a60 	vmov.f32	s12, s1
 800c820:	eea7 6a24 	vfma.f32	s12, s14, s9
 800c824:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800c8fc <__kernel_tanf+0x1c0>
 800c828:	eee6 0a26 	vfma.f32	s1, s12, s13
 800c82c:	eee4 0a87 	vfma.f32	s1, s9, s14
 800c830:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800c834:	dd1d      	ble.n	800c872 <__kernel_tanf+0x136>
 800c836:	ee07 0a10 	vmov	s14, r0
 800c83a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c83e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800c842:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c846:	179b      	asrs	r3, r3, #30
 800c848:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	f1c3 0301 	rsb	r3, r3, #1
 800c854:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c858:	ee76 0a60 	vsub.f32	s1, s12, s1
 800c85c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c860:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c864:	ee07 3a90 	vmov	s15, r3
 800c868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c86c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c870:	e77c      	b.n	800c76c <__kernel_tanf+0x30>
 800c872:	2801      	cmp	r0, #1
 800c874:	d01f      	beq.n	800c8b6 <__kernel_tanf+0x17a>
 800c876:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c87a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800c87e:	4b20      	ldr	r3, [pc, #128]	; (800c900 <__kernel_tanf+0x1c4>)
 800c880:	ee16 2a90 	vmov	r2, s13
 800c884:	401a      	ands	r2, r3
 800c886:	ee06 2a10 	vmov	s12, r2
 800c88a:	ee15 2a90 	vmov	r2, s11
 800c88e:	4013      	ands	r3, r2
 800c890:	ee07 3a10 	vmov	s14, r3
 800c894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c898:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c89c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c8a0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c8a4:	eef0 7a66 	vmov.f32	s15, s13
 800c8a8:	eee7 7a20 	vfma.f32	s15, s14, s1
 800c8ac:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c8b0:	eef0 7a47 	vmov.f32	s15, s14
 800c8b4:	e75a      	b.n	800c76c <__kernel_tanf+0x30>
 800c8b6:	eef0 7a66 	vmov.f32	s15, s13
 800c8ba:	e757      	b.n	800c76c <__kernel_tanf+0x30>
 800c8bc:	3f2ca13f 	.word	0x3f2ca13f
 800c8c0:	3f490fda 	.word	0x3f490fda
 800c8c4:	33222168 	.word	0x33222168
 800c8c8:	00000000 	.word	0x00000000
 800c8cc:	37d95384 	.word	0x37d95384
 800c8d0:	3895c07a 	.word	0x3895c07a
 800c8d4:	b79bae5f 	.word	0xb79bae5f
 800c8d8:	398137b9 	.word	0x398137b9
 800c8dc:	3abede48 	.word	0x3abede48
 800c8e0:	3c11371f 	.word	0x3c11371f
 800c8e4:	3d5d0dd1 	.word	0x3d5d0dd1
 800c8e8:	38a3f445 	.word	0x38a3f445
 800c8ec:	3a1a26c8 	.word	0x3a1a26c8
 800c8f0:	3b6b6916 	.word	0x3b6b6916
 800c8f4:	3cb327a4 	.word	0x3cb327a4
 800c8f8:	3e088889 	.word	0x3e088889
 800c8fc:	3eaaaaab 	.word	0x3eaaaaab
 800c900:	fffff000 	.word	0xfffff000

0800c904 <fabsf>:
 800c904:	ee10 3a10 	vmov	r3, s0
 800c908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c90c:	ee00 3a10 	vmov	s0, r3
 800c910:	4770      	bx	lr
	...

0800c914 <floorf>:
 800c914:	ee10 3a10 	vmov	r3, s0
 800c918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c91c:	0dca      	lsrs	r2, r1, #23
 800c91e:	3a7f      	subs	r2, #127	; 0x7f
 800c920:	2a16      	cmp	r2, #22
 800c922:	dc2a      	bgt.n	800c97a <floorf+0x66>
 800c924:	2a00      	cmp	r2, #0
 800c926:	da11      	bge.n	800c94c <floorf+0x38>
 800c928:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c98c <floorf+0x78>
 800c92c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c930:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c938:	dd05      	ble.n	800c946 <floorf+0x32>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	da23      	bge.n	800c986 <floorf+0x72>
 800c93e:	4a14      	ldr	r2, [pc, #80]	; (800c990 <floorf+0x7c>)
 800c940:	2900      	cmp	r1, #0
 800c942:	bf18      	it	ne
 800c944:	4613      	movne	r3, r2
 800c946:	ee00 3a10 	vmov	s0, r3
 800c94a:	4770      	bx	lr
 800c94c:	4911      	ldr	r1, [pc, #68]	; (800c994 <floorf+0x80>)
 800c94e:	4111      	asrs	r1, r2
 800c950:	420b      	tst	r3, r1
 800c952:	d0fa      	beq.n	800c94a <floorf+0x36>
 800c954:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c98c <floorf+0x78>
 800c958:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c95c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c964:	ddef      	ble.n	800c946 <floorf+0x32>
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfbe      	ittt	lt
 800c96a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c96e:	fa40 f202 	asrlt.w	r2, r0, r2
 800c972:	189b      	addlt	r3, r3, r2
 800c974:	ea23 0301 	bic.w	r3, r3, r1
 800c978:	e7e5      	b.n	800c946 <floorf+0x32>
 800c97a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c97e:	d3e4      	bcc.n	800c94a <floorf+0x36>
 800c980:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c984:	4770      	bx	lr
 800c986:	2300      	movs	r3, #0
 800c988:	e7dd      	b.n	800c946 <floorf+0x32>
 800c98a:	bf00      	nop
 800c98c:	7149f2ca 	.word	0x7149f2ca
 800c990:	bf800000 	.word	0xbf800000
 800c994:	007fffff 	.word	0x007fffff

0800c998 <scalbnf>:
 800c998:	b508      	push	{r3, lr}
 800c99a:	ee10 2a10 	vmov	r2, s0
 800c99e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c9a2:	ed2d 8b02 	vpush	{d8}
 800c9a6:	eef0 0a40 	vmov.f32	s1, s0
 800c9aa:	d004      	beq.n	800c9b6 <scalbnf+0x1e>
 800c9ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c9b0:	d306      	bcc.n	800c9c0 <scalbnf+0x28>
 800c9b2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c9b6:	ecbd 8b02 	vpop	{d8}
 800c9ba:	eeb0 0a60 	vmov.f32	s0, s1
 800c9be:	bd08      	pop	{r3, pc}
 800c9c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c9c4:	d21c      	bcs.n	800ca00 <scalbnf+0x68>
 800c9c6:	4b1f      	ldr	r3, [pc, #124]	; (800ca44 <scalbnf+0xac>)
 800c9c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ca48 <scalbnf+0xb0>
 800c9cc:	4298      	cmp	r0, r3
 800c9ce:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c9d2:	db10      	blt.n	800c9f6 <scalbnf+0x5e>
 800c9d4:	ee10 2a90 	vmov	r2, s1
 800c9d8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c9dc:	3b19      	subs	r3, #25
 800c9de:	4403      	add	r3, r0
 800c9e0:	2bfe      	cmp	r3, #254	; 0xfe
 800c9e2:	dd0f      	ble.n	800ca04 <scalbnf+0x6c>
 800c9e4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800ca4c <scalbnf+0xb4>
 800c9e8:	eeb0 0a48 	vmov.f32	s0, s16
 800c9ec:	f000 f834 	bl	800ca58 <copysignf>
 800c9f0:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c9f4:	e7df      	b.n	800c9b6 <scalbnf+0x1e>
 800c9f6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ca50 <scalbnf+0xb8>
 800c9fa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c9fe:	e7da      	b.n	800c9b6 <scalbnf+0x1e>
 800ca00:	0ddb      	lsrs	r3, r3, #23
 800ca02:	e7ec      	b.n	800c9de <scalbnf+0x46>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dd06      	ble.n	800ca16 <scalbnf+0x7e>
 800ca08:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ca0c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ca10:	ee00 3a90 	vmov	s1, r3
 800ca14:	e7cf      	b.n	800c9b6 <scalbnf+0x1e>
 800ca16:	f113 0f16 	cmn.w	r3, #22
 800ca1a:	da06      	bge.n	800ca2a <scalbnf+0x92>
 800ca1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ca20:	4298      	cmp	r0, r3
 800ca22:	dcdf      	bgt.n	800c9e4 <scalbnf+0x4c>
 800ca24:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800ca50 <scalbnf+0xb8>
 800ca28:	e7de      	b.n	800c9e8 <scalbnf+0x50>
 800ca2a:	3319      	adds	r3, #25
 800ca2c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ca30:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ca34:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ca54 <scalbnf+0xbc>
 800ca38:	ee07 3a10 	vmov	s14, r3
 800ca3c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ca40:	e7b9      	b.n	800c9b6 <scalbnf+0x1e>
 800ca42:	bf00      	nop
 800ca44:	ffff3cb0 	.word	0xffff3cb0
 800ca48:	4c000000 	.word	0x4c000000
 800ca4c:	7149f2ca 	.word	0x7149f2ca
 800ca50:	0da24260 	.word	0x0da24260
 800ca54:	33000000 	.word	0x33000000

0800ca58 <copysignf>:
 800ca58:	ee10 3a10 	vmov	r3, s0
 800ca5c:	ee10 2a90 	vmov	r2, s1
 800ca60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca64:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	ee00 3a10 	vmov	s0, r3
 800ca6e:	4770      	bx	lr

0800ca70 <_init>:
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	bf00      	nop
 800ca74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca76:	bc08      	pop	{r3}
 800ca78:	469e      	mov	lr, r3
 800ca7a:	4770      	bx	lr

0800ca7c <_fini>:
 800ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7e:	bf00      	nop
 800ca80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca82:	bc08      	pop	{r3}
 800ca84:	469e      	mov	lr, r3
 800ca86:	4770      	bx	lr
